#!/usr/bin/perl -w

#
# gitmaild - simple gitmail wrapper for use with gitlab
# Note: *must* be run on the same host, and have permission to read the
# git repos in gitlab's home
#

use HTTP::Daemon;
use HTTP::Request;
use HTTP::Status;
use HTTP::Response;
use LWP::UserAgent;
use IPC::Open3;
use JSON;

use Cwd 'abs_path';
use File::Basename;
my $dirname = dirname(abs_path($0));

use strict;

# Made up
my $PORT = 4577;

my $GITMAIL = $dirname . "/gitmail";
print "GITMAIL is $GITMAIL\n";

my $TOKEN = "";
my $BASEURL = "http://git.flux.utah.edu/";
my $BASEPATH = "/home/git/repositories";
my $DEFAULT_ARCHIVEMAIL = 'ricci@cs.utah.edu';

sub run_gitmail($);

# TODO: listen only on localhost
my $d = HTTP::Daemon->new(LocalPort => $PORT) || die;
print "Please contact me at: <URL:", $d->url, ">\n";

while (my $c = $d->accept) {

    # TODO: Fork
    while (my $r = $c->get_request) {
        print $r->as_string;
        print "="x80 . "\n";
        # TODO: Error handling
        run_gitmail(decode_json($r->content));
    }
    $c->close;
    undef($c);

}

sub run_gitmail($) {
    my ($data) = @_;
    print "Running gitmail\n";

    # Make it look like it got called as a regular post-recieve hook
    my $refline = $data->{"before"} . " " . $data->{"after"} . " " .
        $data->{"ref"};
    print $refline . "\n";

    my $userinfo = call_gitlab_api("/users/" . $data->{"user_id"});

    #
    # NB: This depends on the Utah patch to gitlab that adds the project ID
    # to the data in the hook
    #
    my $repoinfo = call_gitlab_api("/projects/" . $data->{"repository"}{"project_id"});

    #
    # Change to the directory where the repo lives - this is the simplest way
    # to make all tools happy
    #
    my $repodir = $BASEPATH . "/" . $repoinfo->{"path_with_namespace"} . ".git";
    chdir $repodir;

    my %options;

    $options{'archivemail'} = $DEFAULT_ARCHIVEMAIL;
    $options{'mailfrom'} = $userinfo->{name} . " <" . $userinfo->{email} . ">";

    my $optionstr = format_options(%options);
    print "optionstr is '$optionstr'\n";

    #
    # Run gitmail in test mode for now
    #
    my $pid = open3(\*CHILD_IN, \*CHILD_OUT, \*CHILD_ERR,
                "$GITMAIL $optionstr");

    #
    # Pass along the commit information we were given, in the form expected
    # by a git commit hook
    #
    print CHILD_IN $refline . "\n";
    close CHILD_IN;


    waitpid $pid,0;
    print STDOUT <CHILD_OUT>;
    print STDOUT <CHILD_ERR>;

}

#
# Call the function given in the argument, and put the JSON result into a
# perl hash
#
# TODO: Error checking
sub call_gitlab_api($) {
    my ($call) = @_;
    my $url = $BASEURL . "api/v3" . $call . "?private_token=" . $TOKEN;

    my $request = HTTP::Request->new(GET => $url);
    my $ua = LWP::UserAgent->new;
    my $response = $ua->request($request);
    print "Response: " . $response->as_string . "\n";
    # Error checking
    return decode_json($response->content);
}

#
# Re-format a hash as a string sutable for passing to gitmail
# TODO: support mutiple options
# TODO: proper command line escaping
#
sub format_options(@) {
    my %opt = @_;
    return join(" ",map { "-o " . $_ . "='$opt{$_}'"} keys %opt);
}
