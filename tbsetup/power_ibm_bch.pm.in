#!/usr/bin/perl -w

#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# snmpit module for IBM BladeCenter H
#
# supports new(ip), power(on|off|cyc[le],port)
#
# Based on the APC snmpit module
#
# It's best if you download the Bladecenter H firmware from
# IBM, extract the mmblade.mib file and place that file in
# /usr/local/share/snmp/mibs
#
# Because the process of navigatings IBM's website is unneccesarily
# arduous, you can remove this need by setting use_numeric_oids
# to 1. This isn't guaranteed to work, but it might save your sanity.

package snmpit_ibm_bch;

$| = 1; # Turn off line buffering on output

use SNMP;
use strict;

# XXX for configurations in which APC unit always returns error
# even when it works.
my $ignore_errors = 0;

# The RW community for the BladeCenter H. You can set this community
# via the CLI for the AMM using
#
# snmp -c2 private -c2i1 0.0.0.0 -ca2 set -T mm[1]
#
# You can run that command as-is, but you should:
#
# . Replace 0.0.0.0 with the IP address of boss
# . Pick a better community name than "private"

my $rw_community = '@IBM_BCH_SNMP_RW@';

# Use numeric OIDs
#
# Useful for when you can't tolerate IBM's process of downloading
# the MIB file for IBM Bladecenter H
#
# Set this to 1 and numeric OIDs will be used. It is possible
# that this will break if IBM changes the underlying SNMP implementation

my $use_numeric_oids = 1;

my $debug = 10;

sub new($$;$) {

    # The next two lines are some voodoo taken from perltoot(1)
    my $proto = shift;
    my $class = ref($proto) || $proto;

    my $devicename = shift;
    my $debug = shift;

    if (!defined($debug)) {
	$debug = 0;
    }

    if ($debug) {
	print "snmpit_ibm_bch module initializing... debug level $debug\n";
    }

    $SNMP::debugging = ($debug - 5) if $debug > 5;
    my $mibpath = "/usr/local/share/snmp/mibs";
    &SNMP::addMibDirs($mibpath);
    &SNMP::addMibFiles("$mibpath/SNMPv2-SMI.txt",
		       "$mibpath/SNMPv2-MIB.txt",
		       "$mibpath/RFC1155-SMI.txt");

    if ($use_numeric_oids == 0) {
        &SNMP::addMibFiles("$mibpath/mmblade.mib");
    }

    $SNMP::save_descriptions = 1; # must be set prior to mib initialization
    SNMP::initMib();              # parses default list of Mib modules
    $SNMP::use_enums = 1;         #use enum values instead of only ints
    print "Opening SNMP session to $devicename..." if $debug;
    my $sess = new SNMP::Session(DestHost => $devicename, Community => $rw_community, Version => '1');
    if (!defined($sess)) {
	warn("ERROR: Unable to connect to $devicename via SNMP\n");
	return undef;
    }

    my $self = {};

    $self->{SESS} = $sess;
    $self->{DEBUG} = $debug;
    $self->{DEVICENAME} = $devicename;

    bless($self,$class);
    return $self;
}

sub power {
    my $self = shift;
    my $op = shift;
    my @ports = @_;

    my $oid;

    if ($use_numeric_oids == 0) {
       $oid = "BLADE-MIB::powerOnOffBlade";
    } else {
       $oid = ".1.3.6.1.4.1.2.3.51.2.22.1.6.1.1.7";
    }

    my $value = $op eq "off" ? 0 : 1;

    if ($op =~ /cyc/) {
        if ($use_numeric_oids == 0) {
            $oid = "BLADE-MIB::restartBlade";
        } else {
            $oid = ".1.3.6.1.4.1.2.3.51.2.22.1.6.1.1.8";
        }
    }

    my $errors = 0;

    foreach my $port (@ports) {
        print STDERR "**** Controlling port $port\n" if ($self->{DEBUG} > 1);
        my $retval = $self->{SESS}->set([[$oid,$port,$value,"INTEGER"]]);
        if(defined($retval)) {
            print "Set returned '$retval'\n" if $self->{DEBUG};
        }
    }

    return $errors;
}

# End with true
1;
