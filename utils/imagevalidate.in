#!/usr/bin/perl -w
#
# Copyright (c) 2014-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use Data::Dumper;
use File::stat;

#
# Validate information for an image in the DB.
# Currently we validate:
#
#  * that image file exists
#  * that file mtime matches DB update time
#  * file size is correct
#  * SHA1 hash is correct
#  * covered sector range is correct
#  * (optional) the signature file exists and is correct
#
# The update option will fix all but the first.
#
# Note that any of the existence checks requires that the caller be able
# to access the project's image directory. That may not always be true
# if validating a shared image!
#
sub usage()
{
    print("Usage: imagevalidate [-dfupqRS] [-H hash] [-V str] <imageid> ...\n".
	  "       imagevalidate [-dfupqRS] [-H hash] [-V str] -P pid\n".
	  "       imagevalidate [-dfupqRS] [-H hash] [-V str] -a\n".
	  "Validate image information in the DB.\n".
	  "Options:\n".
	  "       -d      Turn on debug mode\n".
	  "       -f      Only update if DB says an image is out of date\n".
	  "       -u      Update incorrect or missing info in the DB\n".
	  "       -p      Show current information from the DB\n".
	  "       -q      Update quietly, no messages about mismatches\n".
	  "       -R      Set the relocatable flag if image file has relocations\n".
	  "       -a      Validate/update all images\n".
	  "       -A      Validate/update all versions of an image\n".
	  "       -P pid  Validate/update all images for a specific pid\n".
	  "       -U      Do not modify updater_uid in DB\n".
	  "       -H hash Use the provided hash rather than recalculating\n".
	  "       -V str  Comma separated list of fields to validate/update\n".
	  "               fields: 'hash', 'range', 'size', 'all', 'sig'; default is 'all'\n".
	  "               NOTE: 'sig' is special as it is not a DB field and\n".
	  "               thus is not included in the 'all' option.\n".
	  "       -S      Validate/update the image signature\n".
	  "               This is the same as specifying \"-V sig\".\n");
    exit(-1);
}
my $optlist    = "dfnupqRaP:UH:V:FSA";
my $debug      = 0;
my $showinfo   = 0;
my $update     = 0;
my $fastupdate = 0;
my $setreloc   = 0;
my $quiet      = 0;
my $doall      = 0;
my $doallpid;
my $allvers    = 0;
my $dosig      = 0;
my $nouser     = 0;
my %validate   = ();
my @images     = ();
my $userperm;
my $newhash;
my $accessfs   = 1;

#
# Configure variables
#
my $TB		= "@prefix@";
my $SHA1	= "/sbin/sha1";
my $IMAGEINFO	= "$TB/sbin/imageinfo";

# XXX note: bin not sbin, /usr/testbed/sbin/imagehash is something 
# entirely different!
my $IMAGEHASH   = "$TB/bin/imagehash";

# Protos
sub doimage($);
sub makehashfile($$$$);
sub removehashfile($$);
sub checksigfile($$$);
sub makesigfile($$$);
sub removesigfile($$);
sub havefullimage($);
sub havedeltaimage($);
sub fatal($);

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use EmulabConstants;
use Image;
use OSinfo;
use User;
use Project;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $fastupdate = 1;
}
if (defined($options{"u"})) {
    $update = 1;
    $userperm = TB_IMAGEID_MODIFYINFO();
}
else {
    $userperm = TB_IMAGEID_READINFO();
}
if (defined($options{"p"})) {
    $showinfo = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"R"})) {
    fatal("Do not use -R; image relocations are NOT a reliable indicator!");
    #$setreloc = 1;
}
if (defined($options{"a"})) {
    $doall = 1;
}
if (defined($options{"A"})) {
    $allvers = 1;
}
if (defined($options{"P"})) {
    if ($options{"P"} =~ /^([-\w]+)$/) {
	$doallpid = $1;
	$doall = 1;
    } else {
	fatal("Invalid project name for -P");
    }
}
if (defined($options{"U"})) {
    $nouser = 1;
}
if (defined($options{"H"})) {
    if ($options{"H"} =~ /^([\da-fA-F]+)$/) {
	$newhash = lc($1);
    } else {
	fatal("Invalid hash string");
    }
}
if (defined($options{"V"})) {
    foreach my $f (split(',', $options{"V"})) {
	$validate{$f} = 1;
    }
} else {
    $validate{"all"} = 1;
}
if (defined($options{"S"}) || $validate{"sig"}) {
    $dosig = 1;
}
@images = @ARGV;

my $fixit = 0;
if (defined($options{"F"})) {
    $fixit = 1;
}

my ($user,$user_uid);
if ($UID) {
    $user = User->ThisUser();
    if (!defined($user)) {
	fatal("You ($UID) do not exist!");
    }
    $user_uid = $user->uid();
}

if ($nouser && $UID && !$user->IsAdmin()) {
    fatal("Only admin can use -U");
}

if ($doall) {
    if ($UID && !$user->IsAdmin()) {
	fatal("Only admin can use -a");
    }
    if ($doallpid) {
	if (!Project->Lookup($doallpid)) {
	    fatal("No such project '$doallpid'");
	}
    }
    @images = Image->ListAllVersions("ndz", $doallpid);
    if (@images > 50 && ($validate{"hash"} || $dosig)) {
	print STDERR "WARNING: processing ", int(@images),
	" images, will take a LONG time!\n";
    }
}

if (!$doall && @images == 0) {
    usage();
}
if (defined($newhash) && @images > 1) {
    fatal("-H option can only be used with a single image");
}
if ($allvers && @images > 1) {
    fatal("-A option can only be used with a single image");
}

my $errs = 0;

#
# Check all versions of a single image.
#
# In addition to putting all the versions in our list to check
# individually, perform some aggregate checks:
#
# - make sure there is SOME version of the image
# - all versions from 0 to current must exist in DB
# - version 0 must be a full image
#
if ($allvers) {
    my $image = Image->Lookup($images[0]);
    if (!$image) {
	print STDERR "$images[0]: no such image\n";
	exit(1);
    }

    my @iversions;
    $image->AllVersions(\@iversions);

    # Get the canonical name, sans version, for reporting.
    my $iname = $image->pid() . "/" . $image->imagename();

    if (@iversions == 0) {
	print STDERR "$iname: no version exists!\n";
	exit(1);
    }
    my $vers = 0;
    my @nimages = ();
    @iversions = reverse @iversions;
    foreach my $imobj (@iversions) {
	my $fqname = "$iname:$vers";
	if ($imobj->version() != $vers) {
	    my $ivers = $imobj->version() - 1;
	    if ($vers == $ivers) {
		print STDERR "$iname: version $vers missing\n";
	    } else {
		print STDERR "$iname: versions $vers-$ivers missing\n";
	    }
	    $vers = $imobj->version();
	    $errs++;
	    next;
	}

	if ($vers == 0 && !havefullimage($imobj)) {
	    print STDERR "$iname: no full initial version!\n";
	    $errs++;
	}

	push @nimages, $fqname;
	$vers++;
    }
    @images = @nimages;
}

foreach my $pidimage (@images) {
    $errs += doimage($pidimage);
}
exit($errs);

sub doimage($)
{
    my ($pidimage) = @_;

    print STDERR "Checking image '$pidimage' ...\n"
	if ($debug);
    my $image = Image->Lookup($pidimage);
    if (!defined($image)) {
	print STDERR "$pidimage: no such image\n";
	return 1;
    }
    my $imageid = $image->imageid();

    #
    # If the user is not an admin, must have perm on the image.
    #
    # We also test to see if the user can access the directory in which
    # images, etc. reside. This will not always be the case, a user may
    # have DB access to an image without being able to directly access
    # the image file. This can affect the way we do tests below.
    #
    if ($UID) {
	if (!$user->IsAdmin() && !$image->AccessCheck($user, $userperm)) {
	    print STDERR "$pidimage: insufficient privilege\n";
	    return 1;
	}

	my $statme;
	if ($image->IsDirPath()) {
	    $statme = $image->path();
	} elsif ($image->path() =~ /^(.*\/)[^\/]*$/) {
	    $statme = $1;
	}
	if ($statme && -e "$statme") {
	    $accessfs = 1;
	} else {
	    print STDERR "$pidimage: WARNING: cannot access image directory '$statme', some validations disabled.\n";
	    $accessfs = 0;
	}
    } else {
	$accessfs = 1;
    }

    #
    # Determine whether the image has a delta or a full image file or both!
    #
    my ($path,$dpath,$hash,$dhash,$isdir);
    if ($image->IsDirPath()) {
	$isdir = 1;
	#
	# XXX We prefer to use image file existence as the type
	# differentiator rather than using the Have{Full,Delta}Image()
	# methods since they use the size/deltasize fields which may not
	# be initialized yet. However, we may not always be able to access
	# the image in the filesystem, so we may have to fall back on the
	# standard methods. This is all hidden in our haveXXXimage functions.
	#
	if (havefullimage($image)) {
	    $path = $image->FullImageFile();
	}
	if (havedeltaimage($image)) {
	    $dpath = $image->DeltaImageFile();
	}
	$hash = $image->hash();
	$dhash = $image->deltahash();
    } else {
	$isdir = 0;
	#
	# XXX backward compat I
	# Originally, isdelta signified that the path (always .ndz)
	# represented a delta image and not a full image.
	#
	if ($image->isdelta()) {
	    $dpath = $image->DeltaImageFile();
	    $dhash = $image->deltahash();
	}
	#
	# XXX backward compat II
	# Then we introduced separate size/hash fields to differentiate
	# deltas from fulls and to allow both to exist at once. However,
	# we never finished that (by making the path a prefix to which
        # we appended .ndz or .ddz) so the path is always .ndz and only
	# one of full or delta will exist. So we have to trust the size
	# (via HaveXXXImage()) to determine whether the path represents
	# a full or delta image.
	#
	else {
	    if ($image->HaveFullImage()) {
		$path = $image->FullImageFile();
		$hash = $image->hash();
	    } elsif ($image->HaveDeltaImage()) {
		$dpath = $image->DeltaImageFile();
		$dhash = $image->deltahash();
	    }
	}
    }
    $path = ""
	if (!defined($path));
    $dpath = ""
	if (!defined($dpath));
    $hash = ""
	if (!defined($hash));
    $dhash = ""
	if (!defined($dhash));

    my $size = $image->size();
    my $lbalo = $image->lba_low();
    my $lbahi = $image->lba_high();
    my $lbasize = $image->lba_size();
    my $relocatable = $image->relocatable();
    my $isdelta = $image->isdelta();
    my $dsize = $image->deltasize();
    my $stamp;
    $image->GetUpdate(\$stamp);
    $stamp = 0
	if (!defined($stamp));

    if ($showinfo) {
	print "$pidimage: mtime: $stamp\n";
	print "$pidimage: path: $path\n"
	    if ($path);
	print "$pidimage: deltapath: $dpath\n"
	    if ($dpath);
	if ($validate{"all"} || $validate{"size"}) {
	    my $chunks;
	    if ($size) {
		$chunks = int(($size + (1024*1024-1)) / (1024*1024));
		print "$pidimage: size: $size ($chunks chunks)\n";
	    }
	    if ($dsize) {
		$chunks = int(($dsize + (1024*1024-1)) / (1024*1024));
		print "$pidimage: deltasize: $dsize ($chunks chunks)\n";
	    }
	}
	if ($validate{"all"} || $validate{"hash"}) {
	    print "$pidimage: hash: $hash\n"
		if ($hash);
	    print "$pidimage: deltahash: $dhash\n"
		if ($dhash);
	}
	# XXX do sector range
	if ($validate{"all"} || $validate{"range"}) {
	    print "$pidimage: range: [$lbalo-$lbahi] (ssize: $lbasize), ".
		  "relocatable=$relocatable\n";
	}
	# XXX report on ancillary files
	my @afiles = ();
	if ($accessfs) {
	    if ($path && -e $image->FullImageSHA1File()) {
		push(@afiles, "full-SHA1");
	    }
	    if ($dpath && -e $image->DeltaImageSHA1File()) {
		push(@afiles, "delta-SHA1");
	    }
	    if ($path && -e $image->FullImageSigFile()) {
		push(@afiles, "full-sig");
	    }
	    if ($dpath && -e $image->DeltaImageSigFile()) {
		push(@afiles, "delta-sig");
	    }
	} else {
	    push(@afiles, "<cannot access directory>");
	}
	if (@afiles > 0) {
	    print "$pidimage: files: ", join(", ", @afiles), "\n";
	}

	return 0;
    }

    #
    # The image files have to exist.
    #
    if (!$path && !$dpath) {
	print STDERR "$pidimage: no image file found\n";
	return 1;
    }
    my ($ftime,$fsize,$fuid,$dftime,$dfsize,$dfuid);
    if ($path) {
	if (! -r "$path") {
	    print STDERR "$pidimage: path: image path '$path' cannot be read\n";
	    #
	    # If root and cannot read it, it doesn't exist so get rid of
	    # hash and signature files too
	    #
	    if ($UID == 0 && ($update || $fixit)) {
		removehashfile($pidimage, $path);
		removesigfile($pidimage, $path);
	    }
	    return 1;
	}
	$ftime = stat($path)->mtime;
	$fuid = stat($path)->uid;
	$fsize = stat($path)->size;

	# XXX image file size must be non-zero
	if ($fsize == 0) {
	    print STDERR "$pidimage: full image file is zero-length, no can do!\n";
	    return 1;
	}
    }
    if ($dpath) {
	if (! -r "$dpath") {
	    print STDERR "$pidimage: path: deltaimage path '$dpath' cannot be read\n";
	    #
	    # If root and cannot read it, it doesn't exist so get rid of
	    # hash and signature files too
	    #
	    if ($UID == 0 && ($update || $fixit)) {
		removehashfile($pidimage, $dpath);
		removesigfile($pidimage, $dpath);
	    }
	    return 1;
	}
	$dftime = stat($dpath)->mtime;
	$dfuid = stat($dpath)->uid;
	$dfsize = stat($dpath)->size;

	# XXX image file size must be non-zero
	if ($dfsize == 0) {
	    print STDERR "$pidimage: delta image file is zero-length, no can do!\n";
	    return 1;
	}
    }

    #
    # Take care of one-off fix to hash and sig files
    #
    if ($fixit) {
	if (!$accessfs) {
	    print STDERR "$pidimage: hash: cannot access hash/sig files\n";
	    return 1;
	}
	if ($path) {
	    print "$pidimage: fixing hash file\n";
	    if ($hash eq "") {
		$hash = `$SHA1 $path`;
		if ($?) {
		    print("$pidimage: hash: could not generate SHA1 hash of '$path'\n");
		    return 1;
		} else {
		    if ($hash =~ /^SHA1.*= ([\da-fA-F]+)$/) {
			$hash = lc($1);
		    } else {
			print("$pidimage: hash: could not parse sha1 hash: '$hash'\n");
			return 1;
		    }
		}
		if ($image->SetHash($hash) != 0) {
		    print("$pidimage: hash: could not store new hash: '$hash'\n");
		    return 1;
		}
	    }
	    makehashfile($pidimage, $path, $hash, $fuid);

	    if ($dosig && checksigfile($pidimage, $path, 0)) {
		makesigfile($pidimage, $path, $fuid);
	    }
	}
	if ($dpath) {
	    print "$pidimage: fixing delta hash file\n";
	    if ($dhash eq "") {
		$dhash = `$SHA1 $dpath`;
		if ($?) {
		    print("$pidimage: hash: could not generate SHA1 hash of '$path'\n");
		    return 1;
		} else {
		    if ($dhash =~ /^SHA1.*= ([\da-fA-F]+)$/) {
			$dhash = lc($1);
		    } else {
			print("$pidimage: hash: could not parse sha1 hash: '$dhash'\n");
			return 1;
		    }
		}
		if ($image->SetDeltaHash($dhash) != 0) {
		    print("$pidimage: hash: could not store new delta hash: '$dhash'\n");
		    return 1;
		}
	    }
	    makehashfile($pidimage, $dpath, $dhash, $dfuid);

	    #
	    # XXX cannot check the signature of a delta image since the
	    # signature is for the full image. Here we just make sure that
	    # the delta signature is the same as that of the full image.
	    #
	    if ($dosig) {
		my $dsfile = $image->DeltaImageSigFile();
		if ($path) {
		    my $sfile = $image->FullImageSigFile();
		    if (system("ln -f $sfile $dsfile")) {
			print STDERR
			    "$pidimage: WARNING: could not link $sfile to $dsfile\n";
		    }
		} elsif (-e "$dsfile") {
		    print STDERR
			"$pidimage: WARNING: could not verify signature for '$dpath'\n";
		} else {
		    print STDERR
			"$pidimage: no signature file for '$dpath'!\n";
		    return 1;
		}
	    }
	}
	return 0;
    }

    my $rv = 0;
    my $changed = 0;

    #
    # Check/fix mtime.
    #
    if ((!$path || $stamp == $ftime) && (!$dpath || $stamp == $dftime)) {
	if ($fastupdate) {
	    print STDERR "$pidimage: skipping due to time stamp\n"
		if ($debug);
	    return 0;
	}
    } else {
	if ($path && $stamp != $ftime) {
	    print("$pidimage: mtime: DB timestamp ($stamp) != mtime ($ftime)\n")
		if (!$update || !$quiet);
	    if ($update) {
		$changed = 1;
	    }
	}
	if ($dpath && $stamp != $dftime) {
	    print("$pidimage: mtime: DB timestamp ($stamp) != delta mtime ($dftime)\n")
		if (!$update || !$quiet);
	    if ($update) {
		$changed = 1;
	    }
	}
    }

    #
    # Check/fix file size.
    #
    if ($validate{"all"} || $validate{"size"}) {
	if ($path) {
	    if ($fsize != $size) {
		print("$pidimage: size: DB size ($size) != file size ($fsize)\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: size: ")
			if (!$quiet);
		    if ($image->SetSize($fsize) == 0) {
			$changed = 1;
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    }
	    # XXX backward compat, only one of size/deltasize should be set
	    if ($update && !$dpath) {
		$image->SetDeltaSize(0);
	    }
	}
	if ($dpath) {
	    if ($dfsize != $dsize) {
		print("$pidimage: size: DB deltasize ($dsize) != file size ($dfsize)\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: dsize: ")
			if (!$quiet);
		    if ($image->SetDeltaSize($dfsize) == 0) {
			$changed = 1;
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    }
	    # XXX backward compat, only one of size/deltasize should be set
	    if ($update && !$path) {
		$image->SetSize(0);
	    }
	}

	#
	# XXX isdelta is history, clear it if set.
	#
	# We do this after updating the size fields since those are now used
	# to distinguish full/delta.
	#
	if ($update && $isdelta) {
	    $image->SetDelta(0);
	}
    }

    #
    # Check/fix hash.
    #
    if ($validate{"all"} || $validate{"hash"}) {
	my $filehash = $newhash;
	if ($path) {
	    if (!defined($filehash)) {
		$filehash = `$SHA1 $path`;
		if ($?) {
		    print("$pidimage: hash: could not generate SHA1 hash of '$path'\n");
		    $filehash = "";
		    $rv = 1;
		} else {
		    if ($filehash =~ /^SHA1.*= ([\da-fA-F]+)$/) {
			$filehash = lc($1);
		    } else {
			print("$pidimage: hash: could not parse sha1 hash: '$filehash'\n");
			$filehash = "";
		    }
		}
	    }
	    if ($filehash && ($hash ne $filehash)) {
		print("$pidimage: hash: DB hash ('$hash') != file hash ('$filehash')\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: hash: ")
			if (!$quiet);
		    if ($image->SetHash($filehash) == 0) {
			makehashfile($pidimage, $path, $filehash, $fuid);
			$changed = 1;
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    } elsif ($filehash) {
		# even if the DB is correct, make sure .sha1 file is correct
		if ($update) {
		    makehashfile($pidimage, $path, $filehash, $fuid);
		}
	    }

	    if ($update && !$dpath) {
		$image->SetDeltaHash(undef);
	    }
	}

	if ($dpath) {
	    if (!defined($filehash)) {
		$filehash = `$SHA1 $dpath`;
		if ($?) {
		    print("$pidimage: hash: could not generate SHA1 hash of '$dpath'\n");
		    $filehash = "";
		    $rv = 1;
		} else {
		    if ($filehash =~ /^SHA1.*= ([\da-fA-F]+)$/) {
			$filehash = lc($1);
		    } else {
			print("$pidimage: hash: could not parse sha1 hash: '$filehash'\n");
			$filehash = "";
		    }
		}
	    }
	    if ($filehash && ($dhash ne $filehash)) {
		print("$pidimage: hash: DB deltahash ('$dhash') != delta file hash ('$filehash')\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: hash: ")
			if (!$quiet);
		    if ($image->SetDeltaHash($filehash) == 0) {
			makehashfile($pidimage, $dpath, $filehash, $dfuid);
			$changed = 1;
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    } elsif ($filehash) {
		# even if the DB is correct, make sure .sha1 file is correct
		if ($update) {
		    makehashfile($pidimage, $dpath, $filehash, $dfuid);
		}
	    }

	    if ($update && !$path) {
		$image->SetHash(undef);
	    }
	}
    }

    #
    # Check/fix sector range.
    # We can only do this if we have a full image.
    #
    if ($path && ($validate{"all"} || $validate{"range"})) {
	my ($lo,$hi,$ssize) = (-1,0,0);
	my $isreloc = $relocatable;
	my $out = `imageinfo -r $pidimage 2>&1`;
	if ($?) {
	    print("$pidimage: range: could not get sector range:\n$out");
	} else {
	    if ($out =~ /minsect=(\d+).*maxsect=(\d+).*secsize=(\d+)/s) {
		$lo = $1;
		$hi = $2;
		$ssize = $3;
		#
		# The sector range is actually relative to the slice
		# (partition) number that imagezip was told to save.
		# Thus a zero offset is actually the start sector of the
		# partition and we compensate for that before recording
		# the values in the DB.
		#
		my $off = $image->GetDiskOffset();
		if ($off > 0) {
		    $lo += $off;
		    $hi += $off;
		}
		#
		# XXX this is unreliable since we also generate a relocation
		# for images that do not have a full final sector. Hence, we
		# have disabled this.
		#
		# XXX the relocatable value returned by imageinfo is only a
		# heuristic. It says only that relocations exist in the image.
		# It is possible for a relocatable image to not actually
		# have any imagezip relocations. Hence we only change the
		# DB relocatable value from 0 -> 1 if explicitly asked and
		# there are relocations in the image file.
		#
		#if ($setreloc && $relocatable == 0 &&
		#    $out =~ /relocatable=1/s) {
		#    $isreloc = 1;
		#}
	    } else {
		print("$pidimage: range: could not parse imageinfo output:\n$out");
	    }

	    if ($lo >= 0 &&
		($lo != $lbalo || $hi != $lbahi || $ssize != $lbasize ||
		 $isreloc != $relocatable)) {
		print("$pidimage: range: DB range ([$lbalo-$lbahi]/$lbasize) != file range ([$lo-$hi]/$ssize)\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: range: ")
			if (!$quiet);
		    if ($image->SetRange($lo, $hi, $ssize, $isreloc) == 0) {
			$changed = 1;
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    }
	}
    }

    #
    # Set update time to match mtime of image.
    # If there is both a full and delta image, set DB to full image time.
    #
    if ($changed) {
	my $mtime = ($path ? $ftime : $dftime);

	print("$pidimage: mtime: ")
	    if (!$quiet);

	my $uuser = ($nouser ? undef : $user);
	# XXX if running as root and no current user, set to image creator
	if ($UID == 0 && !defined($image->updater())) {
	    $uuser = User->LookupByUid($image->creator());
	}

	if ($image->MarkUpdate($uuser, $mtime) == 0) {
	    print "[FIXED]\n"
		if (!$quiet);
	} else {
	    print "[FAILED]\n"
		if (!$quiet);
	    $rv = 1;
	}

	#
	# If both full and delta images, make sure delta matches full.
	#
	if ($path && $dpath && $ftime != $dftime) {
	    if (system("touch -r $path $dpath >/dev/null 2>&1")) {
		print STDERR
		    "$pidimage: WARNING: could not set modtime of $dpath\n";
	    }
	}
    }

    #
    # Check/fix signature file.
    #
    if ($dosig) {
	if (!$accessfs) {
	    print STDERR "$pidimage: sig: cannot access signature file\n";
	    return 1;
	}
	if ($path) {
	    if (checksigfile($pidimage, $path, 0)) {
		print("$pidimage: sig: image does not match signature\n")
		    if (!$update || !$quiet);
		if ($update) {
		    print("$pidimage: sig: ")
			if (!$quiet);
		    if (makesigfile($pidimage, $path, $fuid) == 0) {
			print "[FIXED]\n"
			    if (!$quiet);
		    } else {
			print "[FAILED]\n"
			    if (!$quiet);
			$rv = 1;
		    }
		} else {
		    $rv = 1;
		}
	    }
	}
	#
	# XXX cannot check the signature of a delta image since the signature
	# is for the full image. Here we just make sure that the delta
	# signature is the same as that of the full image.
	#
	# There is also no old sigfile to worry about.
	#
	if ($dpath) {
	    my $dsfile = $image->DeltaImageSigFile();
	    if ($path) {
		my $sfile = $image->FullImageSigFile();
		if (! -e "$dsfile" || system("cmp -s $sfile $dsfile")) {
		    print("$pidimage: dsig: delta signature missing or not the same as full\n")
			if (!$update || !$quiet);
		    if ($update) {
			print("$pidimage: dsig: ")
			    if (!$quiet);
			if (system("ln -f $sfile $dsfile") == 0) {
			    print "[FIXED]\n"
				if (!$quiet);
			} else {
			    print "[FAILED]\n"
				if (!$quiet);
			    $rv = 1;
			}
		    } else {
			$rv = 1;
		    }
		}
	    } elsif (-e "$dsfile") {
		print STDERR
		    "$pidimage: dsig: WARNING: could not verify signature for '$dpath'\n";
	    } else {
		print STDERR
		    "$pidimage: dsig: no signature file for '$dpath'!\n";
		$rv = 1;
	    }
	}
    }

    return $rv;
}

sub partoffset($$)
{
    my ($part,$mbroff) = @_;
}

# Return 0 if action is successful
sub checksigfile($$$)
{
    my ($pidimage,$imagepath,$isdelta) = @_;
    my $sigfile = "$imagepath.sig";

    print STDERR "$pidimage: sig: checking signature of '$imagepath' ...\n"
	if ($debug);

    if (!$accessfs) {
	print STDERR "$pidimage: sig: cannot access signature file\n";
	return 0;
    }

    if (! -e "$sigfile") {
	# XXX the old stateful swapout path puts sigs in a sigs/ subdir
	if ($imagepath =~ /^(.*)\/([^\/]+)$/) {
	    my ($idir,$iname) = ($1,$2);
	    my $osigfile = "$idir/sigs/$iname.sig";
	    if (-e "$osigfile") {
		print STDERR
		    "$pidimage: WARNING: found old signature file $osigfile, ".
		    "use -u to create new signature.\n";
	    }
	}

	print STDERR
	    "$pidimage: WARNING: no signature file for $imagepath\n";
	return 1;
    }

    # XXX delta images will have full-image signatures and won't match
    if ($isdelta) {
	print STDERR
	    "$pidimage: WARNING: cannot verify signature of delta image ".
	    "$imagepath\n";
	return 0;
    }

    if (system("$IMAGEHASH -SX $imagepath")) {
	print STDERR
	    "$pidimage: WARNING: $imagepath does not match signature\n";
	return 1;
    }

    print STDERR "$pidimage: sig: signature OK\n"
	if ($debug);
    return 0;
}

# Return 0 if action is successful
sub makesigfile($$$)
{
    my ($pidimage,$imagepath,$fuid) = @_;
    my $sigfile = "$imagepath.sig";

    # XXX get rid of old sigfile
    if ($imagepath =~ /^(.*)\/([^\/]+)$/) {
	my ($idir,$iname) = ($1,$2);
	my $osigfile = "$idir/sigs/$iname.sig";
	if (-e "$osigfile") {
	    print STDERR
		"$pidimage: NOTE: removing old signature file $osigfile\n";
	    unlink($osigfile);
	}
    }

    unlink($sigfile);
    if (system("$IMAGEHASH -cXq $imagepath")) {
	print STDERR
	    "$pidimage: WARNING: could not create signature for $imagepath\n";
	unlink($sigfile);
	return 1;
    }
    if (defined($fuid) && system("chown $fuid $sigfile >/dev/null 2>&1")) {
	print STDERR
	    "$pidimage: WARNING: could not chown $sigfile to $fuid\n";
    }

    return 0;
}

# Return 0 if action is successful
sub removesigfile($$)
{
    my ($pidimage,$imagepath) = @_;
    my $sigfile = "$imagepath.sig";

    if (!unlink($sigfile)) {
	return 1;
    }

    return 0;
}

#
# XXX Over time, we have used two different conventions for sha1 files.
#
# Old format is <image>.sha1. New format is <image>.ndz.sha1, possibly
# with a version number. We take it upon ourselves to force everything
# into the new format.
#

sub makehashfile($$$$)
{
    my ($pidimage,$imagepath,$hash,$fuid) = @_;

    my $hashfile = "$imagepath.sha1";
    unlink($hashfile);
    if (open(HASH, ">$hashfile")) {
	# XXX recreate the sha1 output format for compatibility
	print HASH "SHA1 ($imagepath) = $hash\n";
	close($hashfile);
	if (defined($fuid) &&
	    system("chown $fuid $hashfile >/dev/null 2>&1")) {
	    print STDERR
		"$pidimage: WARNING: could not chown $hashfile to $fuid\n";
	}
	if (system("touch -r $imagepath $hashfile >/dev/null 2>&1")) {
	    print STDERR
		"$pidimage: WARNING: could not set modtime of $hashfile\n";
	}
    } else {
	print STDERR
	    "$pidimage: WARNING: could not create $hashfile\n";
    }

    # Look for old format files so we can remove them
    # XXX there only appear in the pre-version number days.
    if ($imagepath =~ /(.*)\.ndz$/) {
	my $oldhashfile = "$1.sha1";
	if (-e "$oldhashfile") {
	    print STDERR
		"$pidimage: NOTE: removing old sha1 file $oldhashfile\n";
	    unlink("$oldhashfile");
	}
    }
}

sub removehashfile($$)
{
    my ($pidimage,$imagepath) = @_;

    my $hashfile = "$imagepath.sha1";
    unlink($hashfile);

    # Remove old format file too
    if ($imagepath =~ /(.*)\.ndz$/) {
	my $oldhashfile = "$1.sha1";
	unlink($oldhashfile);
    }
}

#
# XXX our versions of image existence checks.
# We don't want to have to rely on DB state if we don't have to since
# we are probably the ones initializing that state!
#
sub havefullimage($)
{
    my ($image) = @_;

    if ($accessfs) {
	if (-e $image->FullImagePath()) {
	    return 1;
	}
    } else {
	if ($image->HaveFullImage()) {
	    return 1;
	}
    }
    return 0;
}

sub havedeltaimage($)
{
    my ($image) = @_;

    if ($accessfs) {
	if (-e $image->DeltaImagePath()) {
	    return 1;
	}
    } else {
	if ($image->HaveDeltaImage()) {
	    return 1;
	}
    }
    return 0;
}

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}
