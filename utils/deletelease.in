#!/usr/bin/perl -w
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;

#
# Delete a lease.
#
sub usage()
{
    print STDERR "Usage: deletelease [-fhd] lname\n";
    print STDERR "   -h       This message\n";
    print STDERR "   -d       Print additional debug info\n";
    print STDERR "   -f       Force destruction even if lease is in transition\n";
    print STDERR "   lname    Name of lease in <pid>/<id> form\n";
    exit(-1);
}
my $optlist  = "dhf";
my $debug = 0;
my $force = 0;
my $pid;
my $lname;
my $lease;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB		 = "@prefix@";
my $BSCONTROL	 = "$TB/sbin/bscontrol";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use Lease;
use Blockstore;
use Project;
use User;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{d})) {
    $debug = 1;
}
if (defined($options{f})) {
    $force = 1;
}
if (@ARGV != 1) {
    print STDERR "Must specify exactly one lname\n";
    usage();
}

$lname = $ARGV[0];
if ($lname =~ /^([-\w]+)\/([-\w]+)$/) {
    $pid = $1;
    $lname = $2;
} else {
    fatal("Lease name $lname not in the form <pid>/<lname>.");
}

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

#
# Check lease: project must exist, lease must exist,
# caller must have privilege to destroy.
#
if (!Project->Lookup($pid) || !($lease = Lease->Lookup($pid, $lname)) ||
    !$lease->AccessCheck($this_user, LEASE_ACCESS_DESTROY())) {
    fatal("Cannot access lease $pid/$lname.");
}

#
# Lock the lease and handle cleanup.
#
if ($lease->Lock()) {
    fatal("$pid/$lname: currently locked, try again later.");
}

my $ostate = $lease->state();
if (!$force && $ostate eq "initializing") {
    fatal("$pid/$lname: currently in transition, try again later.");
}

#
# For an approved dataset lease, we must free up the server storage
#
if ($lease->type() =~ /dataset$/ && $ostate ne "unapproved") {
    #
    # Put in initializing state and unlock since this could be
    # time consuming.
    #
    if ($lease->UpdateState("initializing")) {
	fatal("$pid/$lname: could not mark lease as in-transition.");
    }
    $lease->Unlock();

    my $idx = $lease->lease_idx();

    #
    # For efficiency, lookup the server in the blockstores table.
    # Saves gathering info from every storage server.
    #
    my $bstore = Blockstore->LookupByLease($idx);
    if (!$bstore) {
	fatal("$pid/$lname: could not find blockstore object.");
    }
    my $srv = $bstore->node_id();

    #
    # Call the blockstore control program to handle all things blockstore
    # related (e.g., the actual deallocation of storage on the servers).
    #
    if (system("$BSCONTROL -S $srv destroy lease-$idx")) {
	$lease->UpdateState("unapproved");
	fatal("$pid/$lname: could not deallocate storage");
    }
}

if ($lease->Delete()) {
    fatal("Could not destroy lease $pid/$lname.");
}

exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    if (defined($lease) && $lease->GotLock()) {
	$lease->Unlock();
    }
    die("*** $0:\n".
	"    $mesg\n");
}
