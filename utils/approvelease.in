#!/usr/bin/perl -w
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;

#
# Approve a lease.
# This forces allocation of storage for dataset leases.
#
sub usage()
{
    print STDERR "Usage: approvelease [-hd] [-s state] name\n";
    print STDERR "   -h         This message\n";
    print STDERR "   -d         Print additional debug info\n";
    print STDERR "   -s state   New state for the lease (defaults to 'valid')\n";
    print STDERR "   name       Name of lease (of form <pid>/<id>)\n";
    exit(-1);
}
my $optlist  = "dhs:";
my $debug = 0;
my $pid;
my $state = "valid";
my $lname;
my $lease;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB		 = "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use Lease;
use Project;
use User;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{h})) {
    usage();
}
if (defined($options{d})) {
    $debug++;
}
if (defined($options{s})) {
    $state = $options{s};
}

if (@ARGV != 1) {
    print STDERR "Must specify exactly one lease.\n";
    usage();
}

# lease name must include a project
$lname = $ARGV[0];
if ($lname =~ /^([-\w]+)\/([-\w]+)$/) {
    $pid = $1;
    $lname = $2;
} else {
    fatal("Lease name $lname not in the form <pid>/<lname>.");
}

#
# Normally, leases are approved at creation time. To approve other leases
# explicitly, you must be admin.
# 
if (!TBAdmin()) {
    fatal("Only admins can approve leases.");
}

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

my $project = Project->Lookup($pid);
if (!defined($project)) {
    fatal("No such project $pid\n");
}

#
# Check name: must exist, be modifiable and in the unapproved state.
#
$lease = Lease->Lookup($pid, $lname);
if (!$lease) {
    fatal("$pid/$lname: lease does not exist.");
}
if (!$lease->AccessCheck($this_user, LEASE_ACCESS_MODIFY())) {
    fatal("$pid/$lname: you are not allowed to modify lease.");
}
if ($lease->state() ne "unapproved") {
    fatal("$pid/$lname: lease has already been approved.");
}

# Check new state. Must be something other than "unapproved".
if ($state eq "unapproved") {
    fatal("$pid/$lname: must set to one of the approved states.");
}

# Do it.
if ($lease->Approve($state)) {
    fatal("$pid/$lname: could not approve lease into state '$state'");
}

# It all worked!
print "$pid/$lname: state is now '$state'\n";
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
