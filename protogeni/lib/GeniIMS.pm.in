#!/usr/bin/perl -w
#
# Copyright (c) 2008-2016 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package GeniIMS;

#
# Portal stuff.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use libtestbed;
use libEmulab;
use emutil;
use GeniDB;
use Genixmlrpc;
use GeniResponse;
use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniStd;
use English;
use XML::Simple;
use Data::Dumper;
use Date::Parse;
use POSIX qw(strftime);
use Time::Local;
use URI;
use URI::QueryParam;
use Project;

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $MAINSITE 	   = @TBMAINSITE@;
my $OURDOMAIN      = "@OURDOMAIN@";
my $PGENIDOMAIN    = "@PROTOGENI_DOMAIN@";
my $PROTOGENI_URL  = "@PROTOGENI_URL@";
my $API_VERSION    = 1.01;

#
# When fetching the IMS data, tell the client what version of the
# blob we are sending them.
#
my $SERVERVERSION = 1;

#
# Yuck, until we have image testing in place, we have to hardwire the
# x86 types.
#
my @X86TYPES = ("C240M4","C220M4","pcvm","r320","c6220","dl360","r720",
		"c8220","c8220x","d2100","d710","d820","d430","pc3000",
		"c220g2", "c6320");

# We are using a different DB.
my $DB;

sub InitDBHandle()
{
    $DB = GeniDB->New("ims");
}

#
# Tell the client what API revision we support.  The correspondence
# between revision numbers and API features is to be specified elsewhere.
# No credentials are required.
#
sub GetVersion()
{
    return GeniResponse->Create( GENIRESPONSE_SUCCESS, $API_VERSION );
}

sub GetCredential($)
{
    my ($argref) = @_;

    #
    # The caller has to be known. 
    #
    my $caller_authority = GeniAuthority->Lookup($ENV{'GENIURN'});
    if (!defined($caller_authority)) {
	return GeniResponse->Create(GENIRESPONSE_REFUSED,
				    undef, "Who are You?");
    }

    #
    # Return a credential giving caller permission to do other things.
    # This credential is for access to this authority.
    #
    my $authority = GeniAuthority->Lookup($ENV{'MYURN'});
    if (!defined($authority)) {
	print STDERR "Could not find local authority object\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef, "Who am I?");
    }
    
    #
    # Is this an "approved" CA (in the geni_cas table)?
    #
    my $safe_dn = DBQuoteSpecial($ENV{'SSL_CLIENT_I_DN'});
    my $query_result =
	DBQueryWarn("select hash from geni_cas where DN=$safe_dn");
    return GeniResponse->Create(GENIRESPONSE_ERROR)
	if (!defined($query_result));
	
    my $credential = GeniCredential->Create($authority, $caller_authority);
    if (!defined($credential)) {
	print STDERR "Could not create credential for $caller_authority\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    # It has very limited permission
    $credential->AddCapability("postimageinfo", 0);

    if ($credential->Sign($GeniCredential::LOCALMA_FLAG) != 0) {
	$credential->Delete();
	print STDERR "Could not sign credential for $caller_authority\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Could not create signed credential")
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $credential->asString());
}

sub PostImageInfo($)
{
    my ($argref) = @_;
    my $cred  = $argref->{'credential'};
    my $blob  = $argref->{'imageinfo'};
    
    if (! defined($cred)) {
	return GeniResponse->MalformedArgsResponse("Where's the credential?");
    }
    if (! defined($blob)) {
	return GeniResponse->MalformedArgsResponse("Where's the info?");
    }
    my $authority = GeniAuthority->Lookup($ENV{'MYURN'});
    if (!defined($authority)) {
	print STDERR "Could not find local authority object\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    my $credential = GeniCredential::CheckCredential($cred, $authority);
    return $credential
	if (GeniResponse::IsResponse($credential));

    $credential->HasPrivilege("postimageinfo") or
	return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
				    "Insufficient permission to postimageinfo");

    print STDERR Dumper($blob);

    #
    # Verify all the right stuff exists in the blob.
    #
    my $response = VerifyBlob($blob);
    return $response
	if (GeniResponse::IsResponse($response));

    #
    # Verify that that the urn of the image is in the same domain as the
    # the calling entitiy. 
    #
    my $image_hrn  = GeniHRN->new($blob->{'urn'});
    my $caller_hrn = GeniHRN->new($credential->owner_urn());
    return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
			"Not allowed to postimageinfo for the image domain")
	if ($image_hrn->domain() ne $caller_hrn->domain());

    InitDBHandle();

    #
    # Big lock.
    #
    return GeniResponse->Create(GENIRESPONSE_ERROR)
	if (! $DB->QueryWarn("lock tables images write, ".
			     "     image_versions write, ".
			     "     image_permissions write"));
    
    #
    # If the image exists, we allow certain updates to be made.
    #
    my $imagedata = LookupImage($blob->{'version_uuid'});
    if ($imagedata) {
	$response = UpdateImage($imagedata, $blob);
    }
    else {
	$response = NewImage($blob);
    }
    $DB->QueryWarn("unlock tables");
    return $response;
}

#
# Verify the blob.
#
sub VerifyBlob($)
{
    my ($blob) = @_;
    my $error;

    # Floats, for big integers.
    foreach my $key ("filesize", "lba_low", "lba_high") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	return GeniResponse->MalformedArgsResponse("Malformed: $key")
	    if ($blob->{$key} !~ /^\d+\.0$/);

	$blob->{$key} = int($blob->{$key});
    }
    # Integer checks.
    foreach my $key ("version", "lba_size",
		     "mbr_version", "isdataset", "issystem", "isversioned") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	return GeniResponse->MalformedArgsResponse("Malformed: $key")
	    if ($blob->{$key} !~ /^\d+$/);
    }
    # UUID checks.
    foreach my $key ("image_uuid", "version_uuid") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	return GeniResponse->MalformedArgsResponse("Malformed UUID: $key")
	    if ($blob->{$key} !~ /^\w+\-\w+\-\w+\-\w+\-\w+$/);
    }
    # URN checks.
    foreach my $key ("urn", "creator_urn", "project_urn") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	return GeniResponse->MalformedArgsResponse("Malformed URN: $key")
	    if (!GeniHRN::IsValid($blob->{$key}));
    }
    # Standard image table checks.
    foreach my $key ("imagename", "description", "osfeatures") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	next
	    if (($key eq "description" || $key eq "osfeatures") &&
		$blob->{$key} eq "");

	if (!TBcheck_dbslot($blob->{$key}, "images", $key,
			    TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    return GeniResponse->MalformedArgsResponse("Illegal $key");
	}	
    }
    # URLs.
    foreach my $key ("metadata_url") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));

	if (!TBcheck_dbslot($blob->{$key}, "projects", "URL",
			    TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    return GeniResponse->MalformedArgsResponse("Illegal URL: $key");
	}	
    }
    
    # Other slots that must exists.
    foreach my $key ("created", "arch", "types_known_working", "visibility") {
	return GeniResponse->MalformedArgsResponse("Missing $key")
	    if (! (exists($blob->{$key}) && defined($blob->{$key})));
    }
    # Gack, why does Frontier do this. It is stupid.
    if (ref($blob->{'created'}) eq 'Frontier::RPC2::DateTime::ISO8601') {
	$blob->{'created'} = $blob->{'created'}->value;
    }
    return GeniResponse->MalformedArgsResponse("Illegal created")
	if (!defined(str2time($blob->{'created'})));
    return GeniResponse->MalformedArgsResponse("Illegal arch")
	if ($blob->{'arch'} !~ /^(i386|x86_64|aarch64)$/);
    return GeniResponse->MalformedArgsResponse("Illegal visibility")
	if ($blob->{'visibility'} !~ /^(project|public)$/);
    # We allow an empty list here.
    return GeniResponse->MalformedArgsResponse("Illegal types_known_working")
	if ($blob->{'types_known_working'} !~ /^[-\w,]*$/);
    # Permissions are optional.
    if (exists($blob->{'image_permissions'})) {
	foreach my $ref (@{ $blob->{'image_permissions'} }) {
	    return GeniResponse->MalformedArgsResponse("Malformed permissions")
		if (!(exists($ref->{'type'}) && exists($ref->{'urn'})));
	    return GeniResponse->MalformedArgsResponse("Bad permission type")
		if ($ref->{'type'} ne "user" && $ref->{'type'} ne "project");
	    return GeniResponse->MalformedArgsResponse("Invalid permission urn")
		if (! GeniHRN::IsValid($ref->{'urn'}));

	    my $hrn = GeniHRN->new($ref->{'urn'});
	    if ($ref->{'type'} eq "user") {
		return GeniResponse->MalformedArgsResponse("Improper user urn ".
							   "for permission")
		    if ($hrn->type() ne "user");
	    }
	    else {
		return GeniResponse->MalformedArgsResponse("Improper project ".
							   "urn for permission")
		    if ($hrn->type() ne "authority" ||
			!defined($hrn->subauth()));
	    }
	}
    }
    return 0;
  bad:
    return GeniResponse->MalformedArgsResponse($error);
}

#
# Lookup 
#
sub LookupImage($)
{
    my ($version_uuid) = @_;

    my $query_result =
	$DB->QueryWarn("select images.*,image_versions.* ".
		       "  from image_versions ".
		       "left join images on ".
		       "     images.image_uuid=image_versions.image_uuid ".
		       "where image_versions.version_uuid='$version_uuid'");
    return undef
	if (! (defined($query_result) && $query_result->numrows));

    return $query_result->fetchrow_hashref();
}

#
# Update an image.
#
sub UpdateImage($$)
{
    my ($imagedata, $blob) = @_;
    my $image_uuid   = $blob->{'image_uuid'};
    my $version_uuid = $blob->{'version_uuid'};
    
    # Verify uuid consistency.
    if ($imagedata->{'image_uuid'} ne $image_uuid) {
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Image UUID mismatch");
    }
    my %types_known_working = ();
    foreach my $type (split(",", $blob->{'types_known_working'}),
		      split(",", $imagedata->{'types_known_working'})) {
	$types_known_working{$type} = $type;
    }
    my %sets = (
	"description" => $blob->{'description'},
	"filesize" => $blob->{'filesize'},
	"hash" => $blob->{'sha1hash'},
	"lba_low" => $blob->{'lba_low'},
	"lba_high" => $blob->{'lba_high'},
	"lba_size" => $blob->{'lba_size'},
	"mbr_version" => $blob->{'mbr_version'},
	"arch" => $blob->{'arch'},
	"visibility" => $blob->{'visibility'},
	"virtualizaton" => $blob->{'virtualizaton'},
	"osfeatures" => $blob->{'osfeatures'},
	"types_known_working" => join(",", sort(keys(%types_known_working))),
	);
    my $created = timelocal(strptime($blob->{'created'}));

    #
    # Process the image permissions first.
    #
    if (exists($blob->{'image_permissions'})) {
	$DB->QueryWarn("delete from image_permissions ".
		       "where image_uuid='$image_uuid'")
	    or return GeniResponse->Create(GENIRESPONSE_ERROR);
	
	foreach my $ref (@{ $blob->{'image_permissions'} }) {
	    my $type = $ref->{'type'};
	    my $safe_purn = DBQuoteSpecial($ref->{'urn'});
	    my $safe_urn  = DBQuoteSpecial($blob->{'urn'});
	    my $safe_name = DBQuoteSpecial($blob->{'imagename'});

	    $DB->QueryWarn("insert into image_permissions set ".
			   "  urn=$safe_urn,imagename=$safe_name, ".
			   "  image_uuid='$image_uuid', ".
			   "  permission_type='$type', ".
			   "  permission_urn=$safe_purn") 
		or return GeniResponse->Create(GENIRESPONSE_ERROR);
	}
    }

    if (! $DB->QueryWarn("update image_versions set ".
			 "  created=FROM_UNIXTIME($created), ".
			 join(",", map("$_=" . DBQuoteSpecial($sets{$_}),
				       keys(%sets))) . " " .
			 "where version_uuid='$version_uuid'")) {
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    my $isversioned = $blob->{'isversioned'};
    if (! $DB->QueryWarn("update images set isversioned='$isversioned' ".
			 "where image_uuid='$image_uuid'")) {
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS);
}

#
# Insert new image.
#
sub NewImage($)
{
    my ($blob) = @_;
    my $needdelete  = 0;
    my $image_urn    = $blob->{'urn'};
    my $image_uuid   = $blob->{'image_uuid'};
    my $version_uuid = $blob->{'version_uuid'};
    my $safe_urn     = DBQuoteSpecial($image_urn);
    my $safe_uuid    = DBQuoteSpecial($image_uuid);

    #
    # Okay, we have to deal with a image that was deleted at the origin
    # cluster, and then recreated before we got the deletion message.
    # To keep the logic simple, and because creating images takes a long
    # time (so this will not happen often), we just assume that if the
    # image uuid for a urn changes, the origin has done exactly that, and
    # so we delete the existing image and all its versions, and start a
    # new one.
    #
    my $query_result =
	$DB->QueryWarn("select image_uuid from images ".
		       "where urn=$safe_urn and image_uuid!=$safe_uuid");
    if (!$query_result) {
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    if ($query_result->numrows) {
	print STDERR "Deleting existing image $image_urn with ".
	    "stale uuid $image_uuid\n";
	
	$DB->QueryWarn("delete images,image_versions from images ".
		       "inner join image_versions on ".
		       "      images.urn=image_versions.urn and ".
		       "      images.image_uuid=image_versions.image_uuid ".
		       "where images.urn=$safe_urn and ".
		       "      images.image_uuid=$safe_uuid")
	    or GeniResponse->Create(GENIRESPONSE_ERROR);
    }

    #
    # Create an entry in the images table if one does not exist.
    #
    $query_result =
	$DB->QueryWarn("select urn from images ".
		       "where image_uuid='$image_uuid'");
    if (!$query_result) {
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    if (!$query_result->numrows) {
	my %sets = (
	    "urn" => $blob->{'urn'},
	    "imagename" => $blob->{'imagename'},
	    "aggregate_urn" => $ENV{'GENIURN'},
	    "project_urn" => $blob->{'project_urn'},
	    "image_uuid" => $image_uuid,
	    "isdataset" => 0,
	    "issystem" => $blob->{'issystem'},
	    "isversioned" => $blob->{'isversioned'},
	);
	$DB->QueryWarn("insert into images set ".
		       	join(",", map("$_=" . DBQuoteSpecial($sets{$_}),
				      keys(%sets))))
	    or return GeniResponse->Create(GENIRESPONSE_ERROR);
	$needdelete = 1;
    }
    else {
	my $isversioned = $blob->{'isversioned'};
	if (! $DB->QueryWarn("update images set isversioned='$isversioned' ".
			     "where image_uuid='$image_uuid'")) {
	    return GeniResponse->Create(GENIRESPONSE_ERROR);
	}
    }
    my %types_known_working = ();
    foreach my $type (split(",", $blob->{'types_known_working'})) {
	$types_known_working{$type} = $type;
    }
    # Until we have image testing.
    if ($blob->{'arch'} ne "aarch64") {
	foreach my $type (@X86TYPES) {
	    $types_known_working{$type} = $type;
	}
    }
    
    #
    # Insert new version of the image.
    #
    my %sets = (
	"urn" => $blob->{'urn'},
	"imagename" => $blob->{'imagename'},
	"version" => $blob->{'version'},
	"version_uuid" => $version_uuid,
	"image_uuid" => $image_uuid,
	"creator_urn" => $blob->{'creator_urn'},
	"description" => $blob->{'description'},
	"filesize" => $blob->{'filesize'},
	"hash" => $blob->{'sha1hash'},
	"lba_low" => $blob->{'lba_low'},
	"lba_high" => $blob->{'lba_high'},
	"lba_size" => $blob->{'lba_size'},
	"mbr_version" => $blob->{'mbr_version'},
	"arch" => $blob->{'arch'},
	"visibility" => $blob->{'visibility'},
	"virtualizaton" => $blob->{'virtualizaton'},
	"osfeatures" => $blob->{'osfeatures'},
	"metadata_url" => $blob->{'metadata_url'},
	"types_known_working" => join(",", sort(keys(%types_known_working))),
	);
    my $created = timelocal(strptime($blob->{'created'}));

    #
    # Process the image permissions first.
    #
    if (exists($blob->{'image_permissions'})) {
	$DB->QueryWarn("delete from image_permissions ".
		       "where image_uuid='$image_uuid'")
	    or GeniResponse->Create(GENIRESPONSE_ERROR);
	
	foreach my $ref (@{ $blob->{'image_permissions'} }) {
	    my $type = $ref->{'type'};
	    my $safe_purn = DBQuoteSpecial($ref->{'urn'});
	    my $safe_urn  = DBQuoteSpecial($blob->{'urn'});
	    my $safe_name = DBQuoteSpecial($blob->{'imagename'});

	    $DB->QueryWarn("insert into image_permissions set ".
			   "  urn=$safe_urn,imagename=$safe_name, ".
			   "  image_uuid='$image_uuid', ".
			   "  permission_type='$type', ".
			   "  permission_urn=$safe_purn") 
		or return GeniResponse->Create(GENIRESPONSE_ERROR);
	}
    }
    if (! $DB->QueryWarn("insert into image_versions set ".
			 "  created=FROM_UNIXTIME($created), ".
			 join(",", map("$_=" . DBQuoteSpecial($sets{$_}),
				       keys(%sets))))) {
	if ($needdelete) {
	    $DB->QueryWarn("delete from images where image_uuid='$image_uuid'");
	    $DB->QueryWarn("delete from image_permissions ".
			   "where image_uuid='$image_uuid'");
	}
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS);
}

sub GetImageInfo($)
{
    my ($argref) = @_;
    my $cred   = $argref->{'credential'};
    my $urn    = $argref->{'urn'};
    my $url    = $argref->{'url'};
    my $query_result;

    if (! defined($cred)) {
	return GeniResponse->MalformedArgsResponse("Where's the credential?");
    }
    if (! (defined($urn) || defined($url))) {
	return GeniResponse->MalformedArgsResponse("Where's the urn/url?");
    }
    return GeniResponse->MalformedArgsResponse("Malformed URN")
	if (defined($urn) && !GeniHRN::IsValid($urn));

    my $authority = GeniAuthority->Lookup($ENV{'MYURN'});
    if (!defined($authority)) {
	print STDERR "Could not find local authority object\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    my $credential = GeniCredential::CheckCredential($cred, $authority);
    return $credential
	if (GeniResponse::IsResponse($credential));

    $credential->HasPrivilege("postimageinfo") or
	return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
				    "Insufficient permission to getimageinfo");

    # IMS database handle.
    InitDBHandle();

    if (defined($urn)) {
	my $hrn = GeniHRN->new($urn);
	return GeniResponse->MalformedArgsResponse("Could not parse URN")
	    if (!defined($hrn));
    
	return GeniResponse->MalformedArgsResponse("Not an image URN")
	    if ($hrn->type() ne "image");

	# The id might be version specific.
	my (undef,$pid,$imagename,$version) = $hrn->ParseImage();

	if (defined($version)) {
	    if ($version !~ /^\d+$/) {
		return GeniResponse->MalformedArgsResponse("Bad version number")
	    }
	    # Kill the version number from the url.
	    $urn =~ s/:\d+$//;
	    $urn =~ s/\/\/\d+$//;
	}
	# This // vs : thing is a pain.
	$urn =~ s/\/\//:/;
	my $safe_urn = DBQuoteSpecial($urn);

	$query_result = 
	    $DB->QueryWarn("select i.*,v.* from image_versions as v ".
			   "left join images as i on ".
			   "     i.image_uuid=v.image_uuid ".
			   "where v.urn=$safe_urn ".
			   (defined($version) ?
			    "and v.version='$version' " :
			    "order by v.version desc limit 1"));
    }
    else {
	my $safe_url = DBQuoteSpecial($url);

	$query_result = 
	    $DB->QueryWarn("select i.*,v.* from image_versions as v ".
			   "left join images as i on ".
			   "     i.image_uuid=v.image_uuid ".
			   "where v.metadata_url=$safe_url");

	if (defined($query_result) && !$query_result->numrows()) {
	    #
	    # See if the url is for the image instead of a specific
	    # version. 
	    #
	    my $uri  = URI->new($url);
	    my $uuid = $uri->query_param("uuid");
	    if ($uuid) {
		$query_result =
		    $DB->QueryWarn("select i.*,v.* ".
                                 "  from image_versions as v ".
                                 "   inner join ".
                                 "      (select image_uuid, ".
                                 "              max(version) as version ".
                                 "         from image_versions ".
                                 "       where image_uuid='$uuid' ".
                                 "       group by image_uuid) as ij ".
                                 "   on v.image_uuid=ij.image_uuid and ".
                                 "      v.version=ij.version ".
                                 "left join images as i on ".
				 "     i.image_uuid=v.image_uuid");
	    }
	}
    }
    return GeniResponse->Create(GENIRESPONSE_SEARCHFAILED)    
	if (!defined($query_result) ||
	    !$query_result->numrows());

    #
    # Return a blob. We have to generate the URL to be used for
    # image_import.
    #
    my $row = $query_result->fetchrow_hashref();

    my $blob = {"server_version" => $SERVERVERSION,
		"urn"            => $row->{'urn'},
		"imagename"      => $row->{'imagename'},
		"version"        => $row->{'version'},
		"version_uuid"   => $row->{'version_uuid'},
		"image_uuid"     => $row->{'image_uuid'},
		"metadata_url"   => $row->{'metadata_url'},
		"sha1hash"	 => $row->{'hash'},
		"isversioned"    => $row->{'isversioned'},
		"issystem"       => $row->{'issystem'},
		"project_urn"    => $row->{'project_urn'},
    };

    #
    # This is for the portal; for a versioned image, lets find the highest
    # numbered version for the caller so it can formulate a next version
    # URN. This is an odd way to do this, but the Portal has to know what
    # to call the new image so it can edit the profile.
    #
    if ($row->{'isversioned'}) {
	my $safe_urn = DBQuoteSpecial($row->{'urn'});
	
	$query_result = 
	    $DB->QueryWarn("select v.version from image_versions as v ".
			   "where v.urn=$safe_urn ".
			   "order by v.version desc limit 1");
	if (!defined($query_result) ||
	    !$query_result->numrows()) {
	    return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
					"Could not look up highest version");
	}
	my $row = $query_result->fetchrow_hashref();
	$blob->{'maxversion'} = $row->{"version"};
    }
    print STDERR Dumper($blob);

    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $blob);
}

sub DeleteImageInfo($)
{
    my ($argref) = @_;
    my $cred   = $argref->{'credential'};
    my $urn    = $argref->{'urn'};
    my $uuid   = $argref->{'uuid'};
    my $query_result;

    if (! defined($cred)) {
	return GeniResponse->MalformedArgsResponse("Where's the credential?");
    }
    if (! (defined($urn) && defined($uuid))) {
	return GeniResponse->MalformedArgsResponse("Missing urn or uuid args");
    }
    return GeniResponse->MalformedArgsResponse("Malformed URN")
	if (!GeniHRN::IsValid($urn));

    my $authority = GeniAuthority->Lookup($ENV{'MYURN'});
    if (!defined($authority)) {
	print STDERR "Could not find local authority object\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR);
    }
    my $credential = GeniCredential::CheckCredential($cred, $authority);
    return $credential
	if (GeniResponse::IsResponse($credential));

    $credential->HasPrivilege("postimageinfo") or
	return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
			    "Insufficient permission to deleteimageinfo");

    my $hrn = GeniHRN->new($urn);
    return GeniResponse->MalformedArgsResponse("Could not parse URN")
	if (!defined($hrn));
    
    return GeniResponse->MalformedArgsResponse("Not an image URN")
	if ($hrn->type() ne "image");

    return  GeniResponse->MalformedArgsResponse("Not a UUID")
	if ($uuid !~ /^\w+\-\w+\-\w+\-\w+\-\w+$/);

    #
    # Verify that that the urn of the image is in the same domain as the
    # the calling entitiy. 
    #
    my $caller_hrn = GeniHRN->new($credential->owner_urn());
    return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
			"Not allowed to deleteimageinfo for the image domain")
	if ($hrn->domain() ne $caller_hrn->domain());

    # The id might be version specific.
    my (undef,$pid,$imagename,$version) = $hrn->ParseImage();

    if (defined($version)) {
	return GeniResponse->MalformedArgsResponse("Not allowed to delete ".
						   "an image version");
    }

    # IMS database handle.
    InitDBHandle();

    # This // vs : thing is a pain.
    $urn =~ s/\/\//:/;
    my $safe_urn  = DBQuoteSpecial($urn);

    #
    # We use the uuid in this deletion so we do not delete a current
    # image cause the deletion came in out of order with a new image
    # creation (image created, deleted, created again). 
    #
    $query_result =
	$DB->QueryWarn("delete images,image_versions from images ".
		       "inner join image_versions on ".
		       "      images.urn=image_versions.urn and ".
		       "      images.image_uuid=image_versions.image_uuid ".
		       "where images.urn=$safe_urn and ".
		       "      images.image_uuid='$uuid'");
    
    return GeniResponse->Create(GENIRESPONSE_ERROR)    
	if (!defined($query_result));

    return GeniResponse->Create(GENIRESPONSE_SUCCESS);
}

# _Always_ make sure that this 1 is at the end of the file...
1;
