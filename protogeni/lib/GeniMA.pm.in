#!/usr/bin/perl -wT
#
# Copyright (c) 2008-2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package GeniMA;

#
# The server side of the CM interface on remote sites. Also communicates
# with the GMC interface at Geni Central as a client.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

use GeniSA;
use GeniResponse;
use GeniCredential;
use GeniRegistry;
use emutil;

sub GetVersion()
{
    my $blob = {
	"VERSION" => "0.1",
	"CREDENTIAL_TYPES" => ["SFA"]
    };
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $blob);
}

sub LookupPublic($)
{
    my ($options) = @_;
    
    my $match = $options->{'match'};
    my $filter = $options->{'filter'};

    my $members = {};
    if (exists($match) && defined($match)) {
	foreach my $key (@{ $match }) {
	    my $geniuser = GeniUser->Lookup($key, 0);
	    if (defined($geniuser)) {
		my $blob = {};
		GeniStd::addField($blob, "MEMBER_URN", $geniuser->urn(),
				  $filter);
		GeniStd::addField($blob, "MEMBER_UID", $geniuser->uid(),
				  $filter);
		GeniStd::addField($blob, "MEMBER_USERNAME", $geniuser->hrn(),
				  $filter);
		$members->{$geniuser->urn()} = $blob;
	    }
	}
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $members);
}

sub LookupPrivate($$)
{
    my ($credential_args, $options) = @_;
    my $credential = GeniStd::CheckCredentials($credential_args);
    return $credential
	if (GeniResponse::IsResponse($credential));
   
    $credential->HasPrivilege( "authority" ) or
	$credential->HasPrivilege( "resolve" ) or
	return GeniResponse->Create( GENIRESPONSE_FORBIDDEN, undef,
				     "Insufficient privilege" );

    my $match = $options->{'match'};
    my $filter = $options->{'filter'};

    my $members = {};
    if (exists($match) && defined($match)) {
	foreach my $key (@{ $match }) {
	    my $geniuser = GeniUser->Lookup($key, 0);
	    if (defined($geniuser)) {
		my $blob = {};
		$members->{$geniuser->urn()} = $blob;
	    }
	}
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $members);
}

sub LookupIdentifying($$)
{
    my ($credential_args, $options) = @_;

    my $credential = GeniStd::CheckCredentials($credential_args);
    return $credential
	if (GeniResponse::IsResponse($credential));
   
    $credential->HasPrivilege( "authority" ) or
	$credential->HasPrivilege( "resolve" ) or
	return GeniResponse->Create( GENIRESPONSE_FORBIDDEN, undef,
				     "Insufficient privilege" );

    my $match = $options->{'match'};
    my $filter = $options->{'filter'};

    my $members = {};
    if (exists($match) && defined($match)) {
	foreach my $key (@{ $match }) {
	    my $geniuser = GeniUser->Lookup($key, 0);
	    if (defined($geniuser)) {
		my @namelist = split(/ /, $neinuser->name());
		my $lastname = pop(@namelist);
		my $firstname = join(" ", @namelist);
		my $blob = {};
		GeniStd::addField($blob, "MEMBER_URN", $geniuser->urn(),
				  $filter);
		GeniStd::addField($blob, "MEMBER_FIRSTNAME", $firstname,
				  $filter);
		GeniStd::addField($blob, "MEMBER_LASTNAME", $lastname,
				  $filter);
		GeniStd::addField($blob, "MEMBER_EMAIL", $geniuser->email(),
				  $filter);
	    }
	}
    }
    return GeniResponse->Create(GENIRESPONSE_SUCCESS, $members);
}

sub UpdateMember($$$)
{
    my ($member_urn, $credential_args, $options) = @_;
    return GeniResponse->Create(GENIRESPONSE_FORBIDDEN, undef,
				"Update Member is Unimplemented");
}

sub GetCredentials($$$)
{
    my ($member_urn, $credential_args, $options) = @_;

    my $credential = GeniSA::GetCredential($member_urn);
    return $credential
	if (GeniResponse::IsResponse($credential));

    my $blob = {
	"geni_type" => "sfa",
	"geni_type" => "3",
	"geni_credential" => $credential->value()
    };

    return GeniResponse->Create(GENIRESPONSE_SUCCESS, [$blob]);
}
