#!/usr/bin/perl -wT
#
# Copyright (c) 2008-2016 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
package GeniImage;

#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw (IMSURL);

use GeniDB;
use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniSlice;
use GeniHRN;
use Genixmlrpc;
use GeniResponse;
use GeniUtil;
use Image;
use OSinfo;
use emutil;
use Node;
use English;
use Data::Dumper;
use Date::Parse;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $TBAPPROVAL     = "@TBAPPROVALEMAIL@";
my $TBAUDIT   	   = "@TBAUDITEMAIL@";
my $BOSSNODE       = "@BOSSNODE@";
my $OURDOMAIN      = "@OURDOMAIN@";
my $PGENIDOMAIN    = "@PROTOGENI_DOMAIN@";
my $PROTOGENI_LOCALUSER = @PROTOGENI_LOCALUSER@;
my $IMSURL         = "https://www.emulab.net:12369/protogeni/xmlrpc/ims";
my $CLIENTVERS     = 1;
my $IMPORTER       = "$TB/sbin/image_import";
my $GRANTIMAGE     = "$TB/sbin/grantimage";
if (0) {
    $IMSURL = "https://www.emulab.net:12369/protogeni/stoller/xmlrpc/ims";
}

# Cached copy of credential to talk to IMS.
my $IMS_credential;

# Debugging
my $usemydevtree  = 1;

# Export.
sub IMSURL()
{
    return $IMSURL;
}

#
# Get a credential to talk to the IMS.
#
sub GetServerCredential()
{
    return $IMS_credential
	if (defined($IMS_credential));
    
    my $response =
	Genixmlrpc::CallMethod($IMSURL, undef, "GetCredential");
    if (!defined($response)) {
	print STDERR "RPC error getting credential\n";
	return undef;
    }
    if ($response->IsError()) {
	print STDERR "GetCredential: " . $response->Dump() . "\n";
	return undef;
    }
    $IMS_credential = GeniCredential->CreateFromSigned($response->value(), 1);
    if (!defined($IMS_credential)) {
	print STDERR $GeniCredential::CreateFromSignedError . "\n";
	return undef;
    }
    return $IMS_credential;
}

#
# Ask the IMS for its info on the URN. Might be a versioned qualified
# URN, but if not the IMS will send back data for the most recent version.
#
sub GetImageData($;$)
{
    my ($token, $pmsg) = @_;
    my $errormsg;

    my $credential = GetServerCredential();
    if (!defined($credential)) {
	$errormsg = "Could not get a credential to talk to the IMS";
	goto bad;
    }
    my $key = (GeniHRN::IsValid($token) ? "urn" : "url");

    my $response =
	Genixmlrpc::CallMethod($IMSURL, undef, "GetImageInfo",
			       {"credential" => $credential->asString(),
				$key         => $token});
    
    if (!defined($response) || $response->code()) {
	my $msg = "GetImageInfo failed for $token:";
	
	if (!defined($response)) {
	    $errormsg = "$msg RPC error";
	}
	elsif (defined($response->output())) {
	    $errormsg = "$msg " . $response->output();
	}
	else {
	    $errormsg = "$msg " . GENIRESPONSE_STRING($response->code());
	}
	goto bad;
    }
    return $response->value();

  bad:
    if (defined($pmsg)) {
	$$pmsg = $errormsg;
	return undef;
    }
    return GeniResponse->Create(GENIRESPONSE_RPCERROR)
	if (!defined($response));

    return GeniResponse->Create($response->code(),
				$response->value(), $errormsg);
}

#
# Tell the image server we have deleted an image we previously told
# it about. We send the uuid in addition to the URN to avoid consistency
# problems caused by out of order notifications to the server, say if
# an image is created, deleted, then created again. We always assign a
# unique uuid to the image, and the IMS has that. We could get fancier
# but this is a rare race condition.
#
sub DeleteImageData($$;$)
{
    my ($urn, $uuid, $pmsg) = @_;
    my $safe_urn = DBQuoteSpecial($urn);
    my $errormsg;

    my $credential = GetServerCredential();
    if (!defined($credential)) {
	$errormsg = "Could not get a credential to talk to the IMS";
	goto bad;
    }

    my $response =
	Genixmlrpc::CallMethod($IMSURL, undef, "DeleteImageInfo",
			       {"credential" => $credential->asString(),
				"urn"        => $urn,
				"uuid"       => $uuid});
    
    if (!defined($response) || $response->code()) {
	my $msg = "DeleteImageInfo failed for $urn/$uuid:";
	
	if (!defined($response)) {
	    $errormsg = "$msg RPC error";
	}
	elsif ($response->code() == GENIRESPONSE_SEARCHFAILED) {
	    goto done;
	}
	elsif (defined($response->output())) {
	    $errormsg = "$msg " . $response->output();
	}
	else {
	    $errormsg = "$msg " . GENIRESPONSE_STRING($response->code());
	}
	goto bad;
    }
    #
    # The remote cluster accepted, our responsibilty is done.
    #
  done:
    emdb::DBQueryWarn("delete from image_deletions ".
		      "where urn=$safe_urn and image_uuid='$uuid'");
    return 0;

  bad:
    if (defined($pmsg)) {
	$$pmsg = $errormsg;
    }
    return -1;
}

#
# Map a URN to a local image. We do this by asking the tracker for
# the image info, then looking to see if we have that image locally,
# via the image URL.
#
# I think that we eventually want to stop using the metadata url as
# the lookup token, and switch to recording the URN of the origin image.
# For one, this will avoid call backs to the image tracker server.
#
# If we do not have a local copy, try to load it using the URL.
#
# Cache just for this, to avoid repeated calls for same image.
#
my %localblobcache = ();

sub MapToLocalImage($$)
{
    my ($urn, $pid) = @_;
    my $hrn = GeniHRN->new($urn);
    my $blob;

    if (exists($localblobcache{$urn})) {
	$blob = $localblobcache{$urn};
    }
    else {
	$blob = GetImageData($urn);
	return $blob
	    if (GeniResponse::IsError($blob));
	$localblobcache{$urn} = $blob;
    }
    my $url = $blob->{'metadata_url'};

    #print STDERR Dumper($blob);

    #
    # So, look to see if the user is trying to use an image that is
    # present in the current project. This will happen if after an import
    # the user takes a snapshot, then uses it again on the local cluster.
    # We can avoid the re-importation of the image into GeniSlices, although
    # if a user in a different project tries to use the image, we will still
    # end up doing an import. 
    #
    # We are looking for an image with the same name, but we verify with
    # the hash that is stored at the image server. 
    #
    # The image might be version specific.
    my (undef,$imagename,$version) = split("\/\/", $hrn->id());
    if (defined($version) && $version !~ /^\d+$/) {
	print STDERR "Bad version number in $urn\n";
	return undef;
    }
    my $image = Image->Lookup($pid,$imagename);
    if (defined($image)) {
	#
	# So, we might not have all the versions of the image, and in fact
	# we might be out of sync with the origin (might change with delta
	# support).  So look through all versions for an image with the same
	# hash.
	#
	my @allversions = ();
	if ($image->AllVersions(\@allversions)) {
	    return undef;
	}
	foreach my $im (@allversions) {
	    if (defined($im->hash()) && exists($blob->{'sha1hash'}) &&
		$im->hash() eq $blob->{'sha1hash'}) {
		print STDERR "MapToLocalImage: Found local image $im\n";
		return $im;
	    }
	}
    }

    # Now look for the URL. It will be updated later if it needs to be.
    $image = Image->LookupByURL($url);
    if (defined($image)) {
	#
	# Update this field.
	#
	$image->SetNoVersioning(!$blob->{'isversioned'});
	return $image;
    }
    #
    # See if we have an image from the same "family" (same image uuid)
    # in the local GeniSlices project. If we do, we want to update that
    # image to bring in the new (missing) version instead of creating
    # a whole new image locally. This is backwards compatible with how
    # we used to import images, which was into the project of the slice
    # that first imported the image (after that, all local users of the
    # that image got it from that project, and it was updated in that).
    #
    if (0) {
    $image = Image->LookupByOriginUUID("GeniSlices", $blob->{'image_uuid'});
    if (defined($image)) {
	#
	# Invoke the importer to update our shadow of the origin,
	# so that we have the correct image descriptor to return.
	#
	GeniUtil::ExecuteAsGeniUser("$IMPORTER -d -r ". $image->imageid());
	if ($?) {
	    return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Image importer failure for $urn");
	}
	$image = Image->LookupByURL($url);
	if (!defined($image)) {
	    print STDERR "Could not lookup image after import: $url\n";
	    return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				"Could not lookup image after import: $url");
	}
	return $image;
    }
    #
    # Well, the local shadow might have been created before the
    # image tracker and recording of the origin_uuid. This makes it
    # really hard to find the corresponding image "family". So, lets
    # NOT worry about it, they will stick around, but all future image
    # imports are going to go into GeniSlices even if they duplicate
    # something we already have. Too bad.
    #
    }
    
    #
    # If this is a system image and it does not exist locally, do
    # we really want to import it into the GeniSlices project? I
    # think not, so lets return an error. 
    #
    if ($blob->{'issystem'}) {
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Not allowed to import system image: $urn");
    }

    #
    # Try to import the descriptor. Since we are putting the image into
    # the GeniSlices project, we must execute as the GeniUser. But
    # when PROTOGENI_LOCALUSER=1, we might be running as the user
    # creating the slice. All imported images are globally available,
    # so makes no sense to put them into the project of the slice,
    # and in fact, if someone else uses the image, the update check
    # will fail unless we do it as the geniuser.
    #
    my $safe_url = GeniUtil::escapeshellarg($url);

    GeniUtil::ExecuteAsGeniUser("$IMPORTER -d -p GeniSlices $safe_url");
    if ($?) {
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Image importer failure for $urn");
    }
    $image = Image->LookupByURL($url);
    if (!defined($image)) {
	print STDERR "Could not lookup image after import: $url\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
			    "Could not lookup image after import: $url");
    }
    #
    # If the IMS says that the image is not versioned at the origin cluster,
    # then we do not want to do that here either, when we import updated
    # versions of the image. Note that if the image is cloned to another
    # name/project such that the new image is now local, we of course want
    # to version the image if the local testbed has versioning turned on.
    #
    if (!$blob->{'isversioned'}) {
	$image->SetNoVersioning(1);
    }
    return $image;
}

sub MapToLocalDataset($$@)
{
    my ($urn, $experiment, @credentials) = @_;
    my $pid = $experiment->pid();
    $urn = GeniHRN->new($urn);
    my $blob;

    if (exists($localblobcache{$urn})) {
	$blob = $localblobcache{$urn};
    }
    else {
	$blob = GetImageData($urn);
	return $blob
	    if (GeniResponse::IsError($blob));
	$localblobcache{$urn} = $blob;
    }
    my $url  = $blob->{'metadata_url'};

    #
    # Look for version;
    #
    if ($urn->id() =~ /\/\/(\d+)$/) {
	print STDERR "Not supporting dataset versions yet\n";
	return undef;
    }
    #
    # If the ID includes a project, strip it. We no longer
    # put the project there, but old URNs might have it.
    #
    my ($ignore,$id) = split("//", $urn->id());
    $id = $ignore if (!defined($id));

    #
    # Use the project from the URN for lookup, to make sure we get
    # locally resident datasets regardless of the current slice
    # project.  If it is not local we will import and grant permission
    # to the the argument pid (the slice experiment project).
    # 
    my $image = Image->Lookup($urn->project(), $id);
    # Standard image permissions apply since its a local dataset.
    return $image
	if (defined($image));

    # Now look by URL, which means we already have it imported.
    $image = Image->LookupByURL($url);
    if (defined($image)) {
	goto doperms;
    }
    #
    # Alternately, look for the image family We do not version datasets
    # locally, but this will avoid creating a newly named version of the
    # dataset. Later, we might support versioning. See similar comment
    # about this up above in MapToLocalImage().
    #
    $image = Image->LookupByOriginUUID("GeniSlices", $blob->{'image_uuid'});
    if (defined($image)) {
	#
	# Invoke the importer to update our shadow of the origin,
	# so that we have the correct image descriptor to return.
	#
	GeniUtil::ExecuteAsGeniUser("$IMPORTER -d -r ". $image->imageid());
	if ($?) {
	    return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Image importer failure for $urn");
	}
	$image = Image->LookupByURL($url);
	if (!defined($image)) {
	    print STDERR "Could not lookup image after import: $url\n";
	    return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				"Could not lookup image after import: $url");
	}
	goto doperms;
    }

    #
    # Try to import the descriptor. All datasets go into the GeniSlices
    # project, but we do not automatically set the global bit on them,
    # it depends on the permissions at the source cluster. So if it is
    # not global there, it will not be global here. If it is not
    # global, then only the project that owns it is allowed to use it,
    # but there is no permission to do that, so we have to insert an
    # image permissions entry to let that happen.
    #
    # XXX We have no mechanism to change the permissions on the imported
    # image, if it changes at the source cluster later. 
    #
    # Since the images go into the GeniSlices project, we must execute
    # as the GeniUser. But when PROTOGENI_LOCALUSER=1, we might be
    # running as the user creating the slice, so have to flip. 
    #
    my $safe_url = GeniUtil::escapeshellarg($url);

    #
    # Datasets cannot be transferred without a credential from the cluster
    # where it lives. The portal will have sent that along. A user can do
    # this too, but I doubt it would ever happen (too much hassle). Anyway,
    # this will be a delegated credential, to the local CM certificate.
    # Note that we do not (yet) need the credential for the importer here
    # creating the image desciptor, not downloading it.
    #
    my $credential;
    foreach my $cred (@credentials) {
	if ($cred->target_urn() eq $urn && $cred->owner_urn() eq $ENV{'MYURN'}){
	    $credential = $cred;
	    last;
	}
    }
    GeniUtil::ExecuteAsGeniUser("$IMPORTER -d -p GeniSlices $safe_url");
    if ($?) {
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
				    "Image importer failure for $urn");
    }
    $image = Image->LookupByURL($url);
    if (!defined($image)) {
	print STDERR "Could not lookup image after import: $url\n";
	return GeniResponse->Create(GENIRESPONSE_ERROR, undef,
			    "Could not lookup image after import: $url");
    }
    # No versioning on copies of datasets. 
    $image->SetNoVersioning(1);
    # and the credential for later download
    $image->SetCredential($credential->asString())
	if (defined($credential));

  doperms:
    my $imageid = $image->imageid();
    #
    # Deal with permission as discussed above. Current project gets read
    # access so it can use the dataset.
    #
    if (!$image->global()) {
	print STDERR "Granting read privs for $image to $pid/$pid\n";
	GeniUtil::ExecuteAsGeniUser("$GRANTIMAGE -g $pid/$pid $imageid");
    }
    return $image;
}

#
# Trigger an update at the origin for an image. This will cause the origin
# to pull the new image over to create a new version of it. This is NOT a
# call to the IMS, but to the CM at the origin. 
#
sub TriggerUpdate($$)
{
    my ($image, $pmsg) = @_;
    my $authority_urn;
    require emdb;

    #
    # This should be called with the image locked. Make sure.
    #
    if (! $image->Lock()) {
	$$pmsg = "Image is not locked, something is wrong";
	$image->Unlock();
	return -1;
    }    
    my $imageid = $image->imageid();
    my $version = $image->version();

    #
    # Grab the info from the copybacks table, it tells us what to
    # send to along to the origin site.
    #
    my $query_result =
	emdb::DBQueryWarn("select origin_uuid from image_notifications ".
			  "where imageid='$imageid' and version='$version'");
    if (! (defined($query_result) && $query_result->numrows())) {
	$$pmsg = "Could not get info from image_copybacks table";
	return -1;
    }
    my ($origin_uuid) = $query_result->fetchrow_array();
    
    #
    # We are going to contact the CM at the aggregate for the project.
    # We might not have the origin fields set, so have to fall back to
    # looking at the project.
    #
    if (defined($image->origin_urn())) {
	$authority_urn = $image->origin_urn();
    }
    else {
	my $project = $image->GetProject();
	return -1
	    if (!defined($project));
    
	my $hrn = GeniHRN->new($project->nonlocal_id());
	return -1
	    if (!defined($hrn));

	$authority_urn =
	    GeniHRN::Generate($hrn->domain(), "authority", "cm");
    }
    my $authority = GeniAuthority->CreateFromRegistry("cm", $authority_urn);
    if (!defined($authority)) {
	$$pmsg = "Could not lookup authority: $authority_urn\n";
	return -1;
    }

    #
    # Okay, send a blob to the origin CM telling it to pick up
    # this new version of the image.
    #
    my $blob = {
	"origin_uuid"   => $origin_uuid,
	"imagename"     => $image->versname(),
	"updater_urn"   => $image->updater_urn(),
	"metadata_url"  => $image->LocalVersionURL(),
    };

    #
    # For datasets, we have to send along a credential so the origin can
    # securely download the image filefrom us.
    #
    if ($image->isdataset()) {
	my $credential = CreateDatasetCredential($image, $authority);
	if (!defined($credential)) {
	    $$pmsg = "Could not create credential for dataset image";
	    return -1;
	}
	$blob->{"credential"} = $credential->asString();
    }

    #
    # We need a credential to talk to the CM, but it does not export
    # a GetCredential call. Really, all we need to do is prove we are
    # a CM in the federation, so create a self-signed credential; the
    # call will verify the signature.
    #
    # This is just a basic security measure. 
    #
    my $context = Genixmlrpc->GetContext();
    if (!defined($context)) {
	$$pmsg = "No XMLRPC context defined";
	return -1;
    }
    my $me = $context->certificate();
    my $credential = GeniCredential->CreateSigned($me, $me, $me);
    if (!defined($credential)) {
	$$pmsg = "Could not create self signed credential";
	return -1;
    }

    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response =
	Genixmlrpc::CallMethod($cmurl, undef, "TriggerImageUpdate",
			       {"credentials" => [$credential->asString()],
				"info"        => $blob});
    
    if (!defined($response) || $response->code()) {
	my $msg = "TriggerImageUpdate failed: ";
	
	if (!defined($response)) {
	    $msg .= "RPC error";
	}
	elsif (defined($response->output())) {
	    $msg .= $response->output();
	}
	else {
	    $msg .= GENIRESPONSE_STRING($response->code());
	}
	if (defined($response) &&
	    ($response->code() == GENIRESPONSE_SEARCHFAILED() ||
	     $response->code() == GENIRESPONSE_REFUSED)) {
	    emdb::DBQueryWarn("delete from image_notifications ".
			      "where imageid='$imageid' and ".
			      "      version='$version'");
	}
	$$pmsg = $msg;
	return -1;
    }
    #
    # The remote cluster accepted, our responsibilty is done.
    #
    emdb::DBQueryWarn("delete from image_notifications ".
		      "where imageid='$imageid' and ".
		      "      version='$version'");
    return 0;
}

#
# A credential that gives the target permission to access the local image,
# as for secure image download.
#
sub CreateDatasetCredential($$)
{
    my ($object, $target) = @_;
    my $urn  = $object->urn();
    my $pid  = $object->pid();
    my ($id,$uuid);

    if (ref($object) eq "Lease") {
	$id = $object->lease_id();
	$uuid = $object->uuid();
    }
    else {
	$id = $object->imagename();
	$uuid = $object->uuid();
    }
    my $certificate = GeniCertificate->Lookup($uuid);
    if (defined($certificate)) {
	# Kill stale certificate, we just need it to generate this credential,
	# but do not want to save it. At least not until we start using
	# version numbers in dataset URNs. For now, we need this certificate
	# to refer to this image version. Revisit later.
	$certificate->Delete();
	$certificate = undef;
    }
    if (!defined($certificate)) {
	$certificate =
	    GeniCertificate->Create({"urn"   => $urn,
				     "uuid"  => $uuid,
				     "email" => "$TBOPS",
				     "hrn"   => "$OURDOMAIN.$pid.$id"});
	return undef
	    if (!defined($certificate));
    }
    my $credential = GeniCredential->Create($certificate, $target);
    if (!defined($credential)) {
	$certificate->Delete();
	return undef;
    }
    $credential->SetExpiration(str2time($certificate->enddate()));
    if ($credential->Sign($GeniCredential::LOCALCM_FLAG) != 0) {
	$credential->Delete();
	$certificate->Delete();
	print STDERR "Could not sign credential for $certificate\n";
	return undef;
    }
    $certificate->Delete();
    return $credential;
}

# _Always_ make sure that this 1 is at the end of the file...
1;
