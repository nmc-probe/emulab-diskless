#!/usr/bin/perl -w
#
# Copyright (c) 2008-2015 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;
use Data::Dumper;

#
# Upload image data to the image server.
# 
sub usage()
{
    print "Usage: postimagedata [-f] [-n] [-d] [-a] all | [imageid ...]\n";
    exit(1);
}
my $optlist  = "fndva";
my $impotent = 0;
my $force    = 0;
my $debug    = 0;
my $verbose  = 0;
my $errors   = 0;
my $allvers  = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $PGENILOCALUSER= @PROTOGENI_LOCALUSER@;
my $WITHPROVENANCE= @IMAGEPROVENANCE@;
my $CMCERT	  = "$TB/etc/genicm.pem";
my $OURDOMAIN     = "@OURDOMAIN@";
#my $IMSURL        = "https://www.emulab.net:12369/protogeni/stoller/xmlrpc/ims";
my $IMSURL        = "https://www.emulab.net:12369/protogeni/xmlrpc/ims";
my $CLIENTVERS    = 1;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub GetServerCredential();
sub PostImageInfo($);

#
# Turn off line buffering on output
#
$| = 1; 

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libaudit;
use emutil;
use GeniDB;
use EmulabConstants;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use Genixmlrpc;
use GeniRegistry;
use libEmulab;
use Image;
use OSinfo;
use emdb qw();
use EmulabFeatures;
$EmulabFeatures::verbose = 0;
my $TBOPSPID = TBOPSPID();

if (!$PGENISUPPORT) {
    print STDERR "You are not a protogeni site\n";
    exit(0);
}
if (!GetSiteVar("protogeni/use_imagetracker")) {
    print STDERR "Image tracking is not enabled for this site\n";
    exit(0);
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"a"})) {
    $allvers = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"v"})) {
    $verbose = 1;
}
usage()
    if (!@ARGV);
# Avoid mistakes, force caller to say they want all images posted.
if ($ARGV[0] eq "all") {
    shift(@ARGV);
    usage() if
	(@ARGV);
    print "Posting for all local images, hope that is okay!\n";
    sleep(2);
}

# Record output in case of error.
LogStart(0)
    if (!$debug);

# Connect to the proper DB.
DBConnect(GENICM_DBNAME());

#
# Load the CM cert to act as caller context.
#
my $certificate = GeniCertificate->LoadFromFile($CMCERT);
if (!defined($certificate)) {
    fatal("Could not load certificate from $CMCERT\n");
}
my $context = Genixmlrpc->Context($certificate);
if (!defined($context)) {
    fatal("Could not create context to talk to image server");
}
Genixmlrpc->SetContext($context);
# Shorten default timeout.
Genixmlrpc->SetTimeout(15);


if (@ARGV) {
    foreach my $imageid (@ARGV) {
	my $image = Image->Lookup($imageid);
	if (!defined($image)) {
	    print STDERR "Could not lookup image: $imageid\n";
	    $errors++;
	    next;
	}
	# We post all versions with -a
	my @allversions = ($image);
	if ($allvers && $image->AllVersions(\@allversions)) {
	    print STDERR "Could not lookup all versions for image: $imageid\n";
	    $errors++;
	    next;
	}
	foreach my $tmp (@allversions) {
	    if (PostImageInfo($tmp)) {
		$errors++;
	    }
	}
    }
}
else {
    # Force allows updating all images previously reported
    my $ims_reported_clause =
	($force ? "1 or" : "ims_reported is null or");
    
    # List of all images that have not been reported to the IMS.
    my $query_result =
	emdb::DBQueryFatal("select v.imageid,v.version from ".
			   "  image_versions as v ".
			   "left join images as i on i.imageid=v.imageid ".
			   "where ezid=1 and isdataset=0 and ".
			   "      i.imageid is not null and ".
			   "      ims_noreport=0 and ".
			   "      origin_urn is null and ".
			   "      deleted is null and ".
                           "      metadata_url is null and ".
			   "      (creator_urn is not null or ".
			   "       (v.pid='$TBOPSPID' and v.global=1)) and ".
			   "      ($ims_reported_clause ".
			   "       created > ims_reported or ".
			   "       updated > ims_reported) ".
			   "order by v.imageid,v.version");

    while (my ($imageid,$version) = $query_result->fetchrow_array()) {
	my $image = Image->Lookup($imageid,$version);
	if (!defined($image)) {
	    print STDERR "Could not lookup image: $imageid,$version\n";
	    $errors++;
	    next;
	}
	if (PostImageInfo($image)) {
	    $errors++;
	}
    }
}
# No errors at this point, nothing to report.
AuditAbort()
    if (!$debug && !$errors);
exit($errors);

sub PostImageInfo($)
{
    my ($image) = @_;
    my $imageid = $image->imageid();
    my $version = $image->version();
    my $osinfo  = OSinfo->Lookup($imageid,$version);
    if (!defined($osinfo)) {
	print STDERR "Could not lookup osinfo: $imageid,$version\n";
	# Just skip, something is very wrong.
	return 0;
    }
    my $project = $image->GetProject();
    if (!defined($project)) {
	print STDERR "Could not lookup project: $imageid,$version\n";
	# Just skip, something is very wrong.
	return 0;
    }
    my $group = $image->GetGroup();
    if (!defined($group)) {
	print STDERR "Could not lookup group: $imageid,$version\n";
	# Just skip, something is very wrong.
	return 0;
    }

    my $credential = GetServerCredential();

    #
    # Grab the current type list.
    #
    my $types_result =
	emdb::DBQueryWarn("select distinct type from osidtoimageid ".
			  "where imageid='$imageid'");
    
    if (!defined($types_result)) {
	return -1;
    }
    my $arch  = "x86_64";
    my $virtualizaton = "raw-pc";
    my @types = ();
    while (my ($type) = $types_result->fetchrow_array()) {
	push(@types, $type);
	if ($type eq "m400") {
	    $arch = "aarch64";
	}
	if ($type eq "pcvm") {
	    my $virtualizaton = "emulab-xen";
	}
    }
    my $visibility  = ($image->global() ? "public" : "project");
    my $creator_urn = $image->creator_urn();
    if (!defined($creator_urn)) {
	$creator_urn = GeniHRN::Generate($OURDOMAIN, "user", $image->creator());
    }
    my $image_urn = GeniHRN::Generate($OURDOMAIN, "image",
			      $image->pid() . "//" . $image->imagename());

    #
    # We want a project URN.
    #
    my $project_urn;
    
    if ($project->IsNonLocal()) {
	#
	# If we are doing real projects, then the nonlocal_id is in the
	# proper subauth format. 
	#
	if ($PGENILOCALUSER) {
	    $project_urn = $project->nonlocal_id();
	}
	else {
	    my ($domain, undef, $id) = GeniHRN::Parse($project->nonlocal_id());

	    $project_urn = GeniHRN::Generate($domain . ":" . $image->gid(),
					     "authority", $id);
	}
    }
    else {
	$project_urn = GeniHRN::Generate($OURDOMAIN . ":" . $image->pid(),
					 "authority", "sa");
    }
    my $isversioned = 
	($WITHPROVENANCE &&
	 EmulabFeatures->FeatureEnabled("ImageProvenance",
					undef, $group) ? 1 : 0);

    my $blob = {"client_version" => $CLIENTVERS,
		"urn"		 => $image_urn,
		"project_urn"    => $project_urn,
		"imagename"      => $image->imagename(),
		"version"        => $image->version(),
		"image_uuid"     => $image->image_uuid(),
		"version_uuid"   => $image->uuid(),
		"isdataset"      => $image->isdataset(),
		"isversioned"    => $isversioned,
		"issystem"       => $image->pid() eq TBOPSPID() ? '1' : '0',
		"sha1hash"       => $image->hash(),
		"creator_urn"    => $creator_urn,
		"created"        => TBDateStringGMT(str2time($image->created())),
		"description"    => $image->description(),
		"filesize"       => $image->size() . ".0",
		"lba_low"        => $image->lba_low() . ".0",
		"lba_high"       => $image->lba_high() . ".0",
		"lba_size"       => $image->lba_size(),
		"mbr_version"    => $image->mbr_version(),
		"osfeatures"     => $osinfo->osfeatures(),
		"arch"           => $arch,
		"visibility"     => $visibility,
		"virtualizaton"  => $virtualizaton,
		"metadata_url"   => $image->LocalVersionURL(),
		"types_known_working" => join(",", @types),
    };
    #
    # If this is a nonlocal image, send the origin along so that the
    # image server knows we are a copy.
    #
    if (!$image->IsLocal()) {
	$blob->{'origin_url'} = $image->metadata_url();
    }
    print Dumper($blob)
	if ($debug);
    if ($impotent) {
	print "Would push $image\n";
	return 0;
    }

    if ($verbose) {
	print "Pushing $image\n";
    }
    #
    # Push the blob to the image server.
    #
    my $response =
	Genixmlrpc::CallMethod($IMSURL, undef, "PostImageInfo",
			       {"credential" => $credential->asString(),
				"imageinfo"  => $blob});
    if (!defined($response) || $response->code()) {
	my $msg = "PostImageInfo failed for image " . $image->versname() . " :";
	
	if (!defined($response)) {
	    # Bail, we will try again later.
	    print STDERR "$msg RPC error\n";
	    return -1;
	}
	elsif (defined($response->output())) {
	    print STDERR "$msg " . $response->output() . "\n";
	    return -1;
	}
	else {
	    print STDERR "$msg " . $response->code() . "\n";
	    return -1;
	}
    }
    # Mark as reported.
    $image->MarkIMSReported();
    return 0;
}

#
# Get a credential to talk to the IMS.
#
my $IMS_credential;

sub GetServerCredential()
{
    return $IMS_credential
	if (defined($IMS_credential));
    
    my $response =
	Genixmlrpc::CallMethod($IMSURL, undef, "GetCredential");
    if (!defined($response)) {
	fatal("RPC error getting credential");
    }
    if ($response->IsError()) {
	print STDERR "GetCredential: " . $response->Dump() . "\n";
	fatal("Error getting credential");
    }
    $IMS_credential = GeniCredential->CreateFromSigned($response->value(), 1);
    if (!defined($IMS_credential)) {
	print STDERR $GeniCredential::CreateFromSignedError . "\n";
	fatal("Error getting credential");
    }
    return $IMS_credential;
}

sub fatal($)
{
    my ($msg) = @_;

    print STDERR "*** $0:\n".
	         "    $msg\n";
    # exit value important.
    exit(-1);
}
