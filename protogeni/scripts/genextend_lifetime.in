#!/usr/bin/perl -w
#
# Copyright (c) 2008-2012 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use lib '@prefix@/lib';

my $OURDOMAIN = '@OURDOMAIN@';

use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniUser;
use GeniUtil;
use Getopt::Std;

#
# Create the credential - return it as a string
#
sub CreateCredential {
    my ($usercert, $target_cm_urn, $howlong, $expires) = @_;

    #
    # Lookup the authority that this credential is supposed to be valid at
    #
    if (!GeniHRN::IsValid($target_cm_urn)) {
        die "Invalid target URN '$target_cm_urn'\n";
    }
    my $authority = GeniAuthority->Lookup($target_cm_urn);
    if (!defined($authority)) {
        die "Could not find local authority object for $target_cm_urn\n";
    }

    #
    # Create the basic credential object
    #
    my $signer = $GeniCredential::LOCALCM_FLAG;
    my $credential = Create($authority,$usercert,$expires);
    if (!defined($credential)) {
        die "Internal error creating credential\n";
    }

    #
    # Add this specific policy exception
    #
    my $policy_excep = XML::LibXML::Element->new( "max_sliver_lifetime" );
    $policy_excep->setNamespace($GeniUtil::EXTENSIONS_NS, $GeniUtil::EXTENSIONS_PREFIX);
    $policy_excep->appendText("$howlong");

    $credential->AddExtension($policy_excep);

    #
    # Sign the resulting credential
    #
    if ($credential->Sign($signer) != 0) {
        $credential->Delete();
        die "Could not sign credential\n";
    }   

    return $credential->asString();

}


#
# XXX: This code was ripped out of GeniCredential.pm and modified a bit
# What we probably should do instead is to provide an appropriate constructor
# in that file
#
sub Create($$$) {
    my ($target, $usercert, $expires) = @_;

    return undef
	if (! (ref($target) && ref($usercert)));

    my $self = {};
    $self->{'target_uuid'}   = $target->uuid();
    $self->{'target_cert'}   = $target->GetCertificate();
    $self->{'owner_cert'}    = $usercert;
    $self->{'owner_uuid'}    = $usercert->uuid();
    $self->{'string'}        = undef;
    $self->{'capabilities'}  = undef;
    $self->{'extensions'}    = undef;
    $self->{'uuid'}          = GeniUtil::NewUUID();
    $self->{'idx'}	     = undef;	# Only set when stored to DB.
    $self->{'type'}          = "privilege";
    bless($self, "GeniCredential");

    $self->SetExpiration(time() + ($expires * 60 * 60 * 24));

    return $self;
}

my $num_days = 30;
my $expire_days;

sub usage {
    warn "Usage: ./genextend_lifetime [-d days] [-e days] <-u user | -c cert>\n";
    warn " -d days: How many days to allow slivers to live for (default $num_days)\n";
    warn " -e days: How many days in the future this credential expires (defaults to same value as -d)\n";
    warn " -u user: Local user to make the credential for\n";
    warn " -c cert: File containing user's certificate\n";
    exit(1);
}

my %opt;
if (!getopts('hd:u:c:e:',\%opt) ||
    $opt{h} || !(exists($opt{u}) xor exists($opt{c}))) {
    usage();
} 

my $cert;
if ($opt{u}) {
    #
    # If the username doesn't look like a URN, assume it is a local user
    #
    my $target_urn;
    if ($opt{u} =~ /^urn:/) {
        $target_urn = $opt{u};
    } else {
        $target_urn = GeniHRN::Generate( $OURDOMAIN, "user", "$opt{u}" );
    }

    my $user = GeniUser->Lookup($target_urn,1);
    if (!defined($user)) { die "Unable to lookup user $opt{u}\n"; }

    $cert = $user->GetCertificate();

} else {
    #
    # Slurp in the file with the owner's credential
    #
    open(FILE, $opt{c}) or die "Unable to open $opt{c}\n";
    my $owner_cert = "";
    while (<FILE>) { $owner_cert .= $_; }
    close FILE;

    $cert = GeniCertificate->LoadFromString($owner_cert);
    if (!$cert) {
        die "Unable to read certificate from $opt{c}\n";
    }

}

if ($opt{d}) {
    $num_days = $opt{d};
}

if ($opt{e}) {
    $expire_days = $opt{e};
} else {
    $expire_days = $num_days;
}

#
# We can only create credentials that apply to ourself
#
my $target_cm_string = GeniHRN::Generate( $OURDOMAIN, "authority", "cm" );

my $val =  CreateCredential($cert,$target_cm_string,$num_days,$expire_days); 

print $val;

