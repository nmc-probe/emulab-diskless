#!/usr/bin/perl -w
#
# Copyright (c) 2008-2016 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use Date::Parse;
use POSIX qw(strftime);

#
#
# 
sub usage()
{
    print "Usage: igevent_daemon [-d] [-i]\n";
    exit(1);
}
my $optlist   = "di";
my $debug     = 0;
my $impotent  = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $OURDOMAIN     = "@OURDOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $LOGFILE       = "$TB/log/igevent_daemon.log";
my $MYURN	  = "urn:publicid:IDN+{OURDOMAIN}+authority+cm";
my $SLEEP_INTERVAL= 60;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Exit if not a protogeni site.
#
if (! $PGENISUPPORT) {
    exit(0);
}

#
# Check args early so we get the right DB.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"i"})) {
    $impotent++;
}

# Do this early so that we talk to the right DB.
use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-cm";

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
require GeniDB;
require GeniUtil;
require GeniSliver;
require GeniSlice;
require GeniCertificate;
require GeniCredential;
require GeniAggregate;
use GeniResponse;
use Experiment;
use EmulabConstants;
use Node;
use libtestbed;
use emutil;
use libEmulab;
use event;

if (!$impotent && CheckDaemonRunning("igevent_daemon")) {
    fatal("Not starting another igevent daemon!");
}
# Go to ground.
if (! $debug) {
    if (TBBackGround($LOGFILE)) {
	exit(0);
    }
}
if (!$impotent && MarkDaemonRunning("igevent_daemon")) {
    fatal("Could not mark daemon as running!");
}
#
# Setup a signal handler for newsyslog.
#
sub handler()
{
    my $SAVEEUID = $EUID;
    
    $EUID = 0;
    ReOpenLog($LOGFILE);
    $EUID = $SAVEEUID;
}
$SIG{HUP} = \&handler
    if (! $debug);

GeniUtil::FlipToGeniUser();

#
# Capture all events from the local pubsubd and transform them into
# events to send to the portal event server via the local clusterd.
#
my $localhandle = event_register("elvin://localhost", 0);
if (!$localhandle) {
    fatal("Unable to register with event system");
}

#
# Subscribe to all events.
#
my $tuple = address_tuple_alloc();
if (!$tuple) {
    fatal("Could not allocate an address tuple");
}
if (!event_subscribe($localhandle, \&callback, $tuple)) {
    fatal("Could not subscribe to all events");
}

#
# Flag to know when there are no more events to process. 
#
my $gotone;

sub callback($$$)
{
    my ($handle, $notification, $data) = @_;
    $gotone++;

    my $site = event_notification_get_site($handle, $notification);
    my $objtype = event_notification_get_objtype($handle, $notification);
    
    #
    # If there is a URN, then the event was generated by Geni code.
    # We ignore it, forwarded by pubsub_forwarder.
    #
    if ($site && $site =~ /^urn:/) {
	return;
    }
    #
    # We are looking for node state change events to pass along.
    #
    return
	if (!defined($objtype) ||
	    ($objtype ne TBDB_TBEVENT_NODESTATE() &&
	     $objtype ne TBDB_TBEVENT_NODESTARTSTATUS() &&
	     $objtype ne TBDB_TBEVENT_NODESTATUS() &&
	     $objtype ne TBDB_TBEVENT_NODEACCOUNTS()));

    my $node_id = event_notification_get_objname($handle, $notification);
    my $state   = event_notification_get_eventtype($handle, $notification);

    #
    # We do not care about nodes that are not allocated to Geni experiments.
    # So we have to look up the node, get the reservation and check it. This
    # seems like a lot of overhead, but these events are not coming in all
    # that fast.
    #
    my $node = Node->Lookup($node_id);
    if (!defined($node)) {
	print STDERR "Unknown node $node_id\n";
	goto done;
    }
    #
    # If this is a state change and nothing changed, then do nothing.
    #
    goto done
	if (0 && $objtype && TBDB_TBEVENT_NODESTATE() &&
	    $state eq $node->eventstate());

    # We want this so we can flush it from the cache.
    my $experiment = $node->Reservation();
    goto done
	if (!defined($experiment));
    goto done
	if (!$node->genisliver_idx());

    my $sliver = GeniSliver->Lookup($node->genisliver_idx());
    goto done
	if (!$sliver);

    #
    # This will generate a new event, which we will get here later,
    # and forward directly (above).
    #
    if ($objtype eq TBDB_TBEVENT_NODESTATE() ||
	$objtype eq TBDB_TBEVENT_NODESTATUS() ||
	$objtype eq TBDB_TBEVENT_NODEACCOUNTS()) {
	my $oldstatus = $sliver->status();
	my $newstatus;

	#
	# The point here, is that we do not want to send an event if
	# ComputeStatus sent one, but since the rawstate has probably
	# changed, we want to make sure an event goes out. 
	#
	if ($sliver->ComputeStatus(\$newstatus) == 0 &&
	    $oldstatus eq $newstatus) {
	    $sliver->SendStatusEvent();
	}
	if ($debug) {
	    print "State/Status sent for $node_id\n";
	}
    }
    else {
	#
	# A change in the start command status generates a new event.
	# This is generated by tmcd when it comes in.
	#
	if ($debug) {
	    print "Start Command event for $node_id\n";
	}
	$sliver->SendStatusEvent();
    }
    $sliver->Flush();
  done:
    $node->Flush()
	if (defined($node));
    $experiment->Flush()
	if (defined($experiment));
}

my $counter  = 0;

while (1)
{
    $gotone = 1;
    while ($gotone) {
	$gotone = 0;
	event_poll($localhandle);
    }
    event_poll_blocking($localhandle, 1000);
    
    #
    # Every 60 seconds compute new status for all slices. This might
    # generate new events for the loop above.
    #
    if ($counter++ >= 10) {
	$counter = 0;
	
	my @slices;
	if (GeniSlice->ListAll(\@slices) == 0) {
	    foreach my $slice (@slices) {
		if ($slice->Lock() == 0) {
		    my $aggregate = GeniAggregate->SliceAggregate($slice);
		    if ($aggregate) {
			$aggregate->ComputeState();
		    }
		    $slice->UnLock();
		}
	    }
	}
	GeniUtil::FlushCaches();
    }
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    #
    # Send a message to the testbed list. 
    #
    SENDMAIL($TBOPS,
	     "ProtoGENI igevent daemon died",
	     $msg,
	     $TBOPS);
    MarkDaemonStopped("igevent_daemon");
    die("*** $0:\n".
	"    $msg\n");
}
