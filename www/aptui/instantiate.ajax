<?php
#
# Copyright (c) 2000-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");

#
# Return info about specific profile.
#
function Do_GetProfile()
{
    global $this_user;
    global $ajax_args;
    global $DEFAULT_AGGREGATE;
    
    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $uuid = $ajax_args["uuid"];
    if (!IsValidUUID($uuid)) {
	SPITAJAX_ERROR(1, "Not a valid UUID: $uuid");
	return;
    }
    $profile = Profile::Lookup($uuid);
    if (!$profile) {
	SPITAJAX_ERROR(1, "No such profile $uuid");
	return;
    }
    $amdefault = $DEFAULT_AGGREGATE;
    # Temporary override until constraint system in place.
    if ($profile->BestAggregate()) {
	$amdefault = $profile->BestAggregate();
    }
    $ispp = ($profile->isParameterized() ? 1 : 0);
    
    #
    # Knowing the UUID means the user can instantiate it,
    # so no permission checks on the profile. 
    #
    SPITAJAX_RESPONSE(array('rspec'       => $profile->rspec(),
			    'name'        => $profile->name(),
			    'ispprofile'  => $ispp,
			    'amdefault'   => $amdefault));
}

#
# Return parameter form fragment and default values.
#
function Do_GetParameters()
{
    global $this_user;
    global $ajax_args;
    global $suexec_output, $suexec_output_array;

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if (!isset($this_user)) {
	if (!$profile->ispublic()) {
	    SPITAJAX_ERROR(1, "Not enough permission to instantiate profile");
	    return;
	}	    
    }
    elseif (!$profile->CanInstantiate($this_user)) {
	SPITAJAX_ERROR(1, "Not enough permission to instantiate profile");
	return;
    }
    if (!$profile->isParameterized()) {
	SPITAJAX_ERROR(1, "Not a parameterized profile");
	return;
    }
    list ($formfrag, $defaults) = $profile->GenerateFormFragment();
    SPITAJAX_RESPONSE(array("formfrag" => htmlentities($formfrag),
			    "defaults" => $defaults));
}

#
# Instantiate profile (as the user)
#
function Do_Instantiate()
{
    global $this_user, $DEFAULT_AGGREGATE, $ISCLOUD;
    global $ajax_args;
    $am_array = Instance::DefaultAggregateList();
    
    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if (!isset($this_user)) {
	if (!$profile->ispublic()) {
	    SPITAJAX_ERROR(1, "Not enough permission to instantiate profile");
	    return;
	}	    
    }
    elseif (!$profile->CanInstantiate($this_user)) {
	SPITAJAX_ERROR(1, "Not enough permission to instantiate profile");
	return;
    }
    $args = array();
    $args["username"]   = $this_user->uid();
    $args["email"]      = $this_user->email();
    $args["profile"]    = $profile->uuid();
    # Guest/Geni users not allowed to provide rspec
    if (isset($this_user) && !$this_user->IsNonLocal() &&
        array_key_exists("rspec", $ajax_args)) {
	$args["rspec"]  = $ajax_args["rspec"];
    }
    $opts = "";
    # Guest users not allowed to choose aggregate.
    if (isset($this_user) && ($ISCLOUD || ISADMIN() || STUDLY()) &&
	isset($ajax_args["where"])) {
	if (array_key_exists($ajax_args["where"], $am_array)) {
	    $opts = "-a " . $am_array[$ajax_args["where"]];
	}
	else {
	    SPITAJAX_ERROR(1, "Invalid Aggregate");
	    return;
	}
    }
    else {
	# Temporary until constraint system in place.
	$best = $profile->BestAggregate();
	if (!$best) {
	    $best = $DEFAULT_AGGREGATE;
	}
	$opts = "-a " . $am_array[$best];
    }

    #
    # Invoke the backend.
    #
    $errors = array();
    list ($instance, $creator) =
	Instance::Instantiate($this_user, $opts, $args, $errors);

    if (!isset($instance) || is_null($instance)) {
	SPITAJAX_ERROR(1, $errors["error"]);
        return;
    }
    #
    # Redirect user to status page.
    #
    $uuid = $instance->uuid();
    SPITAJAX_RESPONSE("status.php?uuid=$uuid");
}

# Local Variables:
# mode:php
# End:
?>
