<?php
#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");
include_once("profile_defs.php");
include_once("instance_defs.php");

#
# Return clone status.
#
function Do_CloneStatus()
{
    global $this_user;
    global $ajax_args;

    $this_idx = $this_user->uid_idx();

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if ($this_idx != $profile->creator_idx() && !ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }
    $webtask = WebTask::LookupByObject($profile->uuid());
    if (!$webtask) {
	SPITAJAX_ERROR(1, "No status descriptor found");
	return;
    }
    $taskdata = $webtask->TaskData();
    $blob = array();

    if ($webtask->exited()) {
	# Success, but not sure what to report. Come back to this later.
	$blob["exited"]   = $webtask->exited();
	$blob["exitcode"] = $webtask->exitcode();
    }
    #
    # Size is in KB to avoid bigint problems. But kill the KB.
    # 
    if (isset($taskdata["image_size"])) {
	if (preg_match("/^(\d+)KB$/", $taskdata["image_size"], $matches)) {
	    $taskdata["image_size"] = $matches[1]; 
	}
	$blob["image_size"] = $taskdata["image_size"];
    }
    else {
	$blob["image_size"] = 0;
    }
    $blob["node_status"]  = $taskdata["rawstate"];
    $blob["image_status"] = $taskdata["image_status"];
    
    SPITAJAX_RESPONSE($blob);
}

#
# Instantiate as Guest user. Simply a convenience, users could do
# this themselves.
#
# Note that this is going to log the user out. Big simplification,
# big headache otherwise. 
#
function Do_GuestInstantiate()
{
    global $this_user;
    global $ajax_args;
    
    $this_idx = $this_user->uid_idx();

    if (!isset($ajax_args["uuid"])) {
	SPITAJAX_ERROR(1, "Missing profile uuid");
	return;
    }
    $profile = Profile::Lookup($ajax_args["uuid"]);
    if (!$profile) {
	SPITAJAX_ERROR(1, "Unknown profile uuid");
	return;
    }
    if ($this_idx != $profile->creator_idx() && !ISADMIN()) {
	SPITAJAX_ERROR(1, "Not enough permission");
	return;
    }

    #
    # Need to form a guest id. Ideally, lets look for a guest user
    # with the same email and use that. 
    #
    $geniuser = GeniUser::LookupByEmail($this_user->email());
    if ($geniuser) {
	$guestid = $geniuser->uid();
	$token   = $geniuser->auth_token();
    }
    else {
	$guestid = "g" . substr(GENHASH(), 0, 6);
	$token   = substr(GENHASH(), 0, 16);
    }
    $args = array();
    $args["username"]   = $guestid;
    $args["email"]      = $this_user->email();
    $args["profile"]    = $profile->uuid();
    $args["auth_token"] = $token;

    # Grab first internal (encrypted) ssh key and use it.
    $query_result =
	DBQueryWarn("select pubkey from user_pubkeys ".
		    "where uid_idx='$this_idx' and internal=0 limit 1");
    if (mysql_num_rows($query_result)) {
	$row = mysql_fetch_array($query_result);
	$args["sshkey"] = $row[0];
    }
    
    #
    # Need to log the user out. 
    #
    DBQueryFatal("delete from login where uid_idx='$this_idx'");

    #
    # Invoke the backend.
    #
    $errors = array();
    list ($instance, $creator) =
	Instance::Instantiate(NULL, "", $args, $errors);

    if (!$instance) {
	SPITAJAX_ERROR(1, $errors["error"]);
    }
    #
    # Return the cookies the clients needs to set, so that it can load
    # the status page. 
    #
    SPITAJAX_RESPONSE(array("quickvm_user"    => $creator->uuid(),
			    "quickvm_id"      => $guestid,
			    "quickvm_uuid"    => $instance->uuid(),
			    'quickvm_authkey' => $creator->auth_token()));
}

# Local Variables:
# mode:php
# End:
?>
