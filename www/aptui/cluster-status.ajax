<?php
#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("geni_defs.php");
chdir("apt");
include_once("instance_defs.php");

#
# Server side of getting dashboard stats.
#
function Do_GetStatus()
{
    global $ajax_args, $geni_response_codes, $urn_mapping, $TBBASE;
    global $TBSUEXEC_PATH;
    $autoextend_maxage  = TBGetSiteVar("aptui/autoextend_maxage");

    if (! (ISADMIN() || ISFOREIGN_ADMIN())) {
        SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    if (Instance::ValidURN($ajax_args["cluster"])) {
        $cluster = $ajax_args["cluster"];
    }
    else {
        $cluster = $ajax_args["cluster"] . ".cm";
    }
    $inuse = array();
    $fp = popen("$TBSUEXEC_PATH elabman tbadmin ".
                "webportal_xmlrpc -a $cluster InUse", "r");
    $string = "";
    while (!feof($fp)) {
        $string .= fgets($fp, 1024);
    }
    pclose($fp);
    $inuse = json_decode($string);
    if (gettype($inuse) == "object") {
        $inuse = $inuse->details;
    }

    #
    # We want to convert slice_urns to local instances so that we
    # convert the uid/pids to local names and provide links to the
    # instances. 
    #
    $instances    = array();
    $maxttls      = array();
    $typecounts   = array();

    foreach ($inuse as $details) {
        $type = $details->type;
        if (!array_key_exists($type, $typecounts)) {
            $typecounts[$type] = array("inuse"        => 0,
                                       "preres"       => 0,
                                       "free"         => 0,
                                       "free_preres"  => 0);
        }
        if ($details->reserved_pid != "") {
            $typecounts[$type]["preres"] += 1;
        }
        if ($details->pid != "") {
            $typecounts[$type]["inuse"] += 1;
        }
        else {
            if ($details->reserved_pid != "") {
                $typecounts[$type]["free_preres"] += 1;
            }
            else {
                $typecounts[$type]["free"] += 1;
            }
        }
        
        if (property_exists($details, "slice_uuid") &&
            $details->slice_uuid != "") {

            if (array_key_exists($details->slice_uuid, $instances)) {
                $instance = $instances[$details->slice_uuid];
                $maxttl   = $maxttls[$details->slice_uuid];
            }
            else {
                $instance = Instance::LookupBySlice($details->slice_uuid);
                if (!$instance) {
                    continue;
                }
                $instances[$details->slice_uuid] = $instance;
                $slice = GeniSlice::Lookup("sa", $details->slice_uuid);

                #
                # We can generate the maxttl here, ignoring whatever the
                # cluster might think. We need the slice though.
                #
                $maxttl = "";
                if ($slice && 
                    !($instance->admin_lockdown() ||
                      $instance->user_lockdown())) {

                    $slice_expires = strtotime($slice->expires());
                    $slice_created = strtotime($slice->created());
                    $diff  = $slice_expires - time();
                    $cdiff = time() - $slice_created;

                    if ($instance->extension_lockout() ||
                        ($cdiff > (3600 * 24 * $autoextend_maxage))) {
                        $maxttl = $slice_expires - time();
                    }
                    else {
                        #
                        # This is the amount of free time the user can
                        # get, plus we add two days, since a denied extension
                        # automatically grants two days to avoid termination
                        # before we get a chance to look at it. 
                        #
                        $maxttl = ($slice_created + (3600 * 24 * 2) +
                                   (3600 * 24 * $autoextend_maxage)) - time();
                    }
                }
                $maxttls[$details->slice_uuid] = $maxttl;
            }
            if ($instance) {
                $details->pid = $instance->pid();
                $details->instance_uuid = $instance->uuid();
                $details->instance_name = $instance->name();
                $details->uid = $instance->creator();
                $details->maxttl = $maxttl;
            }
        }
    }
    $dashboard["totals"] = $typecounts;
    $dashboard["inuse"]  = $inuse;
    SPITAJAX_RESPONSE($dashboard);
}

function Do_GetPreReservations()
{
    global $ajax_args, $geni_response_codes, $urn_mapping, $TBBASE;
    global $TBSUEXEC_PATH;

    if (! (ISADMIN() || ISFOREIGN_ADMIN())) {
        SPITAJAX_ERROR(1, "Not enough permission");
        return;
    }
    if (Instance::ValidURN($ajax_args["cluster"])) {
        $cluster = $ajax_args["cluster"];
    }
    else {
        $cluster = $ajax_args["cluster"] . ".cm";
    }
    $inuse = array();
    $fp = popen("$TBSUEXEC_PATH elabman tbadmin ".
                "webportal_xmlrpc -a $cluster PreReservations", "r");
    $string = "";
    while (!feof($fp)) {
        $string .= fgets($fp, 1024);
    }
    pclose($fp);
    $inuse = json_decode($string);
    if (gettype($inuse) == "object") {
        $inuse = $inuse->details;
    }

    SPITAJAX_RESPONSE($inuse);
}

# Local Variables:
# mode:php
# End:
?>
