<?php
#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
chdir("..");
include_once("webtask.php");
chdir("apt");

# We set this in CheckPageArgs
$target_user = null;

#
# Need to check the permission, since we allow admins to edit
# other accounts.
#
function CheckPageArgs()
{
    global $this_user, $target_user;
    global $ajax_args;
    global $APTMAIL;

    if (!isset($ajax_args["formfields"])) {
	SPITAJAX_ERROR(-1, "Missing formfields");
	return -1;
    }
    $formfields = $ajax_args["formfields"];

    if (!isset($formfields["uid"])) {
	SPITAJAX_ERROR(-1, "Missing target uid");
	return -1;
    }
    $uid = $formfields["uid"];
    
    if (!TBvalid_uid($uid)) {
	SPITAJAX_ERROR(-1, "Invalid target uid");
        return -1;
    }
    $target_user = User::LookupByUid($uid);
    if (!$target_user) {
        sleep(2);
	SPITAJAX_ERROR(-1, "Unknown target uid");
        return -1;
    }
    if ($uid == $this_user->uid())
        return 0;
    
    if (!ISADMIN()) {
	SPITAJAX_ERROR(-1, "Not enough permissin");
	return -1;
    }
    return 0;
}

#
# Check form arguments on the fist step, so we can halt progress
# right away.
#
function CheckForm()
{
    global $this_user, $target_user;
    global $ajax_args;
    global $APTMAIL;
    
    $formfields = $ajax_args["formfields"];
    $errors = array();

    if (!isset($formfields["name"]) ||
        strcmp($formfields["name"], "") == 0) {
        $errors["name"] = "Missing Field";
    }
    elseif (! TBvalid_usrname($formfields["name"])) {
        $errors["name"] = TBFieldErrorString();
    }
    # Make sure user name has at least two tokens
    $tokens = preg_split("/[\s]+/", $formfields["name"],
			 -1, PREG_SPLIT_NO_EMPTY);
    if (count($tokens) < 2) {
        $errors["name"] = "Please provide a first and last name";
    }
    if (!isset($formfields["email"]) ||
        strcmp($formfields["email"], "") == 0) {
        $errors["email"] = "Missing Field";
    }
    elseif (! TBvalid_email($formfields["email"])) {
        $errors["email"] = TBFieldErrorString();
    }
    else {
        $tmp = User::LookupByEmail($formfields["email"]);
        #
        # Treat this error separate. Not allowed.
        #
        if ($tmp && $tmp->uid() != $target_user->uid()) {
            $errors["email"] = "Already in use by another user";
        }
    }
    if (!isset($formfields["affiliation"]) ||
        strcmp($formfields["affiliation"], "") == 0) {
        $errors["affiliation"] = "Missing Field";
    }
    elseif (! TBvalid_affiliation($formfields["affiliation"])) {
        $errors["affiliation"] = TBFieldErrorString();
    }
    if (!isset($formfields["country"]) ||
        strcmp($formfields["country"], "") == 0) {
        $errors["country"] = "Missing Field";
    }
    elseif (! TBvalid_country($formfields["country"])) {
        $errors["country"] = TBFieldErrorString();
    }
    if (!isset($formfields["state"]) ||
        strcmp($formfields["state"], "") == 0) {
        $errors["state"] = "Missing Field";
    }
    elseif (! TBvalid_state($formfields["state"])) {
        $errors["state"] = TBFieldErrorString();
    }
    if (!isset($formfields["city"]) ||
        strcmp($formfields["city"], "") == 0) {
        $errors["city"] = "Missing Field";
    }
    elseif (! TBvalid_city($formfields["city"])) {
        $errors["city"] = TBFieldErrorString();
    }
    if (isset($formfields["password1"]) && $formfields["password1"] != "") {
        if (!isset($formfields["password2"]) ||
            strcmp($formfields["password2"], "") == 0) {
            $errors["password2"] = "Missing Field";
        }
        elseif (strcmp($formfields["password1"], $formfields["password2"])) {
            $errors["password2"] = "Does not match password";
        }
        elseif (! CHECKPASSWORD($formfields["uid"],
                                $formfields["password1"],
                                $formfields["name"],
                                $formfields["email"], $checkerror)) {
            $errors["password1"] = "$checkerror";
        }
    }

    # Present these errors before we call out to do anything else.
    if (count($errors)) {
	SPITAJAX_ERROR(2, $errors);
        return -1;
    }

    #
    # Lets get the user to do the email verification now before
    # we go any further. We use a session variable to store the
    # key we send to the user in email.
    #
    if ($formfields["email"] != $target_user->email()) {
        if (!isset($_SESSION["verify_key"])) {
            $_SESSION["verify_key"] = substr(GENHASH(), 0, 16);
            $_SESSION["verified"]   = 0;
            $_SESSION["codesent"]   = 0;
        }
        #
        # Once the user verifies okay, we remember that in the session
        # in case there is a later error below.
        #
        if (!$_SESSION["verified"]) {
            if (!$_SESSION["codesent"]) {
                mail($formfields["email"],
                     "Confirm your new email",
                     "Here is your email verification code. Please copy and\n".
                     "paste this code into the box on the account page.\n\n".
                     "\t" . $_SESSION["verify_key"] . "\n",
                     "From: $APTMAIL");
                $_SESSION["codesent"] = 1;
            }
            if (isset($formfields["verify"]) &&
                $formfields["verify"] == $_SESSION["verify_key"]) {
                #
                # Success. Lets remember that in case we get an error
                # below and  the form is redisplayed.
                #
                $_SESSION["verified"] = 1;
            }
            else {
                #
                # Tell caller to throw up the verification form.
                #
                SPITAJAX_ERROR(3, 0);
                return -1;
            }
        }
    }
    return 0;
}

#
# Submit
#
function Do_Update()
{
    global $this_user, $target_user;
    global $ajax_args;
    
    # For email verification if needed.
    session_start();

    if (CheckPageArgs() < 0) {
        return;
    }
    if (CheckForm() < 0) {
        return;
    }
    # Allow for form precheck only. So JS code knows it will be fast.
    if (isset($ajax_args["checkonly"]) && $ajax_args["checkonly"]) {
        SPITAJAX_RESPONSE(0);
        return;
    }
    $formfields = $ajax_args["formfields"];
    $args   = array();
    $errors = array();

    $args["name"]	   = $formfields["name"];
    $args["city"]          = $formfields["city"];
    $args["state"]         = $formfields["state"];
    $args["country"]       = $formfields["country"];
    $args["affiliation"]   = $formfields["affiliation"];
    if (isset($formfields["password1"]) && $formfields["password1"] != "") {
        $args["password1"] = $formfields["password1"];
        $args["password2"] = $formfields["password2"];
    }
    if (! User::ModUserInfo($target_user,
                            $target_user->uid(), $args, $errors)) {
	SPITAJAX_ERROR(2, $errors);
        return;
    }
    #
    # The user can change their email on this pass, but the backend
    # does not allow that, so have to call tbacct directly with an
    # extra option to tell it to skip the admin check.
    #
    if ($formfields["email"] != $target_user->email()) {
        $target_uid = $target_user->uid();
        $safe_email = $formfields["email"];
    
        if (!HASREALACCOUNT($target_uid)) {
            $retval = SUEXEC("nobody", "nobody",
                             "webtbacct -v email $target_uid $safe_email",
                             SUEXEC_ACTION_CONTINUE);
        }
        else {
            $retval = SUEXEC($target_uid, "nobody",
                             "webtbacct -v email $target_uid $safe_email",
                             SUEXEC_ACTION_CONTINUE);
        }
        if ($retval) {
            $errors["error"] = "Internal error changing password";
            SPITAJAX_ERROR(2, $errors);
            return;
        }
    }
    session_destroy();
    SPITAJAX_RESPONSE(0);
}

# Local Variables:
# mode:php
# End:
?>
