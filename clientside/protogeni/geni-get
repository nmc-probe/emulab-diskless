#!/usr/bin/env python
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#

import argparse
import re
import socket
import sys

PORT=7777
VERSION=1

parser = argparse.ArgumentParser()
parser.add_argument( '-a', '--all', action='store_true', help='dump all information available' )
parser.add_argument( '-c', '--client-version', action='version', help='display client version', version=str( VERSION ) )
parser.add_argument( '-n', '--no-cache', action='store_true', help='disable reading cached results' ) # Ignored; we don't currently cache anyway...
parser.add_argument( '-p', '--port', type=int, help='specify server port', default=PORT )
parser.add_argument( '-v', '--version', action='store_true', help='display server version' )
parser.add_argument( 'command', nargs='?' )
args = parser.parse_args()

if args.all:
    command = "all"
elif args.version:
    command = "version"
elif args.command:
    command = args.command
else:
    print >> sys.stderr, sys.argv[ 0 ] + ": no command specified"
    sys.exit( 1 )

# Our tmcd server is also our DNS server, so that's how we find it.
resolv_conf = open( "/etc/resolv.conf", "r" )
for line in resolv_conf.readlines():
    match = re.search( r"nameserver\s+([0-9.]+)", line )
    if match:
        server = match.group( 1 )
        break
else:
    print >> sys.stderr, sys.argv[ 0 ] + ": unable to find server address"
    sys.exit( 1 )

resolv_conf.close()

sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
sock.connect( (server, args.port) )
sock.send( "geni_" + command )

while True:
    buf = sock.recv( 0x10000 )
    if not buf:
        break
    print buf,

sock.close()
