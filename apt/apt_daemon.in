#!/usr/bin/perl -w
#
# Copyright (c) 2008-2015 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;
use JSON;
use File::Basename;

#
# Look for APT things that need to be dealt with.
#
sub usage()
{
    print "Usage: apt_daemon [-d] [-s] [-n]\n";
    exit(1);
}
my $optlist   = "dns";
my $debug     = 0;
my $impotent  = 0;
my $oneshot   = 0;


#
# Configure variables
#
my $TB		     = "@prefix@";
my $TBOPS            = "@TBOPSEMAIL@";
my $TBLOGS           = "@TBLOGSEMAIL@";
my $MAINSITE         = @TBMAINSITE@;
my $LOGFILE          = "$TB/log/apt_daemon.log";
my $MANAGEINSTANCE   = "$TB/bin/manage_instance";
my $PROTOUSER	     = "elabman";
my $SUDO	     = "/usr/local/bin/sudo";
my $WGET             = "/usr/local/bin/wget";
my $SLEEP_INTERVAL   = 300;
my $UPDATE_INTERVAL  = (60 * 60 * 24);

#
# Update interval countdown. Set to zero so it runs right away.
#
my $update_countdown = 0;
	  
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
	  
#
# Turn off line buffering on output
#
$| = 1; 

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}
if (! $MAINSITE) {
    exit(0);
}

#
# Check args early so we get the right DB.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"s"})) {
    $oneshot = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use emdb;
use Experiment;
use Node;
use libtestbed;
use emutil;
use libEmulab;
use APT_Instance;
use POSIX qw(strftime ceil);

if (!$oneshot) {
    if (CheckDaemonRunning("apt_daemon")) {
	fatal("Not starting another apt daemon!");
    }
    # Go to ground.
    if (! $debug) {
	if (TBBackGround($LOGFILE)) {
	    exit(0);
	}
    }
    if (MarkDaemonRunning("apt_daemon")) {
	fatal("Could not mark daemon as running!");
    }
}

#
# Setup a signal handler for newsyslog.
#
sub handler()
{
    my $SAVEEUID = $EUID;
    
    $EUID = 0;
    ReOpenLog($LOGFILE);
    $EUID = $SAVEEUID;
}
$SIG{HUP} = \&handler
    if (! ($debug || $oneshot));

#
# Kill failed instances.
#
sub KillFailedInstances()
{
    my $query_result =
	DBQueryWarn("select uuid,status from apt_instances ".
		    "where (status='failed' or ".
		    "       status='imaging' or status='imaging-failed') and ".
		    "      (UNIX_TIMESTAMP(now()) - ".
		    "       UNIX_TIMESTAMP(created) > 7200)");
    return
	if (!$query_result);

    while (my ($uuid,$status) = $query_result->fetchrow_array()) {
	my $instance = APT_Instance->Lookup($uuid);
	if (!defined($instance)) {
	    print STDERR "No such instance $uuid\n";
	    next;
	}
	print STDERR "$instance is in the $status state\n";

	if ($status eq "imaging" || $status eq "imaging-failed") {
	    #
	    # Move it back to the ready state. But must lock so as not to
	    # collide with with sa_daemon or the user.
	    #
	    my $genislice = $instance->GetGeniSlice();
	    goto skip
		if (!defined($genislice));
	    goto skip
		if ($genislice->Lock() != 0);
	    if ($impotent) {
		print STDERR
		    "Would change $instance status from imaging to ready\n";
	    }
	    else {
		print STDERR
		    "Changing $instance status from imaging to ready\n";
		$instance->Update({"status" => "ready"});
	    }
	    $genislice->UnLock();
	  skip:
	    $genislice->Flush();
	    next;
	}
	
	#
	# Try to terminate the instance. We cannot take the lock since
	# we are going to call manage_instance to do the termination.
	# So, manage_instance might collide with the sa_daemon which
	# locks the underlying slice, but if that happens we will just
	# try again after a short wait. If it still fails, then
	# something is wrong and we will notify.
	#
	if ($impotent) {
	    print STDERR "Would try to terminate $instance\n";
	    next;
	}
	# Use debug option to keep it from going into the background.
	my $output = emutil::ExecQuiet("$SUDO -u $PROTOUSER ".
				       "$MANAGEINSTANCE -d terminate $uuid");
	my $status = $?;
	print STDERR "$output\n"
	    if ($output ne "");
	if ($status) {
	    #
	    # Need to send email at some point. 
	    #
	}
    }
}

#
# Expire instances.
#
sub ExpireInstances()
{
    my $query_result =
	DBQueryWarn("select a.uuid,s.expires from apt_instances as a ".
		    "left join geni.geni_slices as s on s.uuid=a.slice_uuid ".
		    "where (a.status='ready') and ".
		    "      a.admin_lockdown=0 and s.lockdown=0 and ".
		    "      (UNIX_TIMESTAMP(now()) > ".
		    "       UNIX_TIMESTAMP(s.expires))");
    return
	if (!$query_result);

    while (my ($uuid,$expires) = $query_result->fetchrow_array()) {
	my $instance = APT_Instance->Lookup($uuid);
	if (!defined($instance)) {
	    print STDERR "No such instance $uuid\n";
	    next;
	}
	print STDERR "$uuid expired at $expires\n";

	#
	# Try to terminate the instance. We cannot take the lock since
	# we are going to call manage_instance to do the termination.
	# So, manage_instance might collide with the sa_daemon which
	# locks the underlying slice, but if that happens we will just
	# try again after a short wait. If it still fails, then
	# something is wrong and we will notify.
	#
	if ($impotent) {
	    print STDERR "Would try to terminate $instance\n";
	    next;
	}
	# Use debug option to keep it from going into the background.
	my $output = emutil::ExecQuiet("$SUDO -u $PROTOUSER ".
				       "$MANAGEINSTANCE -d terminate $uuid -e");
	my $status = $?;
	print STDERR "$output\n"
	    if ($output ne "");
	if ($status) {
	    #
	    # Need to send email at some point. 
	    #
	}
    }
}

#
# Warn about locked down instances that have expired. 
#
sub ReportLockdownExpired()
{
    my @instances;
    
    my $query_result =
	DBQueryWarn("select a.uuid,s.expires from apt_instances as a ".
		    "left join geni.geni_slices as s on s.uuid=a.slice_uuid ".
		    "where (a.admin_lockdown=1 or s.lockdown=1) and ".
		    "      (UNIX_TIMESTAMP(now()) > ".
		    "       UNIX_TIMESTAMP(s.expires))");
    return
	if (!$query_result);

    while (my ($uuid,$expires) = $query_result->fetchrow_array()) {
	my $instance = APT_Instance->Lookup($uuid);
	if (!defined($instance)) {
	    print STDERR "No such instance $uuid\n";
	    next;
	}
	print STDERR "$uuid is locked down but expired at $expires\n";
	push(@instances, $instance);
    }
    return
	if (!@instances);

    my $text = "";
    foreach my $instance (@instances) {
	my $profile = $instance->Profile();
	my $creator = $instance->creator();
	my $wwwlink = $instance->webURL();

	$text .= $profile->name() . ",$creator: $wwwlink\n";
    }
    SENDMAIL("portal-extensions\@aptlab.net",
	     "APT daemon: Locked down instances",
	     "The following instances are locked down but expired:\n\n".
	     $text . "\n",
	     $TBOPS);
    
}

#
# Gather up aggregate info. At the moment, there is still a lot of
# Utah specific goings on here. 
#
sub UpdateAggregateGraphs()
{
    my $freeblob = {};

    my $query_result =
	DBQueryWarn("select * from apt_aggregates where noupdate=0");

    return 0
	if (!$query_result->numrows);

    while (my $row = $query_result->fetchrow_hashref()) {
	my $urn  = $row->{'urn'};
	my $url  = $row->{'weburl'} . "/node_usage/freenodes.csv";
	my $name = $row->{'nickname'};

	system("$WGET --no-check-certificate ".
	       "--timeout=30 --waitretry=30 --retry-connrefused ".
	       "-q -O /tmp/freenodes.csv '$url'");
	next
	    if ($?);

	if (-z "/tmp/freenodes.csv") {
	    print STDERR "Zero length csv file for $urn\n";
	    next;
	}
	if (!open(CSV, "/tmp/freenodes.csv")) {
	    print STDERR "Could not open csv file for $urn\n";
	    next;
	}
	my $line = <CSV>;
	if ($line !~ /^Type,Inuse,Free$/) {
	    print STDERR "Invalid first line in csv file for $urn\n";
	    close(CSV);
	    next;
	}
	while (<CSV>) {
	    if ($_ =~ /^([-\w]+),(\d+),(\d+)$/) {
		$freeblob->{$name}->{$1} = {"inuse" => $2, "free" => $3};
	    }
	}
	close(CSV);
    }
    #print Dumper($freeblob);

    #
    # We are currently operating from two master json files. We make a
    # a copy of those, and then update them with new info, and write them
    # back. This will need to be generalized at some point. 
    #
    my $NOFED   = "$TB/etc/cloudlab-nofed.json";
    my $FEDONLY = "$TB/etc/cloudlab-fedonly.json";

    foreach my $file ($NOFED, $FEDONLY) {
	if (-e $file) {
	    my $data = `/bin/cat $file`;
	    my $obj  = decode_json($data);
	    if (!defined($obj)) {
		print STDERR "Could not decide json in $file\n";
		next;
	    }
	    foreach my $cluster (@{ $obj->{'children'} }) {
		my $name = $cluster->{'name'};
		next
		    if (!exists($freeblob->{$name}));

		my $total_size  = 0;
		my $total_inuse = 0;

		foreach my $child (@{ $cluster->{'children'} }) {
		    my $type = $child->{'name'};
		    
		    if (!exists($freeblob->{$name}->{$type})) {
			print STDERR "$name: Did not get a count for $type\n";
			next;
		    }
		    my $inuse = $freeblob->{$name}->{$type}->{'inuse'};
		    my $size  = $freeblob->{$name}->{$type}->{'free'} + $inuse;

		    $child->{'howfull'} = int($inuse);
		    $child->{'size'}    = int($size);
		    $total_inuse += $inuse;
		    $total_size  += $size;
		}
		# Rob says the toplevel numbers both have to be total_size.
		$cluster->{'howfull'} = int($total_size);
		$cluster->{'size'}    = int($total_size);
	    }
	    #print Dumper($obj);
	    #
	    # Write out new file for web ui.
	    #
	    my $tfile = "/tmp/$$.json";
	    if (open(JS, ">$tfile")) {
		my $json_text = to_json($obj, { pretty => 1 });
		print JS $json_text . "\n";
		close(JS);
	    }
	    else {
		print STDERR "Could not open temp json file for new data\n";
		next;
	    }
	    system("/bin/mv -f $tfile $TB/www/apt/" . basename($file));
	    if ($?) {
		print STDERR "Could not copy new json file to ".
		    "$TB/www/apt/" . basename($file) . "\n";
	    }
	    unlink($tfile);
	}
    }
    return 0;
}

my $reportcounter = 0;

# Do this once at startup
if (! NoLogins()) {
    ReportLockdownExpired();
}

while (1) {
    if (NoLogins()) {
	sleep(5);
	next;
    }
    $reportcounter += $SLEEP_INTERVAL;

    print "Running at ".
	POSIX::strftime("20%y-%m-%d %H:%M:%S", localtime()) . "\n";

    KillFailedInstances();
    ExpireInstances();
    UpdateAggregateGraphs();

    # Do this once every 24 hours.
    if ($reportcounter >= (24 * 60 * 60)) {
	ReportLockdownExpired();
	$reportcounter = 0;
    }
    
    exit(0)
	if ($oneshot);
    
    sleep($SLEEP_INTERVAL);
}
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    if (! ($oneshot || $debug)) {
	#
	# Send a message to the testbed list. 
	#
	SENDMAIL($TBOPS,
		 "APT daemon died",
		 $msg,
		 $TBOPS);
    }
    MarkDaemonStopped("apt_daemon")
	if (!$oneshot);

    die("*** $0:\n".
	"    $msg\n");
}
