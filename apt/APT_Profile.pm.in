#!/usr/bin/perl -wT
#
# Copyright (c) 2007-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package APT_Profile;

use strict;
use Carp;
use Exporter;
use vars qw(@ISA @EXPORT $AUTOLOAD);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use EmulabConstants;
use emdb;
use libtestbed;
use English;
use Data::Dumper;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";

# Cache of instances to avoid regenerating them.
my %profiles   = ();
my $debug      = 0;

#
# Lookup by idx or pid,name or uuid, depending on the args.
#
sub Lookup($$;$)
{
    my ($class, $arg1, $arg2) = @_;
    my $idx;

    #
    # A single arg is either an index or a "pid,name" or "pid/name" string.
    #
    if (!defined($arg2)) {
	if ($arg1 =~ /^(\d*)$/) {
	    $idx = $1;
	}
	elsif ($arg1 =~ /^([-\w]*),([-\w\.\+]*)$/ ||
	       $arg1 =~ /^([-\w]*)\/([-\w\.\+]*)$/) {
	    $arg1 = $1;
	    $arg2 = $2;
	}
	elsif ($arg1 =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	    my $result =
		DBQueryWarn("select idx from apt_profiles ".
			    "where uuid='$arg1'");

	    return undef
		if (! $result || !$result->numrows);

	    ($idx) = $result->fetchrow_array();
	}
	else {
	    return undef;
	}
    }
    elsif (! (($arg1 =~ /^[-\w\.\+]*$/) && ($arg2 =~ /^[-\w\.\+]*$/))) {
	return undef;
    }

    #
    # Two args means pid/name lookup instead of idx.
    #
    if (defined($arg2)) {
	my $result =
	    DBQueryWarn("select idx from apt_profiles ".
			"where pid='$arg1' and name='$arg2'");

	return undef
	    if (! $result || !$result->numrows);

	($idx) = $result->fetchrow_array();
    }

    # Look in cache first
    return $profiles{"$idx"}
        if (exists($profiles{"$idx"}));
    
    my $query_result =
	DBQueryWarn("select * from apt_profiles where idx='$idx'");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self           = {};
    $self->{'PROFILE'} = $query_result->fetchrow_hashref();

    bless($self, $class);
    
    # Add to cache. 
    $profiles{"$idx"} = $self;
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or croak "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'PROFILE'}->{$name})) {
	return $self->{'PROFILE'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'PROFILE'} = undef;
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $idx = $self->idx();
    
    my $query_result =
	DBQueryWarn("select * from apt_profiles where idx=$idx");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'PROFILE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create a profile
#
sub Create($$$$$)
{
    my ($class, $project, $creator, $argref, $usrerr_ref) = @_;

    my $name    = DBQuoteSpecial($argref->{'name'});
    my $pid     = $project->pid();
    my $pid_idx = $project->pid_idx();
    my $uid     = $creator->uid();
    my $uid_idx = $creator->uid_idx();

    #
    # The pid/imageid has to be unique, so lock the table for the check/insert.
    #
    DBQueryWarn("lock tables apt_profiles write")
	or return undef;

    my $query_result =
	DBQueryWarn("select name from apt_profiles ".
		    "where pid_idx='$pid_idx' and name=$name");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	$$usrerr_ref = "Profile already exists in project!";
	return undef;
    }
    
    my $uuid  = NewUUID();
    my $desc  = DBQuoteSpecial($argref->{'description'});
    my $rspec = DBQuoteSpecial($argref->{'rspec'});


    my $query = "insert into apt_profiles set created=now()";

    # Append the rest
    $query .= ",name=$name";
    $query .= ",uuid='$uuid'";
    $query .= ",pid='$pid',pid_idx='$pid_idx'";
    $query .= ",creator='$uid',creator_idx='$uid_idx'";
    $query .= ",description=$desc";
    $query .= ",rspec=$rspec";
    $query .= ",public=1"
	if (exists($argref->{'public'}) && $argref->{'public'});

    if (! DBQueryWarn($query)) {
	DBQueryWarn("unlock tables");
	tberror("Error inserting new apt_profile record for $pid/$name!");
	return undef;
    }
    DBQueryWarn("unlock tables");
    return Lookup($class, $pid, $argref->{'name'});
}

# _Always_ make sure that this 1 is at the end of the file...
1;
