#!/usr/bin/perl -wT
#
# Copyright (c) 2007-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package APT_Profile;

#
# Note about permissions bits.
#
# listed - The profile will be listed on the home page for anyone to see/use.
# public - Anyone can instantiate the profile, regardless of its listed bit
#          Say, if you send a URL to someone. 
# shared - Shared with logged in users. If not listed, then the default is
#          that only project members can see/use the profile, unless the public
#          is set (but they need a url). Shared says any logged in user can
#          see and use the profile.  

use strict;
use Carp;
use Exporter;
use vars qw(@ISA @EXPORT $AUTOLOAD);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use EmulabConstants;
use emdb;
use GeniXML;
use libtestbed;
use English;
use Data::Dumper;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";

# Cache of instances to avoid regenerating them.
my %profiles   = ();
my $debug      = 0;

#
# Lookup by idx or pid,name or uuid, depending on the args.
#
sub Lookup($$;$)
{
    my ($class, $arg1, $arg2) = @_;
    my $idx;

    #
    # A single arg is either an index or a "pid,name" or "pid/name" string.
    #
    if (!defined($arg2)) {
	if ($arg1 =~ /^(\d*)$/) {
	    $idx = $1;
	}
	elsif ($arg1 =~ /^([-\w]*),([-\w\.\+]*)$/ ||
	       $arg1 =~ /^([-\w]*)\/([-\w\.\+]*)$/) {
	    $arg1 = $1;
	    $arg2 = $2;
	}
	elsif ($arg1 =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	    my $result =
		DBQueryWarn("select idx from apt_profiles ".
			    "where uuid='$arg1'");

	    return undef
		if (! $result || !$result->numrows);

	    ($idx) = $result->fetchrow_array();
	}
	else {
	    return undef;
	}
    }
    elsif (! (($arg1 =~ /^[-\w\.\+]*$/) && ($arg2 =~ /^[-\w\.\+]*$/))) {
	return undef;
    }

    #
    # Two args means pid/name lookup instead of idx.
    #
    if (defined($arg2)) {
	my $result =
	    DBQueryWarn("select idx from apt_profiles ".
			"where pid='$arg1' and name='$arg2'");

	return undef
	    if (! $result || !$result->numrows);

	($idx) = $result->fetchrow_array();
    }

    # Look in cache first
    return $profiles{"$idx"}
        if (exists($profiles{"$idx"}));
    
    my $query_result =
	DBQueryWarn("select * from apt_profiles where idx='$idx'");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self           = {};
    $self->{'PROFILE'} = $query_result->fetchrow_hashref();

    bless($self, $class);
    
    # Add to cache. 
    $profiles{"$idx"} = $self;
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or croak "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'PROFILE'}->{$name})) {
	return $self->{'PROFILE'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'PROFILE'} = undef;
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $idx = $self->idx();
    
    my $query_result =
	DBQueryWarn("select * from apt_profiles where idx=$idx");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'PROFILE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create a profile
#
sub Create($$$$$)
{
    my ($class, $project, $creator, $argref, $usrerr_ref) = @_;

    my $name    = DBQuoteSpecial($argref->{'name'});
    my $pid     = $project->pid();
    my $pid_idx = $project->pid_idx();
    my $uid     = $creator->uid();
    my $uid_idx = $creator->uid_idx();

    #
    # The pid/imageid has to be unique, so lock the table for the check/insert.
    #
    DBQueryWarn("lock tables apt_profiles write")
	or return undef;

    my $query_result =
	DBQueryWarn("select name from apt_profiles ".
		    "where pid_idx='$pid_idx' and name=$name");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	$$usrerr_ref = "Profile already exists in project!";
	return undef;
    }
    
    my $uuid  = NewUUID();
    my $rspec = DBQuoteSpecial($argref->{'rspec'});


    my $query = "insert into apt_profiles set created=now()";

    # Append the rest
    $query .= ",name=$name";
    $query .= ",uuid='$uuid'";
    $query .= ",pid='$pid',pid_idx='$pid_idx'";
    $query .= ",creator='$uid',creator_idx='$uid_idx'";
    # This is temporary until all rspecs using tour format.
    $query .= ",description=''";
    $query .= ",rspec=$rspec";
    $query .= ",public=1"
	if (exists($argref->{'public'}) && $argref->{'public'});
    $query .= ",listed=1"
	if (exists($argref->{'listed'}) && $argref->{'listed'});
    $query .= ",shared=1"
	if (exists($argref->{'shared'}) && $argref->{'shared'});

    if (! DBQueryWarn($query)) {
	DBQueryWarn("unlock tables");
	tberror("Error inserting new apt_profile record for $pid/$name!");
	return undef;
    }
    DBQueryWarn("unlock tables");
    return Lookup($class, $pid, $argref->{'name'});
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $pid       = $self->pid();
    my $name      = $self->name();

    return "[Profile: $pid,$name]";
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $idx = $self->idx();

    my $query = "update apt_profiles set ".
	join(",", map("$_=" . DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    $query .= " where idx='$idx'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

sub Delete($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $idx = $self->idx();

    DBQueryWarn("delete from apt_profiles where idx='$idx'") or
	return -1;

    return 0;
}

#
# Mark the update time.
#
sub MarkModified($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $idx = $self->idx();

    DBQueryWarn("update apt_profiles set modified=now() ".
		"where idx='$idx'")
	or return -1;

    return 0;
}

#
# Condomize a profile rspec by inserting the necessary firewall section
# to each of the nodes.
#
sub CheckFirewall($$)
{
    my ($self, $condomize) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $rspec = GeniXML::Parse($self->rspec());
    if (! defined($rspec)) {
	print STDERR "Could not parse rspec\n";
	return undef;
    }
    foreach my $ref (GeniXML::FindNodes("n:node", $rspec)->get_nodelist()) {
	my @routable_control_ip =
	    GeniXML::FindNodesNS("n:routable_control_ip",
				 $ref,
				 $GeniXML::EMULAB_NS)->get_nodelist();
	my $virtualization_type = GeniXML::GetVirtualizationSubtype($ref);
	#
	# If a XEN container but not a routable IP, then use the basic
	# rules instead of closed, so that ssh is allowed in on the
	# alternate port. That is the only real difference between basic
	# and closed.
	#
	my $style = "closed";
	if (defined($virtualization_type) &&
	    $virtualization_type eq "emulab-xen" && !@routable_control_ip) {
	    $style = "basic";
	}
	
	if ($condomize) {
	    #
	    # No settings is easy; wrap it tight.
	    #
	    if (!GeniXML::HasFirewallSettings($ref)) {
		my $firewall = GeniXML::AddElement("firewall", $ref,
						   $GeniXML::EMULAB_NS);
		GeniXML::SetText("style", $firewall, $style);
		next;
	    }
	    #
	    # Make sure the existing section has a reasonable setting.
	    #
	    my $settings = GeniXML::FindNodesNS("n:firewall", $ref,
						$GeniXML::EMULAB_NS)->pop();
	    my $style = GeniXML::GetText("style", $settings);
	    if (!defined($style) || $style ne "basic" || $style ne "closed") {
		GeniXML::SetText("style", $settings, $style);
	    }
	}
	#
	# Quick pass over the exceptions to see if we need to substitute
	# the callers IP address.
	#
	foreach my $exception (GeniXML::FindNodesNS("n:firewall/n:exception",
				$ref, $GeniXML::EMULAB_NS)->get_nodelist()) {
	    my $ip = GeniXML::GetText("ip", $exception);
	    if (defined($ip) && $ip eq "myip" && exists($ENV{'REMOTE_ADDR'})) {
		GeniXML::SetText("ip", $exception, $ENV{'REMOTE_ADDR'});
	    }
	}
    }
    return GeniXML::Serialize($rspec);
}

#
# Lock and Unlock
#
sub Lock($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));
    return -1
	if (!DBQueryWarn("lock tables apt_profiles write"));

    my $idx = $self->idx();

    my $query_result =
	DBQueryWarn("update apt_profiles set locked=now() " .
		    "where idx='$idx' and locked is null");

    if (! $query_result ||
	$query_result->numrows == 0) {
	DBQueryWarn("unlock tables");
	return -1;
    }
    DBQueryWarn("unlock tables");
    $self->{'PROFILE'}->{'locked'} = time();
    return 0;
}

sub Unlock($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $idx = $self->idx();

    return -1
	if (! DBQueryWarn("update apt_profiles set ".
			  "locked=null where idx='$idx'"));
    
    $self->{'PROFILE'}->{'locked'} = 0;
    return 0;
}

# _Always_ make sure that this 1 is at the end of the file...
1;
