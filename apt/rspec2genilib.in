#!/usr/bin/perl -w

#
# Copyright (c) 2000-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use File::Temp qw(tempfile :mktemp :POSIX );
use POSIX qw(:signal_h);
use POSIX ":sys_wait_h";
use File::stat;
use Data::Dumper;

#
# Convert rspec to geni lib.
#
sub usage()
{
    print STDERR "Usage: rspec2genilib [-o filename] rspec\n";
    print STDERR "Options:\n";
    print STDERR"  -o file  : Specify output file\n";
    exit(-1);
}
my $optlist    = "do:";
my $debug      = 0;
my $ofile;

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $XMLLINT  = "/usr/local/bin/xmllint";

# Locals
my $rspecfile;
my $NodeCounter  = 0;
my $BsCounter    = 0;

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

if ($UID == 0) {
    die("Please do not run this as root!");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use GeniXML;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"o"})) {
    $ofile = $options{"o"};
}
if (@ARGV != 1) {
    usage();
}
$rspecfile = $ARGV[0];

#
# Must taint check!
#
if ($rspecfile =~ /^([-\w\/\.]+)$/) {
    $rspecfile = $1;
}
else {
    die("Bad data in argument: $rspecfile.");
}
my $xmlerrors = `$XMLLINT --noout $rspecfile 2>&1`;
if ($?) {
    print STDERR $xmlerrors;
    Fatal("rspec is not well formed");
}
my $rspec = GeniXML::ParseFile($rspecfile);
if (! defined($rspec)) {
    Fatal("Could not parse rspec");
}
my $genilib =
    "#\n" .
    "# NOTE: This code was machine converted from an Emulab experiment that\n".
    "#       was originally written in NS syntax. An actual human would never\n".
    "#       write code like this!\n".
    "#\n" .
    "import geni.portal\n" .
    "import geni.rspec.pg as pg\n" .
    "import geni.rspec.emulab as emulab\n" .
    "\n" .
    "rspec  = pg.Request()\n" .
    "portal = geni.portal.Context()\n\n";

sub AddStatement($)
{
    $genilib .= $_[0] . "\n";
}

#
# Top level elements.
#
my %Nodes       = ();
my %Ifaces      = ();
my %Links       = ();

sub AddNode($$) {
    my ($client_id, $type) = @_;

    $Nodes{$client_id} = {
	"client_id"    => $client_id,
	"type"         => $type,
	"statements"   => [],
	"ifaces"       => {},
	"blockstores"  => {},
	"pipes"        => {},
	"tag"          => "node" . $NodeCounter++,
    };
    return $Nodes{$client_id};
}
sub AddNodeStatement($$) {
    push(@{$Nodes{$_[0]}->{'statements'}}, $_[1]);
}
sub AddIface($$$$) {
    my ($node_id, $client_id, $ip, $mask) = @_;
    
    $Ifaces{$client_id} = {
	"client_id"  => $client_id,
	"node_id"    => $node_id,
	"ip"         => $ip,
	"mask"       => $mask,
	"statements" => [],
	"tag"        => "iface" . scalar(keys(%Ifaces)),
    };
    return $Ifaces{$client_id};
}
sub AddIfaceToNode($$)
{
    my ($node_id, $client_id) = @_;
    $Nodes{$node_id}->{'ifaces'}->{$client_id} = $Ifaces{$client_id};
}
sub AddIfaceStatement($$) {
    my ($iface_id, $statement) = @_;
    
    push(@{$Ifaces{$iface_id}->{'statements'}}, $statement);
}
sub AddBlockStore($$$$) {
    my ($node_id, $bsname, $class, $mount) = @_;

    $Nodes{$node_id}->{'blockstores'}->{$bsname} = {
	"bsname"     => $bsname,
	"class"      => $class,
	"mount"      => $mount,
	"statements" => [],
	"tag"        => "bs" . $BsCounter++,
    };
}
sub AddBlockstoreStatement($$$) {
    my ($node_id, $bsname, $statement) = @_;
    
    push(@{$Nodes{$node_id}->{'blockstores'}->{$bsname}->{'statements'}},
	 $statement);
}
sub AddBridgePipe($$$$$) {
    my ($node_id, $source, $capacity, $latency, $loss) = @_;
    my (undef,$iface_id) = split(":", $source);

    $Nodes{$node_id}->{'pipes'}->{$iface_id} = {
	"iface_id"   => $iface_id,
	"capacity"   => $capacity,
	"latency"    => $latency,
	"lossrate"   => $loss,
    };
}
sub AddLink($$) {
    my ($client_id, $type) = @_;

    $Links{$client_id} = {
	"client_id"    => $client_id,
	"type"         => $type,
	"isbslink"     => 0,
	"bsnode"       => undef,
	"ifaces"       => {},
	"statements"   => [],
	"tag"          => "link" . scalar(keys(%Links)),
    };
    return $Links{$client_id};
}
sub AddLinkStatement($$) {
    push(@{$Links{$_[0]}->{'statements'}}, $_[1]);
}
sub AddLinkIface($$) {
    $Links{$_[0]}->{'ifaces'}->{$_[1]} = $Ifaces{$_[1]};
}

#
# Process nodes.
#
foreach my $noderef (GeniXML::FindNodes("n:node", $rspec)->get_nodelist()) {
    my $client_id   = GeniXML::GetVirtualId($noderef);
    my $sliver_type = GeniXML::GetVirtualizationSubtype($noderef);
    my $exclusive   = GeniXML::GetExclusive($noderef);
    
    if ($sliver_type eq "emulab-xen") {
	AddNode($client_id, "emulab-xen");
	
	if (GeniXML::HasXenSettings($noderef)) {
	    my $xensettings = GeniXML::GetXenSettings($noderef);
	    
	    foreach my $setting (keys(%$xensettings)) {
		my $value = $xensettings->{$setting};
		if ($setting eq "ram") {
		    AddNodeStatement($client_id, "ram = $value");
		}
		elsif ($setting eq "cores") {
		    AddNodeStatement($client_id, "cores = $value");
		}
		elsif ($setting eq "disk") {
		    AddNodeStatement($client_id, "disk = $value");
		}
	    }
	}
	# xen_ptype is how we force to a node type.
	if (defined(GeniXML::XenPtype($noderef))) {
	    my $ptype = GeniXML::XenPtype($noderef);
	    AddNodeStatement($client_id, "xen_ptype = '$ptype'");
	}
    }
    elsif ($sliver_type eq "emulab-blockstore") {
	AddNode($client_id, "emulab-blockstore");
    }
    elsif ($sliver_type eq "delay") {
	AddNode($client_id, "delay");
	
	#
	# We need the pipes. 
	#
	my @pipes = GeniXML::GetDelayPipes($noderef);
	if (!@pipes) {
	    fatal("No pipes for bridge node.");
	}
	foreach my $pipe (@pipes) {
	    #
	    # Not all params need to be defined.
	    #
	    my $source   = GetText("source", $pipe);
	    my $capacity = GetText("capacity", $pipe);
	    my $latency  = GetText("latency", $pipe);
	    my $lossrate = GetText("packet_loss", $pipe);

	    AddBridgePipe($client_id, $source, $capacity, $latency, $lossrate)
	}
    }
    else {
	AddNode($client_id, "raw");
    }
    if (defined($exclusive)) {
	AddNodeStatement($client_id, "exclusive = " .
			 ($exclusive ? "True" : "False"));
    }
    if (GeniXML::GetNodeId($noderef)) {
	AddNodeStatement($client_id, "component_id = '" .
	    GeniXML::GetNodeId($noderef) . "'");
    }
    if (GeniXML::GetManagerId($noderef)) {
	AddNodeStatement($client_id, "component_manager_id = '" .
	    GeniXML::GetManagerId($noderef) . "'");
    }
    if (GeniXML::FindFirst("n:hardware_type", $noderef)) {
	my $element = GeniXML::FindFirst("n:hardware_type", $noderef);
	my $htype   = GeniXML::GetText("name", $element);
	AddNodeStatement($client_id, "hardware_type = '$htype'");
    }
    if (GeniXML::RoutableControlIP($noderef)) {
	AddNodeStatement($client_id, "routable_control_ip = True");
    }
    
    #
    # Disk image.
    #
    if ($sliver_type ne "emulab-blockstore") {
	my $diskref = GeniXML::GetDiskImage($noderef);
	if (defined($diskref)) {
	    my $name  = GeniXML::GetText("name", $diskref);
	    AddNodeStatement($client_id, "disk_image = '$name'");
	}
    }
    
    #
    # Services.
    #
    foreach my $service (GeniXML::GetServices($noderef)) {
	my $type = $service->{'type'};
	
	if ($type eq "execute") {
	    my $shell = $service->{'shell'};
	    my $cmd   = $service->{'cmd'};

	    AddNodeStatement($client_id,
			     "addService(pg.Execute('$shell','$cmd'))");
	}
	elsif ($type eq "install") {
	    my $url  =  $service->{'url'};
	    my $path =  $service->{'dir'};

	    AddNodeStatement($client_id,
			     "addService(pg.Install('$url','$path'))");
	}
    }
    #
    # Desires.
    #
    foreach my $desire (GeniXML::FindNodesNS("n:fd", $noderef,
				       $GeniXML::EMULAB_NS)->get_nodelist()) {
	my $name    = GeniXML::GetText("name", $desire);
	my $weight  = GeniXML::GetText("weight", $desire);

	AddNodeStatement($client_id, "Desire('$name','$weight')");
    }
    
    #
    # Interfaces. 
    #
    foreach my $ifaceref (GeniXML::FindNodes("n:interface",
					     $noderef)->get_nodelist()) {
	my $virtual_id = GeniXML::GetInterfaceId($ifaceref);
	my $ip   = GeniXML::GetIp($ifaceref, $noderef);
	my $mask = GeniXML::GetMask($ifaceref, $noderef);

	AddIface($client_id, $virtual_id, $ip, $mask);
	AddIfaceToNode($client_id, $virtual_id);
	if (GeniXML::GetVnodeId($ifaceref)) {
	    AddIfaceStatement($virtual_id, "component_id = '" .
			      GeniXML::GetManagerId($ifaceref) . "'");
	}
    }
    #
    # Blockstores. 
    #
    foreach my $blockref (GeniXML::FindNodesNS("n:blockstore", $noderef,
				       $GeniXML::EMULAB_NS)->get_nodelist()) {
	my $bsname    = GeniXML::GetText("name", $blockref);
	my $class     = GeniXML::GetText("class", $blockref);
	my $mount     = GeniXML::GetText("mountpoint", $blockref);
	my $readonly  = GeniXML::GetText("readonly", $blockref);
	my $dataset   = GeniXML::GetText("dataset", $blockref);
	my $placement = GeniXML::GetText("placement", $blockref);
	my $size      = GeniXML::GetText("size", $blockref);
	my @statements=();

	# XXX
	if ($sliver_type eq "emulab-blockstore") {
	    $bsname = $client_id;
	}
	AddBlockStore($client_id, $bsname, $class, $mount);

	if (defined($readonly) && $readonly) {
	    AddBlockstoreStatement($client_id, $bsname, "readonly = True");
	}
	if (defined($size)) {
	    AddBlockstoreStatement($client_id, $bsname, "size = '$size'");
	}
	if (defined($placement)) {
	    AddBlockstoreStatement($client_id, $bsname, "placement = '$placement'");
	}
	if (defined($dataset)) {
	    AddBlockstoreStatement($client_id, $bsname, "dataset = '$dataset'");
	}
    }
}
#
# Links ...
#
foreach my $linkref (GeniXML::FindNodes("n:link", $rspec)->get_nodelist()) {
    my $client_id   = GeniXML::GetVirtualId($linkref);
    my $linktype    = GeniXML::LinkType($linkref);

    my $link = AddLink($client_id, $linktype);

    #
    # Link properties
    #
    if (GeniXML::GetManagerId($linkref)) {
	AddLinkStatement($client_id, "component_manager_id = '" .
	    GeniXML::GetManagerId($linkref) . "'");
    }
    if (GeniXML::HasBestEffortSetting($linkref)) {
	AddLinkStatement($client_id, "best_effort = True");
    }
    if (GeniXML::HasTrivialSetting($linkref)) {
	my $istrivial = (GeniXML::TrivialOkay($linkref) ? "True" : "False");
	AddLinkStatement($client_id, "trivial_ok = $istrivial");
    }
    if (GeniXML::HasTagSetting($linkref)) {
	my $istagged = (GeniXML::IsTaggedLan($linkref) ? "True" : "False");
	AddLinkStatement($client_id, "vlan_tagging = $istagged");
    }
    if (GeniXML::IsMultiplexedLan($linkref)) {
	AddLinkStatement($client_id, "link_multiplexing = True");
    }
    if (GeniXML::GetText("protocol", $linkref)) {
	my $protocol = GeniXML::GetText("protocol", $linkref);
	AddLinkStatement($client_id, "protocol = '$protocol'");
    }
    #
    # Shaping.
    #
    my @properties = GeniXML::GetLinkProperties($linkref);
    if (@properties) {
	foreach my $property (@properties) {
	    my $source   = GetText("source_id", $property);
	    my $dest     = GetText("dest_id", $property);
	    my $capacity = GetText("capacity", $property);
	    my $plr      = GetText("packet_loss", $property);
	    my $latency  = GetText("latency", $property);

	    if (defined($capacity)) {
		AddIfaceStatement($source, "bandwidth = $capacity");
	    }
	    if (defined($latency)) {
		AddIfaceStatement($source, "latency = $latency");
	    }
	    if (defined($plr)) {
		AddIfaceStatement($source, "plr = $plr");
	    }
	}
    }
    #
    # Interfaces.
    #
    # Another blockstore special case; Kirk would prefer not to have
    # IP addresses show through since they are ignored. So first go through
    # and see if any of the nodes is a blockstore, and if they are, kill
    # the IP address in all the interfaces.
    #
    my $isbslink = 0;
    
    foreach my $ifaceref (GeniXML::FindNodes("n:interface_ref",
					     $linkref)->get_nodelist()) {
	my $virtual_id = GeniXML::GetInterfaceId($ifaceref);
	my ($node_id,$iface_id) = split(":", $virtual_id);
	my $node = $Nodes{$node_id};

	if ($node->{'type'} eq "emulab-blockstore") {
	    $link->{'isbslink'} = $isbslink = 1;
	    $link->{'bsnode'}   = $node;
	}
	AddLinkIface($client_id, $virtual_id);
    }
    if ($isbslink) {
	#
	# Kirk would like the IPs to not show. 
	#
	foreach my $ifaceref (GeniXML::FindNodes("n:interface_ref",
						 $linkref)->get_nodelist()) {
	    my $virtual_id = GeniXML::GetInterfaceId($ifaceref);
	    if (exists($Ifaces{$virtual_id})) {
		$Ifaces{$virtual_id}->{'ip'} = undef;
	    }
	}
    }
}


#
# Now we can spit out stuff. We want to maintain the same order as the
# rspec for clarity.
#
# If we have any ifaces, we need to remember them in a global variable, since
# the same python object we create when adding to the node, has to be referenced
# again when adding it to the link. 
#

#
# Tour description and instructions.
#
my ($rspec_tour) = GeniXML::FindNodesNS("n:rspec_tour", $rspec,
					$GeniXML::RSPEC_TOUR)->get_nodelist();
if (defined($rspec_tour)) {
    my $description  = GeniXML::FindFirst("n:description", $rspec_tour);
    my $instructions = GeniXML::FindFirst("n:instructions", $rspec_tour);

    AddStatement("Tour = emulab.Tour()");
    if (defined($description)) {
	my $text = $description->textContent();

	AddStatement("Tour.Description(emulab.Tour.TEXT, '$text')");
    }
    if (defined($instructions)) {
	my $text = $instructions->textContent();

	AddStatement("Tour.Instructions(emulab.Tour.TEXT, '$text')");
    }
    AddStatement("rspec.addTour(Tour)\n");
}

#
# Now nodes, in same order as rspec.
#
foreach my $noderef (GeniXML::FindNodes("n:node", $rspec)->get_nodelist()) {
    my $client_id   = GeniXML::GetVirtualId($noderef);
    my $node        = $Nodes{$client_id};
    my $ntag        = $node->{'tag'};
    my @code        = ("# Node $client_id");

    if ($node->{'type'} eq "emulab-xen") {
	push(@code, "$ntag = emulab.XenVM('$client_id')");
    }
    elsif ($node->{'type'} eq "emulab-blockstore") {
	my $mount = $node->{'blockstores'}->{$client_id}->{'mount'};
	$ntag = $node->{'blockstores'}->{$client_id}->{'tag'};

	#
	# Blockstores are special. We want to use the same iface names
	# from the rspec, not the internal names that geni-lib uses,
	# This ensures that the rspec->geni-lib->rspec ... path uses
	# consistent naming. And we know that the bridge has only two
	# interfaces, so that makes it easier.
	#
	my ($iface) = values(%{$node->{'ifaces'}});
	my (undef,$if) = split(":", $iface->{'client_id'});
	
	push(@code, "$ntag = emulab.RemoteBlockstore('$client_id', ".
	     "'$mount', '$if')");
    }
    elsif ($node->{'type'} eq "delay") {
	#
	# Bridges are also special, see comment above for blockstore.
	#
	my ($iface0, $iface1) = values(%{$node->{'ifaces'}});
	my (undef,$if0) = split(":", $iface0->{'client_id'});
	my (undef,$if1) = split(":", $iface1->{'client_id'});
	
	push(@code, "$ntag = emulab.Bridge('$client_id', '$if0', '$if1')");

	#
	# And the pipes. Just two of them.
	#
	foreach my $p (values(%{$node->{'pipes'}})) {
	    my $pname = ($p->{'iface_id'} eq $if0
			 ? "${ntag}.pipe('$if0')" : "${ntag}.pipe('$if1')");

	    push(@code, "${pname}.bandwidth = " . $p->{'capacity'})
		if (defined($p->{'capacity'}));
	    push(@code, "${pname}.latency = " . $p->{'latency'})
		if (defined($p->{'latency'}));
	    push(@code, "${pname}.lossrate = " . $p->{'lossrate'})
		if (defined($p->{'lossrate'}));
	}
    }
    else {
	push(@code, "$ntag = pg.RawPC('$client_id')");
    }
    foreach my $statement (@{$node->{'statements'}}) {
	push(@code, "${ntag}." . $statement);
    }
    foreach my $id (sort(keys(%{$node->{'ifaces'}}))) {
	my $interface = $node->{'ifaces'}->{$id};
	my $client_id = $interface->{'client_id'};
	my $itag = $interface->{'tag'};
	my $ip   = $interface->{'ip'};
	my $mask = $interface->{'mask'};
	my (undef,$iface_id) = split(":", $client_id);
	my $addr = ($ip && $mask ?
		    "pg.IPv4Address('$ip','$mask')" : undef);

	#
	# Again, bridges and blockstores are special. We have to find
	# the internally created interface, not add another one.
	#
	if ($node->{'type'} eq "delay") {
	    push(@code, "$itag = ${ntag}.interface('$iface_id')");
	    if ($addr) {
		push(@code, "${itag}.addAddress($addr)");
	    }
	}
	elsif ($node->{'type'} eq "emulab-blockstore") {
	    push(@code, "$itag = ${ntag}.interface");
	}
	else {
	    push(@code, "$itag = ${ntag}.addInterface('$iface_id'" .
		 (defined($addr) ? ", $addr" : "") . ")");
	}
    }
    foreach my $id (sort(keys(%{$node->{'blockstores'}}))) {
	my $blockstore = $node->{'blockstores'}->{$id};
	my $bsname     = $blockstore->{'bsname'};
	my $btag       = $blockstore->{'tag'};
	my $class      = $blockstore->{'class'};
	my $mount      = $blockstore->{'mount'};

	if ($node->{'type'} eq "emulab-blockstore") {
	    foreach my $statement
		(@{$node->{'blockstores'}->{$client_id}->{'statements'}}) {
		push(@code, "${btag}." . $statement);
	    }
	}
	else {
	    push(@code, "$btag = ${ntag}.Blockstore('$bsname', '$mount') ");
	    foreach my $statement
		(@{$node->{'blockstores'}->{$bsname}->{'statements'}}) {
		push(@code, "${btag}." . $statement);
	    }
	}
    }
    push(@code, "rspec.addResource($ntag)");
    AddStatement(join("\n", @code));
    AddStatement("");
}
foreach my $linkref (GeniXML::FindNodes("n:link", $rspec)->get_nodelist()) {
    my $client_id   = GeniXML::GetVirtualId($linkref);
    my $link        = $Links{$client_id};
    my $ltag        = $link->{'tag'};
    my @code        = ("# Link $client_id");

    if (defined($link->{'type'}) && $link->{'type'} eq "lan") {
	push(@code, "$ltag = pg.LAN('$client_id')");
    }
    else {
	push(@code, "$ltag = pg.Link('$client_id')");
    }
    foreach my $statement (@{$link->{'statements'}}) {
	push(@code, "${ltag}." . $statement);
    }
    if (0 && $link->{'isbslink'}) {
	my $node = $link->{'bsnode'};
	my $bs   = $node->{'blockstores'}->{$node->{'client_id'}};
	my $btag = $bs->{'tag'};
	push(@code, "${ltag}.addInterface(${btag}.interface)");
    }
    foreach my $id (sort(keys(%{$link->{'ifaces'}}))) {
	my $interface = $link->{'ifaces'}->{$id};
	my $client_id = $interface->{'client_id'};
	my $itag      = $interface->{'tag'};

	foreach my $statement (@{$interface->{'statements'}}) {
	    push(@code, "${itag}." . $statement);
	}
	push(@code, "${ltag}.addInterface($itag)");
    }
    push(@code, "rspec.addResource($ltag)");
    AddStatement(join("\n", @code));
    AddStatement("");
}

#
# Special top level elements.
#
if (GeniXML::MultiplexFactor($rspec)) {
    my $factor = GeniXML::MultiplexFactor($rspec);
    AddStatement("rspec.setCollocateFactor($factor)");
}
if (GeniXML::PackingStrategy($rspec)) {
    my $packing_option = GeniXML::PackingStrategy($rspec);
    AddStatement("rspec.setPackingStrategy($packing_option)");
}
foreach my $pool (@{ GeniXML::GetAddressPools($rspec) }) {
    my $name  = $pool->{'client_id'};
    my $count = $pool->{'count'};
    my $cmurn = $pool->{'cmurn'};

    AddStatement("pool = emulab.AddressPool('$name', $count)");
    if (defined($cmurn)) {
	AddStatement("pool.component_manager_id = '$cmurn'");
    }
    AddStatement("rspec.addResource(pool)");
}
AddStatement("portal.printRequestRSpec(rspec)");

print "$genilib";

exit(0);

sub fatal($) {
    my ($mesg) = $_[0];

    print STDERR "*** $0:\n".
	         "    $mesg\n";

    exit(-1);
}
