#!/usr/bin/perl -wT
#
# Copyright (c) 2007-2016 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package APT_Instance;

use strict;
use Carp;
use English;
use Data::Dumper;
use POSIX qw(tmpnam);
use Exporter;
use vars qw(@ISA @EXPORT $AUTOLOAD
	    $RECORDHISTORY_TERMINATED $RECORDHISTORY_EXPIRED
	    $APT_HOLDINGPROJECT $CLOUD_HOLDINGPROJECT);

@ISA    = "Exporter";

# RecordHistory flags.
$RECORDHISTORY_TERMINATED	= 0x00;
$RECORDHISTORY_EXPIRED		= 0x01;

# Names of the holding projects.
$APT_HOLDINGPROJECT   = "aptguests";
$CLOUD_HOLDINGPROJECT = "CloudLab";

@EXPORT = qw($RECORDHISTORY_TERMINATED $RECORDHISTORY_EXPIRED
             $APT_HOLDINGPROJECT $CLOUD_HOLDINGPROJECT);

# Must come after package declaration!
use EmulabConstants;
use emdb;
use libtestbed;
use Brand;
use APT_Profile;
use APT_Geni;
use Genixmlrpc;
use GeniResponse;
use GeniCertificate;
use GeniCredential;
use GeniHRN;
use GeniXML;
use WebTask;
use Logfile;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $GENEXTENDCRED = "$TB/sbin/protogeni/genextendcred";

# Cache of instances to avoid regenerating them.
my %instances  = ();
my $debug      = 0;

# Debugging
my $usemydevtree  = 0;

#
# Lookup by uuid.
#
sub Lookup($$)
{
    my ($class, $token) = @_;
    my $query_result;

    if ($token =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	# Look in cache first
	return $instances{$token}
            if (exists($instances{$token}));

	$query_result =
	    DBQueryWarn("select * from apt_instances where uuid='$token'");
    }
    else {
	return undef;
    }
    return undef
	if (!$query_result || !$query_result->numrows);

    my $self              = {};
    $self->{'INSTANCE'}   = $query_result->fetchrow_hashref();
    $self->{'BRAND'}      = Brand->Create($self->{'INSTANCE'}->{'servername'});
    $self->{'HASH'}       = {};
    $self->{'AGGREGATES'} = {};
    bless($self, $class);

    #
    # Lookup existing aggregates.
    #
    my $aggregates = APT_Instance::Aggregate->LookupForInstance($self);
    if (!keys(%{$aggregates}) && defined($self->aggregate_urn())) {
	#
	# Make up a fake one; eventually the old ones will die or
	# I will create entries for them. Not worrying about it now.
	#
	$aggregates = {$self->aggregate_urn() =>
			   APT_Instance::Aggregate->GenTemp($self)};
    }
    $self->{'AGGREGATES'} = $aggregates;
    
    # Add to cache. 
    $instances{$self->uuid()} = $self;
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or confess "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'INSTANCE'}->{$name})) {
	return $self->{'INSTANCE'}->{$name};
    }
    # Or it is for a local storage slot.
    if ($name =~ /^_.*$/) {
	if (scalar(@_) == 2) {
	    return $self->{'HASH'}->{$name} = $_[1];
	}
	elsif (exists($self->{'HASH'}->{$name})) {
	    return $self->{'HASH'}->{$name};
	}
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}
sub Brand($)	{ return $_[0]->{'BRAND'}; }
sub isAPT($)	{ return $_[0]->Brand()->isAPT() ? 1 : 0; }
sub isCloud($)	{ return $_[0]->Brand()->isCloud() ? 1 : 0; }
sub isPNet($)	{ return $_[0]->Brand()->isPNet() ? 1 : 0; }
sub AggregateList($) { return values(%{ $_[0]->{'AGGREGATES'} }); }
sub AggregateHash($) { return $_[0]->{'AGGREGATES'}; }

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'INSTANCE'}   = undef;
    $self->{'BRAND'}      = undef;
    $self->{'AGGREGATES'} = undef;
    $self->{'HASH'}       = undef;
}

#
# Flush from our little cache, as for the expire daemon.
#
sub Flush($)
{
    my ($self) = @_;

    delete($instances{$self->uuid()});
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    
    my $query_result =
	DBQueryWarn("select * from apt_instances where uuid='$uuid'");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'INSTANCE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create an Instance
#
sub Create($$$)
{
    my ($class, $argref, $perrmsg) = @_;
    my $uuid;

    if (exists($argref->{'uuid'})) {
	$uuid = $argref->{'uuid'};
	delete($argref->{'uuid'});
    }
    else {
	$uuid = NewUUID();
    }
    my $pid_idx = $argref->{'pid_idx'};
    my $name    = $argref->{'name'};

    #
    # The uuid has to be unique, so lock the table for the check/insert.
    #
    DBQueryWarn("lock tables apt_instances write")
	or return undef;

    my $query_result =
	DBQueryWarn("select uuid from apt_instances where uuid='$uuid'");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	$$perrmsg = "Instance uuid $uuid already exists!";
	return undef;
    }
    $query_result =
	DBQueryWarn("select name from apt_instances ".
		    "where name='$name' and pid_idx='$pid_idx'");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	$$perrmsg = "Instance name already in use!";
	return undef;
    }

    my $query = "insert into apt_instances set created=now(),uuid='$uuid', ".
	join(",", map("$_=" .
		      DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    if (! DBQueryWarn($query)) {
	DBQueryWarn("unlock tables");
	$$perrmsg = "Error inserting new apt_instance record for $uuid!";
	return undef;
    }
    DBQueryWarn("unlock tables");
    return Lookup($class, $uuid);
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $uuid  = $self->uuid();

    return "[APT_Instance: $uuid]";
}

sub LookupBySlice($$)
{
    my ($class, $token) = @_;
    my $slice_uuid;

    if ($token =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	$slice_uuid = $token;
    }
    elsif (GeniHRN::IsValid($token)) {
	#
	# We should put the slice_urn into the apt_instances table.
	#
	require GeniSlice;
	my $slice = GeniSlice->Lookup($token);
	return undef
	    if (!defined($slice));
	$slice_uuid = $slice->uuid();
    }
    else {
	return undef;
    }

    my $query_result =
	DBQueryWarn("select uuid from apt_instances ".
		    "where slice_uuid='$slice_uuid'");
	
    return undef
	if (!$query_result || !$query_result->numrows);

    my ($uuid) = $query_result->fetchrow_array();
    return APT_Instance->Lookup($uuid);
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    my $query = "update apt_instances set ".
	join(",", map("$_=" . DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    $query .= " where uuid='$uuid'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

#
# NOTE: We should delete the webtask, but the web UI needs it to
# report status back to the user when an experiment is terminated.
#
sub Delete($)
{
    my ($self) = @_;
    my $uuid = $self->uuid();

    foreach my $agg ($self->AggregateList()) {
	$agg->Delete() == 0
	    or return -1;
    }
    DBQueryWarn("delete from apt_instances where uuid='$uuid'") or
	return -1;

    return 0;
}

#
# Lock and unlock operate on the underlying slice.
#
sub Lock($)
{
    my ($self) = @_;
    my $slice  = $self->GetGeniSlice();
    if (!defined($slice)) {
	return -1;
    }
    return $slice->Lock();
}
sub Unlock($)
{
    my ($self) = @_;
    my $slice  = $self->GetGeniSlice();
    if (!defined($slice)) {
	return -1;
    }
    return $slice->UnLock();
}

sub SetStatus($$)
{
    my ($self,$status) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("update apt_instances set ".
		"  status='$status',status_timestamp=now() ".
		"where uuid='$uuid'")
	or return -1;

    $self->{'INSTANCE'}->{'status'} = $status;
    return 0;
    
}
sub SetPublicURL($$)
{
    my ($self,$url) = @_;
    my $safe_url = DBQuoteSpecial($url);

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("update apt_instances set public_url=$safe_url ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{'public_url'} = $url;
    return 0;
    
}
sub SetManifest($$)
{
    my ($self,$manifest) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    my $safe_manifest = DBQuoteSpecial($manifest);    

    DBQueryWarn("update apt_instances set manifest=$safe_manifest ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{'manifest'} = $manifest;
    return 0;
}

sub MarkCanceled($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("update apt_instances set ".
		"  canceled=1,canceled_timestamp=now() ".
		"where uuid='$uuid'")
	or return -1;

    $self->{'INSTANCE'}->{'canceled'} = 1;
    return 0;
}
# We need to bypass the in memory state for this.
sub IsCanceled($)
{
    my ($self) = @_;
    my $uuid = $self->uuid();

    my $query_result =
	DBQueryWarn("select canceled from apt_instances ".
		    "where uuid='$uuid'");
	
    return -1
	if (!$query_result);
    return 0
	if (!$query_result->numrows);
    my ($canceled) = $query_result->fetchrow_array();
    return $canceled;
}

#
# Set to use the logfile. 
#
sub SetLogFile($$)
{
    my ($self, $logfile) = @_;

    return -1
	if ($self->Update({'logfileid' => $logfile->logid()}));

    return 0;
}

#
# Set/Clear the lockdown bits.
#
sub SetLockdown($$$)
{
    my ($self,$which,$clear) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    if ($which eq "admin") {
	$which = "admin_lockdown";
    }
    elsif ($which eq "user") {
	$which = "user_lockdown";
    }
    else {
	return -1;
    }
    my $value = ($clear ? 0 : 1);

    DBQueryWarn("update apt_instances set ${which}=${value} ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{$which} = $value;
    return 0;
}

#
# Set/Clear the panic flag.
#
sub SetPanic($$)
{
    my ($self,$clear) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid  = $self->uuid();
    my $value = ($clear ? 0 : 1);

    DBQueryWarn("update apt_instances set paniced=${value} ".
		(!$clear ? ",paniced_timestamp=now() " : "") .
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{"paniced"} = $value;
    return 0;
}

# Return a URL for the status page.
sub webURL($)
{
    my ($self) = @_;
    my $link = $self->Brand()->wwwBase();
    $link    = $link . "/status.php?uuid=" . $self->uuid();

    return $link;
}

#
# Find the profile for this instance.
#
sub Profile($)
{
    my ($self) = @_;
    
    return APT_Profile->Lookup($self->profile_id(),
			       $self->profile_version());
}

#
# Record a history entry.
# We do this when the instance is terminated. 
#
sub RecordHistory($$)
{
    my ($self, $flags) = @_;
    my $uuid = $self->uuid();
    my $expired = ($flags ? 1 : 0);

    DBQueryWarn("replace into apt_instance_aggregate_history ".
		"select * from apt_instance_aggregates where uuid='$uuid'")
	or return -1;

    DBQueryWarn("replace into apt_instance_history ".
		"select uuid,name,profile_id,profile_version,slice_uuid, ".
		"       creator,creator_idx,creator_uuid,pid,pid_idx, ".
		"       aggregate_urn,public_url,logfileid, ".
		"       created,now(),$expired, ".
		"       extension_count,extension_days, ".
		"       physnode_count,virtnode_count, ".
		"       servername,rspec,params,manifest ".
		" from apt_instances where uuid='$uuid'")
	or return -1;

    return 0;
}

sub RecordError($$$)
{
    my ($self, $exitcode, $message) = @_;
    my $uuid = $self->uuid();
    my $safe_message = DBQuoteSpecial($message);

    DBQueryWarn("replace into apt_instance_failures ".
		"select uuid,name,profile_id,profile_version,slice_uuid, ".
		"       creator,creator_idx,creator_uuid,pid,pid_idx, ".
		"       created,'$exitcode',$safe_message,public_url, ".
		"       logfileid ".
		" from apt_instances where uuid='$uuid'")
	or return -1;

    return 0;
}

#
# Locate Geni objects for creator and slice.
#
sub GetGeniSlice($)
{
    my ($self) = @_;
    require GeniSlice;
    
    return GeniSlice->Lookup($self->slice_uuid());
}

sub GetGeniUser($)
{
    my ($self) = @_;
    require GeniUser;
    
    return GeniUser->Lookup($self->creator_uuid(), 1);
}

sub GetGeniAuthority($)
{
    my ($self) = @_;
    require GeniAuthority;

    return APT_Geni::GetAuthority($self->aggregate_urn());
}

sub GetProject($)
{
    my ($self) = @_;
    require Project;
    
    return Project->Lookup($self->pid_idx());
}

#
# Warn creator that the experiment is going to expire. This is hooked
# in from the sa_daemon, so we can send a message that is less geni like
# and more APT/Cloud.
#
sub WarnExpiring($$)
{
    my ($self, $when) = @_;
    require GeniDB;
    require GeniSlice;

    my $slice     = GeniSlice->Lookup($self->slice_uuid());;
    if (!defined($slice)) {
	print STDERR "WarnExpiring: No slice for $self\n";
	return -1;
    }
    my $slicename = $slice->slicename();
    my $geniuser  = GeniUser->Lookup($slice->creator_uuid(), 1);
    if (!defined($geniuser)) {
	print STDERR "WarnExpiring: No creator for $self\n";
	return -1;
    }
    if (!defined($geniuser->email())) {
	print STDERR "WarnExpiring: no email address for $geniuser\n";
	return 0;
    }
    my $link = $self->webURL();
    
    $self->Brand()->SendEmail($geniuser->email(),
		     "Your experiment is expiring soon!",
		     "Your experiment $slicename is going to expire in ${when}.\n".
		     "If you want to extend this experiment, please go to:\n\n".
		     "    $link\n\n".
		     "and click on the Extend button.\n".
		     "\n".
		     "Thanks!",
		     $self->Brand()->LogsEmailAddress());
    
    return 0;
}

#
# Go through all the manifests and count up nodes.
#
sub ComputeNodeCounts($)
{
    my ($self) = @_;
    my $physnode_count = 0;
    my $virtnode_count = 0;
    my @slivers = $self->AggregateList();
    if (!@slivers) {
	print STDERR "No slivers for $self\n";
	return -1;
    }
    foreach my $sliver (@slivers) {
	my $manifest = GeniXML::Parse($sliver->manifest());
	if (! defined($manifest)) {
	    print STDERR "Could not parse manifest for $sliver\n";
	    return -1;
	}
	my $pcount = 0;
	my $vcount = 0;
	
	foreach my $ref (GeniXML::FindNodes("n:node",
					    $manifest)->get_nodelist()) {
	    my $virtualization_type = GeniXML::GetVirtualizationSubtype($ref);
	    my $manager_urn = GetManagerId($ref);

	    # Combined rspec.
	    next
		if (!defined($manager_urn) ||
		    $manager_urn ne $sliver->aggregate_urn());

	    if (defined($virtualization_type) &&
		$virtualization_type eq "emulab-xen") {
		$vcount++;
		next;
	    }
	    $pcount++;
	}
	$sliver->Update({"physnode_count" => $pcount,
			 "virtnode_count" => $vcount})
	    == 0 or return -1;
	    
	$physnode_count += $pcount;
	$virtnode_count += $vcount;
    }
    $self->Update({"physnode_count" => $physnode_count,
		   "virtnode_count" => $virtnode_count})
	== 0 or return -1;
    return 0;
}

#
# Add an aggregate to an instance.
#
sub AddAggregate($$)
{
    my ($self, $aggregate_urn) = @_;

    my $aggobj = APT_Instance::Aggregate->Create($self, $aggregate_urn);
    return undef
	if (!defined($aggobj));

    $self->{'AGGREGATES'}->{$aggregate_urn} = $aggobj;
    return $aggobj;
}

#
# Locate the aggregate for a nodeid
#
sub FindAggregateByNodeId($$)
{
    my ($self, $node_id) = @_;
    my @slivers = $self->AggregateList();
    if (!@slivers) {
	return undef;
    }
    foreach my $sliver (@slivers) {
	my $manifest = GeniXML::Parse($sliver->manifest());
	if (! defined($manifest)) {
	    print STDERR "Could not parse manifest for $sliver\n";
	    return -1;
	}
	foreach my $ref (GeniXML::FindNodes("n:node",
					    $manifest)->get_nodelist()) {
	    my $client_id = GeniXML::GetVirtualId($ref);
	    if (defined($client_id) && $client_id eq $node_id) {
		if (wantarray) {
		    return ($sliver, $manifest);
		}
		return $sliver;
	    }
	}
    }
    return undef;
}

sub WriteCredentials($$)
{
    my ($self, $directory) = @_;
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();

    if (! (defined($geniuser) && defined($slice))) {
	fatal("Could not lookup geniuser or slice");
    }

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    if (! (defined($speaksfor_credential) &&
	   defined($slice_credential))) {
	fatal("Could not create credentials");
    }

    my $credfile = "$directory/slicecred.xml";
    unlink($credfile)
	if (-e $credfile);
    open(XML, ">$credfile") or
	fatal("Could not create $credfile");
    print XML $slice_credential->asString();
    close(XML);
    
    $credfile = "$directory/speaksforcred.xml";
    unlink($credfile)
	if (-e $credfile);
    open(XML, ">$credfile") or
	fatal("Could not create $credfile");
    print XML $speaksfor_credential->asString();
    close(XML);

    #
    # We do not generally need this, but might as well generate it,
    # since we do not easily know if the stitcher is going to contact
    # the AL2S aggregate, which does not support speaksfor.
    #
    $credfile = "$directory/al2scred.xml";
    my $authcred = APT_Geni::GenAuthCredential($slice);
    if (!defined($authcred)) {
	print STDERR "Could not general auth cred!\n";
	return -1;
    }
    unlink($credfile)
	if (-e $credfile);
    open(XML, ">$credfile") or
	fatal("Could not create $credfile");
    print XML $authcred->asString();
    close(XML);
    
    return 0;
}

#
# Build a set of sshkeys.
#
sub GetSSHKeys($$)
{
    my ($self, $pref) = @_;
    my $rval;
    my @keys;

    my $geniuser = $self->GetGeniUser();
    return -1
	if (!defined($geniuser));
    my $project  = $self->GetProject();
    return -1
	if (!defined($project));

    if ($geniuser->GetKeyBundle(\@keys, 1) < 0 || !@keys) {
	print STDERR "No ssh keys for $geniuser\n";
	return -1;
    }

    #
    # CM format.
    #
    $rval = [{'urn'   => $geniuser->urn(),
	      'login' => $geniuser->uid(),
	      'keys'  => [ @keys ]
	     }];

    if (! ($project->pid() eq $APT_HOLDINGPROJECT ||
	   $project->pid() eq $CLOUD_HOLDINGPROJECT)) {
	#
	# Get other users from the project. Real local users are easy,
	# nonlocal users from the GPO portal are messy.
	#
	my @members;
	if ($project->GetProjectGroup()->MemberList(\@members)) {
	    print STDERR "Error getting memberlist for $project\n";
	}
	else {
	    foreach my $member (@members) {
		next
		    if ($member->SameUser($geniuser->emulab_user()));
	    
		my $guser = GeniUser->CreateFromLocal($member);
		next
		    if (!defined($guser));

		#
		# So, users coming in from the trusted signer have their keys
		# at their home portal. We download those keys whenever they
		# log in, and cache them in their local stub account, but they
		# could be out of date. But in order to refresh those keys, we
		# would need a valid (not expired) speaks-for credential, which
		# we might have, but typically not since they have short expire
		# times. So, lets not worry about this right now, just use the
		# cached keys and see who complains.
		#
		@keys = ();
		if ($guser->GetKeyBundle(\@keys, 1) < 0 || !@keys) {
		    print STDERR "No ssh keys for $guser\n";
		    next;
		}
		push(@{$rval}, {'urn'   => $guser->urn(),
				'login' => $guser->uid(),
				'keys'  => [ @keys ]
		               });
	    }
	}
    }
    $$pref = $rval;
    return 0;
}

#
# Update the image status in the webtask for the instance. This is not
# clean at all, need a better way to do this.
#
sub UpdateImageStatus($$)
{
    my ($self, $details) = @_;

    DBQueryWarn("lock tables web_tasks write, apt_instances write, ".
		"            apt_instance_aggregates write")
	or return {};

    $self->Refresh();
    if ($self->status() ne "imaging") {
	goto done;
    }
    my $webtask = WebTask->LookupByObject($self->uuid());
    if (!defined($webtask)) {
	goto done;
    }
    #
    # This will need to change; we can get updates from polling or
    # from the event stream. The events are processed out of band from
    # from the polling, so we have a consistency problem. In addition,
    # the event stream is sending status for just a single node since
    # events are bounded in size.
    #
    # In other words, the new image status has to be merged into the
    # existing status. We have use some kind of lock to avoid scrambling
    # the json data, and for now it is a table lock.
    #
    # Also, the blob has a timestamp in it, so we can sorta tell which
    # is most recent (not perfect, but does not really need to be).
    #
    if (defined($webtask->image_stamp()) &&
	defined($details->{'utc'}) &&
	$details->{'utc'} < $webtask->image_stamp()) {
	goto done;
    }
    $webtask->image_size($details->{'size'});
    $webtask->image_status($details->{'status'});
    $webtask->image_stamp($details->{'utc'});
    $webtask->Store();
  done:
    DBQueryWarn("unlock tables");
    return 0;
}

###################################################################
package APT_Instance::Aggregate;
use emdb;
use WebTask;
use Carp;
use POSIX qw(tmpnam);
use English;
use GeniResponse;
use Genixmlrpc;
use GeniXML;
use GeniHRN;
use APT_Geni;
use Data::Dumper;
use vars qw($AUTOLOAD);
use overload ('""' => 'Stringify');

#
# Lookup and create a class instance to return.
#
sub Lookup($$$)
{
    my ($class, $instance, $urn) = @_;
    my $uuid = $instance->uuid();

    my $query_result =
	DBQueryWarn("select * from apt_instance_aggregates ".
		    "where uuid='$uuid' and aggregate_urn='$urn'");
    return undef
	if (! (defined($query_result) && $query_result->numrows));

    my $self            = {};
    $self->{'FAKE'}     = 0;
    $self->{'DBROW'}    = $query_result->fetchrow_hashref();
    $self->{'HASH'}     = {};
    $self->{'INSTANCE'} = $instance;
    bless($self, $class);

    # Handy;
    $self->{'AGGURN'}   = GeniHRN->new($self->aggregate_urn());

    # Kludge
    $self->{'ISAL2S'}   = ($self->aggregate_urn() =~ /al2s/ ? 1 : 0);

    my $webtask = WebTask->Lookup($self->webtask_id());
    return $self
	if (!defined($webtask));
    $self->{'WEBTASK'} = $webtask;
    $webtask->AutoStore(1);
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or confess "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'DBROW'}->{$name})) {
	return $self->{'DBROW'}->{$name};
    }
    # Or it is for a local storage slot.
    if ($name =~ /^_.*$/) {
	if (scalar(@_) == 2) {
	    return $self->{'HASH'}->{$name} = $_[1];
	}
	elsif (exists($self->{'HASH'}->{$name})) {
	    return $self->{'HASH'}->{$name};
	}
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}
sub webtask($)	        { return $_[0]->{'WEBTASK'}; }
sub instance($)	        { return $_[0]->{'INSTANCE'}; }
sub domain($)		{ return $_[0]->{'AGGURN'}->domain(); }
sub isAL2S($)           { return $_[0]->{'ISAL2S'}; }

# Backwards compat for a while
sub GenTemp($$)
{
    my ($class, $instance) = @_;
    my $webtask = WebTask->LookupByObject($instance->uuid());
    if (!defined($webtask)) {
	$webtask = WebTask->Create($instance->uuid());
    }
    $webtask->AutoStore(1);
    
    my $self            = {};
    $self->{'FAKE'}     = 1;
    $self->{'DBROW'}    = {
	"uuid" => $instance->uuid(),
	"name" => $instance->name(),
	"aggregate_urn" => $instance->aggregate_urn(),
	"status" => $instance->status(),
	"public_url" => $instance->public_url(),
	"manifest" => $instance->manifest(),
	"webtask_id" => $webtask->task_id(),
    };
    $self->{'INSTANCE'} = $instance;
    $self->{'WEBTASK'}  = $webtask;
    $self->{'HASH'}     = {};
    $self->{'ISAL2S'}   = 0;
    bless($self, $class);
    
    return $self;
}

#
# Lookup all aggregates for an instance
#
sub LookupForInstance($$)
{
    my ($class, $instance) = @_;
    my $result = {};
    my $uuid   = $instance->uuid();

    my $query_result =
	DBQueryWarn("select aggregate_urn from apt_instance_aggregates ".
		    "where uuid='$uuid'");
    return ()
	if (! (defined($query_result) && $query_result->numrows));

    while (my ($aggregate_urn) = $query_result->fetchrow_array()) {
	my $agg = Lookup($class, $instance, $aggregate_urn);
	if (!defined($agg)) {
	    print STDERR "No apt_instance_aggregate for $uuid/$aggregate_urn\n";
	    return ();
	}
	$result->{$aggregate_urn} = $agg;
    }
    return $result;
}

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'INSTANCE'} = undef;
    $self->{'DBROW'}    = undef;
    $self->{'WEBTASK'}  = undef;
    $self->{'HASH'}     = undef;
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $uuid  = $self->uuid();
    my $urn   = $self->aggregate_urn();

    return "[APT_Instance::Aggregate: $uuid, $urn]";
}

#
# Create an Instance Aggregate.
#
sub Create($$$)
{
    my ($class, $instance, $aggregate_urn) = @_;
    my $instance_uuid = $instance->uuid();
    my $instance_name = $instance->name();

    my $webtask = WebTask->Create(undef);
    return undef
	if (!defined($webtask));
    my $webtask_id = $webtask->task_id();

    DBQueryWarn("insert into apt_instance_aggregates set ".
		"  uuid='$instance_uuid', name='$instance_name', ".
		"  webtask_id='$webtask_id', ".
		"  aggregate_urn='$aggregate_urn', status='created'")
	or return undef;

    return Lookup($class, $instance, $aggregate_urn);
}

#
# Delete by instance aggregate
#
sub Delete($)
{
    my ($self) = @_;
    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();
    
    $self->webtask()->Delete();
    return 0
	if ($self->{'FAKE'});
    
    DBQueryWarn("delete from apt_instance_aggregates ".
		"where uuid='$uuid' and aggregate_urn='$urn'")
	or return -1;

    return 0;
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();
    
    my $query_result =
	DBQueryWarn("select * from apt_instance_aggregates ".
		    "where uuid='$uuid' and aggregate_urn='$urn'");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'DBROW'} = $query_result->fetchrow_hashref();

    return -1
	if ($self->webtask()->Refresh());

    return 0;
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();

    my $query = "update apt_instance_aggregates set ".
	join(",", map("$_=" . DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    $query .= " where uuid='$uuid' and aggregate_urn='$urn'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

sub SetStatus($$)
{
    my ($self,$status) = @_;

    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();

    DBQueryWarn("update apt_instance_aggregates set status='$status' ".
		"where uuid='$uuid' and aggregate_urn='$urn'") or
	return -1;

    $self->{'DBROW'}->{'status'} = $status;
    return 0;
    
}
sub SetPublicURL($$)
{
    my ($self,$url) = @_;
    my $safe_url = DBQuoteSpecial($url);

    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();

    DBQueryWarn("update apt_instance_aggregates set public_url=$safe_url ".
		"where uuid='$uuid' and aggregate_urn='$urn'") or
	return -1;

    $self->{'DBROW'}->{'public_url'} = $url;
    return 0;
    
}
sub SetManifest($$)
{
    my ($self,$manifest_string) = @_;

    my $uuid = $self->uuid();
    my $urn  = $self->aggregate_urn();

    #
    # Jacks cannot handle the stitching section, so remove it for now.
    #
    my $manifest = GeniXML::Parse($manifest_string);
    if (! defined($manifest)) {
	print STDERR "Could not parse manifest for $urn\n";
	print STDERR $manifest_string;
	return -1;
    }
    my $stitching = GeniXML::FindNodesNS("n:stitching",
					 $manifest, $GeniXML::STITCH_NS)->pop();
    if (defined($stitching)) {
	$manifest->removeChild($stitching);
	$manifest_string = GeniXML::Serialize($manifest);
    }
    my $safe_manifest = DBQuoteSpecial($manifest_string);

    DBQueryWarn("update apt_instance_aggregates set manifest=$safe_manifest ".
		"where uuid='$uuid' and aggregate_urn='$urn'") or
	return -1;

    $self->{'DBROW'}->{'manifest'} = $manifest_string;
    return 0;
}

sub GetGeniAuthority($)
{
    my ($self) = @_;
    require GeniAuthority;

    return APT_Geni::GetAuthority($self->aggregate_urn());
}

#
# Update the sliverstatus in the webtask. 
#
sub UpdateWebStatus($$)
{
    my ($self, $hash) = @_;

    DBQueryWarn("lock tables web_tasks write")
	or return {};

    $self->webtask()->Refresh();
    my $current = $self->webtask()->sliverstatus();
    if (!defined($current)) {
	$current = {};
    }

    #
    # This will need to change; we can get updates from polling or
    # from the event stream. The events are processed out of band from
    # from the polling, so we have a consistency problem. In addition,
    # the event stream is sending status for just a single node since
    # events are bounded in size.
    #
    # In other words, the new node state has to be merged into the
    # existing status. We have use some kind of lock to avoid scrambling
    # the json data, and for now it is a table lock.
    #
    # Also, the blob has a timestamp in it, so we can sorta tell which
    # is most recent (not perfect, but does not really need to be).
    #
    foreach my $urn (keys(%{ $hash })) {
	my $details = $hash->{$urn};
	my $node_id = $details->{'client_id'};
	
	if (!exists($current->{$node_id}) ||
	    !exists($current->{$node_id}->{"utc"}) ||
	    !exists($details->{"utc"}) ||
	    $details->{"utc"} >= $current->{$node_id}->{"utc"}) {
	    $current->{$node_id} = $details;
	}
    }
    $self->webtask()->sliverstatus($current);
    DBQueryWarn("unlock tables");
    return $current;
}

#
# Ask aggregate to terminate a sliver.
#
sub Terminate($)
{
    my ($self) = @_;
    my $method;
    my @params;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    #
    # If the slice is expired, it is most likely gone at the cluster,
    # but we want to make sure, so change the expiration so that the
    # credential we generate is not also expired. 
    #
    if ($slice->IsExpired()) {
	$slice->SetExpiration(time() + 3600);
    }
    # We might change this below.
    my $cmurl = $authority->url();

    if ($self->isAL2S()) {
	my $slice_credential = APT_Geni::GenAuthCredential($slice);
	if (!defined($slice_credential)) {
	    print STDERR "Could not generate slice credential\n";
	    return undef;
	}
	$method = "DeleteSliver";
	@params = ($slice->urn(), [$slice_credential->asString()], {});
    }
    else {
	my $credentials;
	my ($slice_credential, $speaksfor_credential) =
	    APT_Geni::GenCredentials($slice, $geniuser);
	return undef
	    if (! (defined($speaksfor_credential) &&
		   defined($slice_credential)));
	#
	# Special case; if the speaksfor_credential has expired cause it
	# was for a nonlocal user, we have no choice but to throw away
	# these credentials and generate a new one issued to the local SA
	# instead of the user. 
	#
	if ($speaksfor_credential->IsExpired()) {
	    print STDERR
		"speaksfor credential has expired, generating a new one\n";

	    $slice_credential = APT_Geni::GenAuthCredential($slice);
	    if (!defined($slice_credential)) {
		print STDERR "Could not generate slice credential\n";
		return undef;
	    }
	    $credentials = [$slice_credential->asString()];
	}
	else {
	    $credentials = [$slice_credential->asString(),
			    $speaksfor_credential->asString()];
	}
	$method = "DeleteSliver";
	@params = ($slice->urn(), $credentials,
		   {"blocking" => 'true',
		    "cancel"   => 'true'});
	
	# Convert URL to use AM interface.
	$cmurl =~ s/\/cm$/\/am/;
	$cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);
    }

    #
    # Hmm, we have to bump this up a bunch, since we are using blocking
    # Terminate at IG aggregates, and that can take a while. It actually
    # does not affect the remote cluster if this times out (it will still
    # terminate just fine), but lets avoid local error messages.
    #
    Genixmlrpc->SetTimeout(900);

    #
    # We have to watch for resource busy errors, and retry. For a while
    # at least. Eventually give up cause it might be a permanently locked
    # slice cause of earlier error. 
    #
    my $response;
    my $tries = 10;
    while ($tries) {
	$response =
	    Genixmlrpc::CallMethod($cmurl, $context, $method, @params);

	# SEARCHFAILED is success.
	return $response
	    if ($response->code() == GENIRESPONSE_SUCCESS ||
		$response->code() == GENIRESPONSE_SEARCHFAILED);

	return $response
	    if ($response->code() != GENIRESPONSE_BUSY);

	#
	# Wait for a while and try again. 
	#
	$tries--;
	if ($tries) {
	    print STDERR "Slice is busy, will retry again in a bit ...\n";
	    sleep(30);
	}
    }
    return $response;
}

#
# Ask to extend. 
#
sub Extend($$)
{
    my ($self, $new_expires) = @_;
    my $credentials;
    my $method;
    my @params;
    my $urn       = $self->aggregate_urn();
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    if ($self->isAL2S()) {
	my $slice_credential = APT_Geni::GenAuthCredential($slice);
	if (!defined($slice_credential)) {
	    print STDERR "Could not generate slice credential\n";
	    return undef;
	}
	$method = "RenewSliver";
	@params = ($slice->urn(), [$slice_credential->asString()],
		   $new_expires, {});
    }
    else {
	my ($slice_credential, $speaksfor_credential) =
	    APT_Geni::GenCredentials($slice, $geniuser);
	return undef
	    if (! (defined($speaksfor_credential) &&
		   defined($slice_credential)));
	
	#
	# Special case; if the speaksfor_credential has expired cause it
	# was for a nonlocal user, we have no choice but to throw away
	# these credentials and generate a new one issued to the local SA
	# instead of the user. 
	#
	if ($speaksfor_credential->IsExpired()) {
	    print STDERR "speaksfor credential expired, generating a new one\n";

	    $slice_credential = APT_Geni::GenAuthCredential($slice);
	    if (!defined($slice_credential)) {
		print STDERR "Could not generate slice credential\n";
		return undef;
	    }
	    $credentials = [$slice_credential->asString()];
	}
	else {
	    $credentials = [$slice_credential->asString(),
			    $speaksfor_credential->asString()];
	}
	#
	# We need a special credentential in case the aggregate is enforcing
	# limits (as do Utah aggregates).
	#
	my $slice_urn = $slice->urn();
	my $extcred   = "";
	my $credname  = tmpnam();
	my $userarg   = "-u " . $geniuser->urn();
	my ($fh,$certfile);
	#
	# But if a nonlocal user from Geni, then the user we have in
	# the database is not in the same domain as the speaksfor, so
	# we use the geni certificate that the trusted signer gave us
	# and is stored in the DB.
	#
	if ($geniuser->IsLocal() && $geniuser->emulab_user()->IsNonLocal() &&
	    !$speaksfor_credential->IsExpired()) {	
	    my (undef, $certificate_string) =
		$geniuser->emulab_user()->GetStoredCredential();
	    if (! defined($certificate_string)) {
		print STDERR "Could not get stored certificate for $geniuser\n";
		return undef;
	    }
	    my $certificate =
		GeniCertificate->LoadFromString($certificate_string);
	    if (!defined($certificate)) {
		print STDERR
		    "Could not load stored certificate for $geniuser\n";
		return undef;
	    }
	    # This file will be auto deleted.
	    $certfile = $certificate->WriteToFile();
	    $userarg = "-c $certfile";
	}
	system("$GENEXTENDCRED -a -o $credname -s $slice_urn -t 180 $userarg");
	if ($?) {
	    print STDERR "Could not create extended credential\n";
	    return undef;
	}
	if (!open(EXT, $credname)) {
	    print STDERR "Could not open ext credfile $credname\n";
	    return undef;
	}
	while (<EXT>) {
	    $extcred .= $_;
	}
	close(EXT);
	unlink($credname);
	chomp($extcred);

	@params = ({"slice_urn"   => $slice->urn(),
		    "expiration"  => $new_expires,
		    "credentials" => [@$credentials, $extcred],
		   });
	$method = "RenewSlice";
    }
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $tries = 10;
    my $response;
    while ($tries) {
	$response = Genixmlrpc::CallMethod($cmurl, $context, $method, @params);

	return undef
	    if (!defined($response));

	if ($response->code() != GENIRESPONSE_SUCCESS) {
	    if (($response->code() == GENIRESPONSE_SERVER_UNAVAILABLE ||
		 $response->code() == GENIRESPONSE_BUSY) &&
		$tries >= 0) {
		print STDERR "Server for $urn reports too busy or slice busy, ".
		    "waiting a while ...\n";
		sleep(int(rand(20)) + 10);
		$tries--;
		next;
	    }
	}
	last;
    }
    return $response;
}

#
# Ask for status.
#
sub SliceStatus($)
{
    my ($self) = @_;
    my @params;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    if ($self->isAL2S()) {
	my $slice_credential = APT_Geni::GenAuthCredential($slice);
	if (!defined($slice_credential)) {
	    print STDERR "Could not generate slice credential\n";
	    return undef;
	}
	@params = ($slice->urn(), [$slice_credential->asString()], {});
    }
    else {
	my ($slice_credential, $speaksfor_credential) =
	    APT_Geni::GenCredentials($slice, $geniuser);
	return undef
	    if (! (defined($speaksfor_credential) &&
		   defined($slice_credential)));

	@params = ({"slice_urn"   => $slice->urn(),
		    "credentials" => [$slice_credential->asString(),
				      $speaksfor_credential->asString()],
		   });
    }
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response =
	Genixmlrpc::CallMethod($cmurl, $context, "SliverStatus", @params);

    return $response
	if (!defined($response) ||
	    $response->code() != GENIRESPONSE_SUCCESS ||
	    !$self->isAL2S());

    # Convert AM V2 to CM V3. Not such a great idea.
    my $blob = {"details" => {},
		"status"  => (exists($response->value()->{'geni_status'}) ?
			      $response->value()->{'geni_status'} : "unknown"),
    };
    return GeniResponse->new($response->code(), $blob);
}

#
# Ask for the manifest
#
sub GetManifest($)
{
    my ($self) = @_;
    my $credentials;
    my $method;
    my @params;
    my $authority = $self->GetGeniAuthority();
    my $urn       = $self->aggregate_urn();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    if ($self->isAL2S()) {
	my $slice_credential = APT_Geni::GenAuthCredential($slice);
	if (!defined($slice_credential)) {
	    print STDERR "Could not generate slice credential\n";
	    return undef;
	}
	$method = "ListResources";

	# This breaks, cause perl encodes '3' as an integer, but the
	# python on the other side demands a string. 
	@params = ([$slice_credential->asString()],
		   {"geni_slice_urn" => $slice->urn(),
		    "geni_rspec_version" => {'version' => '3',
					     'type'    => 'GENI'},
		   });
    }
    else {
	my ($slice_credential, $speaksfor_credential) =
	    APT_Geni::GenCredentials($slice, $geniuser);
	return undef
	    if (! (defined($speaksfor_credential) &&
		   defined($slice_credential)));

	$method = "Resolve";
	@params = ({"urn"   => $slice->urn(),
		    "credentials" => [$slice_credential->asString(),
				      $speaksfor_credential->asString()]});
    }
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $tries = 10;
    my $response;
    while ($tries) {
	$response =
	    Genixmlrpc::CallMethod($cmurl, $context, $method, @params);

	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
	    if (defined($response) &&
		($response->code() == GENIRESPONSE_SERVER_UNAVAILABLE ||
		 $response->code() == GENIRESPONSE_BUSY) &&
		$tries >= 0) {
		print STDERR "Server for $urn reports too busy or slice busy, ".
		    "waiting a while ...\n";
		sleep(int(rand(20)) + 10);
		$tries--;
		next;
	    }
	    print STDERR "Resolve failed on $urn: ".
		(defined($response) ? $response->output() : "") . "\n";
	    return undef;
	}
	last;
    }
    return $response->value()
	if ($self->isAL2S());
    return undef
	if (! exists($response->value()->{'manifest'}));
    return $response->value()->{'manifest'};
}

sub Provision($$$$)
{
    my ($self, $perrmsg, $users, $cert, $key) = @_;
    my $authority = $self->GetGeniAuthority();
    my $urn       = $self->aggregate_urn();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return -1
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return -1
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    #
    # AM V3 API.
    #
    my @params = ([$slice->urn()],
		  [{"geni_type" => "geni_sfa",
		    "geni_version" => 3,
		    "geni_value" => $speaksfor_credential->asString()},
		   {"geni_type" => "geni_sfa",
		    "geni_version" => 3,
		    "geni_value" => $slice_credential->asString()},
		  ],
		  # Options array.
		  {"speaking_for" => $geniuser->urn(),
		   "geni_speaking_for" => $geniuser->urn(),
		   "geni_users"       => $users,
		   "geni_certificate" => $cert,
		   "geni_key"         => $key,
		  });
 
    my $cmurl = $authority->url();
    # Convert URL.
    $cmurl =~ s/\/cm$/\/am/;
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);
    $cmurl .= "/3.0";

    my $tries = 10;
    while ($tries) {
	my $response =
	    Genixmlrpc::CallMethod($cmurl, $context, "Provision", @params);

	if (defined($response) && defined($response->logurl())) {
	    $self->SetPublicURL($response->logurl());
	}
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
	    if (defined($response) &&
		($response->code() == GENIRESPONSE_SERVER_UNAVAILABLE ||
		 $response->code() == GENIRESPONSE_BUSY) &&
		$tries >= 0) {
		print STDERR "Server for $urn reports too busy or slice busy, ".
		    "waiting a while ...\n";
		sleep(int(rand(20)) + 10);
		$tries--;
		next;
	    }
	    $$perrmsg = $response->output()
		if (defined($response));
	    return -1;
	}
	last;
    }
    return 0;
}

#
# Ask aggregate for the console URL for a node.
#
sub ConsoleInfo($$)
{
    my ($self, $sliver_urn) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"sliver_urn"  => $sliver_urn,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "ConsoleInfo", $args);
}

#
# Grab the use-once console URL. Deprecated.
#
sub ConsoleURL($$)
{
    my ($self, $sliver_urn) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"sliver_urn"  => $sliver_urn,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "ConsoleURL", $args);
}

#
# Create an Image,
#
sub CreateImage($$$$;$$$)
{
    my ($self, $sliver_urn, $imagename, $update_prepare,
	$copyback_uuid, $bsname) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"imagename"   => $imagename,
	"sliver_urn"  => $sliver_urn,
	"global"      => 1,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    $args->{'bsname'} = $bsname
	if (defined($bsname));
    $args->{'update_prepare'} = 1
	if ($update_prepare);
    $args->{'copyback_uuid'} = $copyback_uuid
	if (defined($copyback_uuid));

    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);
    
    return Genixmlrpc::CallMethod($cmurl, $context, "CreateImage", $args);
}

#
# Reboot some nodes
#
sub SliverAction($$$@)
{
    my ($self, $perrmsg, $which, @slivers) = @_;
    my $method    = ($which eq "reboot" ? "RestartSliver" :
		     ($which eq "start" ? "StartSliver" : "ReloadSliver"));
    my $authority = $self->GetGeniAuthority();
    my $urn       = $self->aggregate_urn();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    if (@slivers) {
	$args->{"sliver_urns"} = \@slivers;
    }
    else {
	$args->{"slice_urn"} = $slice->urn();
    }
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response;
    my $tries = 5;
    while ($tries) {
	$response = Genixmlrpc::CallMethod($cmurl, $context, $method, $args);
	
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
	    if (defined($response) &&
		($response->code() == GENIRESPONSE_SERVER_UNAVAILABLE ||
		 $response->code() == GENIRESPONSE_BUSY) &&
		$tries >= 0) {
		print STDERR "Server for $urn reports too busy or slice busy, ".
		    "waiting a while ...\n";
		sleep(int(rand(20)) + 10);
		$tries--;
		next;
	    }
	    $$perrmsg = $response->output()
		if (defined($response));
	    return $response;
	}
	last;
    }
    return $response;
}

#
# Lockdown
#
sub Lockdown($$)
{
    my ($self, $clear) = @_;
    my $authority = $self->GetGeniAuthority();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    my $oldexpires;
    return undef
	if (! (defined($authority) &&
	       defined($slice) && defined($context)));

    #
    # If the slice is expired, then the credential we generate will
    # not be valid. So extend the slice so we can clear the lockdown.
    #
    if ($clear && $slice->IsExpired()) {
	$oldexpires = $slice->expires();
	$slice->SetExpiration(time() + 3600);
    }

    my $slice_credential = APT_Geni::GenAuthCredential($slice);
    goto bad
	if (! defined($slice_credential));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => [$slice_credential->asString()],
    };
    $args->{"clear"} = 1
	if ($clear);
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response = Genixmlrpc::CallMethod($cmurl, $context, "Lockdown", $args);
    $slice->SetExpiration($oldexpires)
	if (defined($oldexpires));
    return $response;
  bad:
    $slice->SetExpiration($oldexpires)
	if (defined($oldexpires));
    return undef;
}

#
# Panic
#
sub Panic($$)
{
    my ($self, $clear) = @_;
    my $authority = $self->GetGeniAuthority();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    my $oldexpires;
    return undef
	if (! (defined($authority) &&
	       defined($slice) && defined($context)));

    #
    # If the slice is expired, then the credential we generate will
    # not be valid. So extend the slice so we can clear the panic.
    #
    if ($clear && $slice->IsExpired()) {
	$oldexpires = $slice->expires();
	$slice->SetExpiration(time() + 3600);
    }

    my $slice_credential = APT_Geni::GenAuthCredential($slice);
    goto bad
	if (! defined($slice_credential));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => [$slice_credential->asString()],
    };
    $args->{"clear"} = 1
	if ($clear);
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response = Genixmlrpc::CallMethod($cmurl, $context, "Panic", $args);
    $slice->SetExpiration($oldexpires)
	if (defined($oldexpires));
    return $response;
  bad:
    $slice->SetExpiration($oldexpires)
	if (defined($oldexpires));
    return undef;
}

#
# Control Linktest
#
sub RunLinktest($$$)
{
    my ($self, $action, $level) = @_;
    my $authority = $self->GetGeniAuthority();
    my $urn       = $self->aggregate_urn();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    if ($action eq "stop") {
	$args->{"action"} = "stop";
    }
    elsif ($action eq "status") {
	$args->{"action"} = "status";
    }
    else {
	$args->{"action"} = "start";
	$args->{"async"}  = 1;
	$args->{"level"}  = $level;
    }
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    my $response = Genixmlrpc::CallMethod($cmurl,
					  $context, "RunLinktest", $args);
    return $response;
  bad:
    return undef;
}

#
# Ask for Image Imfo
#
sub ImageInfo($$)
{
    my ($self, $image_urn) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->instance()->GetGeniUser();
    my $slice     = $self->instance()->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"image_urn"   => $image_urn,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "ImageInfo", $args);
}

# _Always_ make sure that this 1 is at the end of the file...
1;
