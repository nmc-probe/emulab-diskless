#!/usr/bin/perl -wT
#
# Copyright (c) 2007-2015 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
package APT_Instance;

use strict;
use Carp;
use English;
use Data::Dumper;
use POSIX qw(tmpnam);
use Exporter;
use vars qw(@ISA @EXPORT $AUTOLOAD);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use EmulabConstants;
use emdb;
use libtestbed;
use Brand;
use APT_Profile;
use APT_Geni;
use Genixmlrpc;
use GeniResponse;
use GeniCertificate;
use GeniCredential;
use GeniHRN;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $GENEXTENDCRED = "$TB/sbin/protogeni/genextendcred";

# Cache of instances to avoid regenerating them.
my %instances  = ();
my $debug      = 0;

# Debugging
my $usemydevtree  = 0;

#
# Lookup by uuid.
#
sub Lookup($$;$)
{
    my ($class, $uuid) = @_;

    if ($uuid !~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	return undef
    }

    # Look in cache first
    return $instances{"$uuid"}
        if (exists($instances{"$uuid"}));
    
    my $query_result =
	DBQueryWarn("select * from apt_instances where uuid='$uuid'");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self            = {};
    $self->{'INSTANCE'} = $query_result->fetchrow_hashref();
    $self->{'BRAND'}    = Brand->Create($self->{'INSTANCE'}->{'servername'});

    bless($self, $class);
    
    # Add to cache. 
    $instances{"$uuid"} = $self;
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or confess "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'INSTANCE'}->{$name})) {
	return $self->{'INSTANCE'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}
sub Brand($)	{ return $_[0]->{'BRAND'}; }
sub isAPT($)	{ return $_[0]->Brand()->isAPT() ? 1 : 0; }
sub isCloud($)	{ return $_[0]->Brand()->isCloud() ? 1 : 0; }

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'INSTANCE'} = undef;
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    
    my $query_result =
	DBQueryWarn("select * from apt_instances where uuid='$uuid'");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'INSTANCE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create an Instance
#
sub Create($$)
{
    my ($class, $argref) = @_;
    my $uuid;

    if (exists($argref->{'uuid'})) {
	$uuid = $argref->{'uuid'};
	delete($argref->{'uuid'});
    }
    else {
	$uuid = NewUUID();
    }

    #
    # The uuid has to be unique, so lock the table for the check/insert.
    #
    DBQueryWarn("lock tables apt_instances write")
	or return undef;

    my $query_result =
	DBQueryWarn("select uuid from apt_instances where uuid='$uuid'");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	tberror("Instance uuid $uuid already exists!");
	return undef;
    }

    my $query = "insert into apt_instances set created=now(),uuid='$uuid', ".
	join(",", map("$_=" .
		      DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    if (! DBQueryWarn($query)) {
	DBQueryWarn("unlock tables");
	tberror("Error inserting new apt_instance record for $uuid!");
	return undef;
    }
    DBQueryWarn("unlock tables");
    return Lookup($class, $uuid);
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $uuid  = $self->uuid();

    return "[APT_Instance: $uuid]";
}

sub LookupBySlice($$)
{
    my ($class, $token) = @_;
    my $slice_uuid;

    if ($token =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/) {
	$slice_uuid = $token;
    }
    elsif (GeniHRN::IsValid($token)) {
	#
	# We should put the slice_urn into the apt_instances table.
	#
	require GeniSlice;
	my $slice = GeniSlice->Lookup($token);
	return undef
	    if (!defined($slice));
	$slice_uuid = $slice->uuid();
    }
    else {
	return undef;
    }

    my $query_result =
	DBQueryWarn("select uuid from apt_instances ".
		    "where slice_uuid='$slice_uuid'");
	
    return undef
	if (!$query_result || !$query_result->numrows);

    my ($uuid) = $query_result->fetchrow_array();
    return APT_Instance->Lookup($uuid);
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    my $query = "update apt_instances set ".
	join(",", map("$_=" . DBQuoteSpecial($argref->{$_}), keys(%{$argref})));

    $query .= " where uuid='$uuid'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

sub Delete($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("delete from apt_instances where uuid='$uuid'") or
	return -1;

    return 0;
}

#
# Lock and unlock operate on the underlying slice.
#
sub Lock($)
{
    my ($self) = @_;
    my $slice  = $self->GetGeniSlice();
    if (!defined($slice)) {
	return -1;
    }
    return $slice->Lock();
}
sub Unlock($)
{
    my ($self) = @_;
    my $slice  = $self->GetGeniSlice();
    if (!defined($slice)) {
	return -1;
    }
    return $slice->UnLock();
}

sub SetStatus($$)
{
    my ($self,$status) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("update apt_instances set status='$status' ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{'status'} = $status;
    return 0;
    
}
sub SetPublicURL($$)
{
    my ($self,$url) = @_;
    my $safe_url = DBQuoteSpecial($url);

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();

    DBQueryWarn("update apt_instances set public_url=$safe_url ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{'public_url'} = $url;
    return 0;
    
}
sub SetManifest($$)
{
    my ($self,$manifest) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    my $safe_manifest = DBQuoteSpecial($manifest);    

    DBQueryWarn("update apt_instances set manifest=$safe_manifest ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{'manifest'} = $manifest;
    return 0;
}

#
# Set/Clear the lockdown bits.
#
sub SetLockdown($$$)
{
    my ($self,$which,$clear) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $uuid = $self->uuid();
    if ($which eq "admin") {
	$which = "admin_lockdown";
    }
    elsif ($which eq "user") {
	$which = "user_lockdown";
    }
    else {
	return -1;
    }
    my $value = ($clear ? 0 : 1);

    DBQueryWarn("update apt_instances set ${which}=${value} ".
		"where uuid='$uuid'") or
	return -1;

    $self->{'INSTANCE'}->{$which} = $value;
    return 0;
}

# Return a URL for the status page.
sub webURL($)
{
    my ($self) = @_;
    my $link = $self->Brand()->wwwBase();
    $link    = $link . "/status.php?uuid=" . $self->uuid();

    return $link;
}

#
# Find the profile for this instance.
#
sub Profile($)
{
    my ($self) = @_;
    
    return APT_Profile->Lookup($self->profile_id(),
			       $self->profile_version());
}

#
# Record a history entry.
# We do this when the instance is terminated. 
#
sub RecordHistory($)
{
    my ($self) = @_;
    my $uuid = $self->uuid();

    DBQueryWarn("replace into apt_instance_history ".
		"select uuid,profile_id,profile_version,slice_uuid, ".
		"       creator,creator_idx,creator_uuid,pid,pid_idx, ".
		"       aggregate_urn,public_url,created,now(),servername, ".
		"       rspec,params,manifest ".
		" from apt_instances where uuid='$uuid'")
	or return -1;

    return 0;
}

#
# Locate Geni objects for creator and slice.
#
sub GetGeniSlice($)
{
    my ($self) = @_;
    require GeniSlice;
    
    return GeniSlice->Lookup($self->slice_uuid());
}

sub GetGeniUser($)
{
    my ($self) = @_;
    require GeniUser;
    
    return GeniUser->Lookup($self->creator_uuid(), 1);
}

sub GetGeniAuthority($)
{
    my ($self) = @_;
    require GeniAuthority;

    return APT_Geni::GetAuthority($self->aggregate_urn());
}

#
# Warn creator that the experiment is going to expire. This is hooked
# in from the sa_daemon, so we can send a message that is less geni like
# and more APT/Cloud.
#
sub WarnExpiring($$)
{
    my ($self, $when) = @_;
    require GeniDB;
    require GeniSlice;

    my $slice     = GeniSlice->Lookup($self->slice_uuid());;
    if (!defined($slice)) {
	print STDERR "WarnExpiring: No slice for $self\n";
	return -1;
    }
    my $slicename = $slice->slicename();
    my $geniuser  = GeniUser->Lookup($slice->creator_uuid(), 1);
    if (!defined($geniuser)) {
	print STDERR "WarnExpiring: No creator for $self\n";
	return -1;
    }
    if (!defined($geniuser->email())) {
	print STDERR "WarnExpiring: no email address for $geniuser\n";
	return 0;
    }
    my $link = $self->webURL();
    
    $self->Brand()->SendEmail($geniuser->email(),
		     "Your experiment is expiring soon!",
		     "Your experiment $slicename is going to expire in ${when}.\n".
		     "If you want to extend this experiment, please go to:\n\n".
		     "    $link\n\n".
		     "and click on the Extend button.\n".
		     "\n".
		     "Thanks!",
		     $self->Brand()->OpsEmailAddress());
    
    return 0;
}

#
# Ask aggregate for the console URL for a node.
#
sub ConsoleInfo($$)
{
    my ($self, $sliver_urn) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"sliver_urn"  => $sliver_urn,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "ConsoleInfo", $args);
}
sub ConsoleURL($$)
{
    my ($self, $sliver_urn) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"sliver_urn"  => $sliver_urn,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "ConsoleURL", $args);
}

#
# Ask aggregate to terminate.
#
sub Terminate($)
{
    my ($self) = @_;
    my $credentials;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    #
    # If the slice is expired, it is most likely gone at the cluster,
    # but we want to make sure, so change the expiration so that the
    # credential we generate is not also expired. 
    #
    if ($slice->IsExpired()) {
	$slice->SetExpiration(time() + 3600);
    }

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    #
    # Special case; if the speaksfor_credential has expired cause it
    # was for a nonlocal user, we have no choice but to throw away
    # these credentials and generate a new one issued to the local SA
    # instead of the user. 
    #
    if ($speaksfor_credential->IsExpired()) {
	print STDERR "speaksfor credential has expired, generating a new one\n";

	$slice_credential =
	    GeniCredential->CreateSigned($slice, $context,
					 $GeniCredential::LOCALSA_FLAG);
	if (!defined($slice_credential)) {
	    print STDERR "Could not generate SA credential\n";
	    return undef;
	}
	$credentials = [$slice_credential->asString()];
    }
    else {
	$credentials = [$slice_credential->asString(),
			$speaksfor_credential->asString()];
    }
    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => $credentials,
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    #
    # We have to watch for resource busy errors, and retry. For a while
    # at least. Eventually give up cause it might be a permanently locked
    # slice cause of earlier error. 
    #
    my $response;
    my $tries = 10;
    while ($tries) {
	$response =
	    Genixmlrpc::CallMethod($cmurl, $context, "DeleteSlice", $args);

	# SEARCHFAILED is success.
	return $response
	    if ($response->code() == GENIRESPONSE_SUCCESS ||
		$response->code() == GENIRESPONSE_SEARCHFAILED);

	return $response
	    if ($response->code() != GENIRESPONSE_BUSY);

	#
	# Wait for a while and try again. 
	#
	$tries--;
	if ($tries) {
	    print STDERR "Slice is busy, will retry again in a bit ...\n";
	    sleep(30);
	}
    }
    return $response;
}

#
# Ask to extend. 
#
sub Extend($$)
{
    my ($self, $new_expires) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    #
    # We need a special credentential in case the aggregate is enforcing
    # limits (as do Utah aggregates).
    #
    my $slice_urn = $slice->urn();
    my $extcred   = "";
    my $credname  = tmpnam();
    my $userarg   = "-u " . $geniuser->urn();
    my ($fh,$certfile);
    #
    # But if a nonlocal user from Geni, then the user we have in the database
    # is not in the same domain as the speaksfor, so we use the geni certificate
    # that the trusted signer gave us and is stored in the DB.
    #
    if ($geniuser->IsLocal() && $geniuser->emulab_user()->IsNonLocal()) {
	my (undef, $certificate_string) =
	    $geniuser->emulab_user()->GetStoredCredential();
	if (! defined($certificate_string)) {
	    print STDERR "Could not get stored certificate for $geniuser\n";
	    return undef;
	}
	my $certificate = GeniCertificate->LoadFromString($certificate_string);
	if (!defined($certificate)) {
	    print STDERR "Could not load stored certificate for $geniuser\n";
	    return undef;
	}
	$certfile = $certificate->WriteToFile();
	$userarg = "-c $certfile";
    }
    system("$GENEXTENDCRED -a -o $credname -s $slice_urn -t 180 $userarg");
    if ($?) {
	print STDERR "Could not create extended credential\n";
	return undef;
    }
    if (!open(EXT, $credname)) {
	print STDERR "Could not open ext credfile $credname\n";
	return undef;
    }
    while (<EXT>) {
	$extcred .= $_;
    }
    close(EXT);
    unlink($credname);
    chomp($extcred);

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"expiration"  => $new_expires,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString(),
			  $extcred],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "RenewSlice", $args);
}

#
# Create an Image,
#
sub CreateImage($$$;$)
{
    my ($self, $sliver_urn, $imagename, $bsname) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"imagename"   => $imagename,
	"sliver_urn"  => $sliver_urn,
	"global"      => 1,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    $args->{'bsname'} = $bsname
	if (defined($bsname));

    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);
    
    return Genixmlrpc::CallMethod($cmurl, $context, "CreateImage", $args);
}

#
# Ask for status.
#
sub SliceStatus($)
{
    my ($self) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "SliverStatus", $args);
}

#
# Reboot some nodes
#
sub SliverAction($$@)
{
    my ($self, $which, @slivers) = @_;
    my $method    = ($which eq "reboot" ? "RestartSliver" : "ReloadSliver");
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"sliver_urns" => \@slivers,
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, $method, $args);
}

#
# Lockdown
#
sub Lockdown($$)
{
    my ($self, $clear) = @_;
    my $authority = $self->GetGeniAuthority();
    my $geniuser  = $self->GetGeniUser();
    my $slice     = $self->GetGeniSlice();
    my $context   = APT_Geni::GeniContext();
    return undef
	if (! (defined($geniuser) && defined($authority) &&
	       defined($slice) && defined($context)));

    my ($slice_credential, $speaksfor_credential) =
	APT_Geni::GenCredentials($slice, $geniuser);
    return undef
	if (! (defined($speaksfor_credential) &&
	       defined($slice_credential)));

    my $args = {
	"slice_urn"   => $slice->urn(),
	"credentials" => [$slice_credential->asString(),
			  $speaksfor_credential->asString()],
    };
    $args->{"clear"} = 1
	if ($clear);
    my $cmurl = $authority->url();
    $cmurl =~ s/protogeni/protogeni\/stoller/ if ($usemydevtree);

    return Genixmlrpc::CallMethod($cmurl, $context, "Lockdown", $args);
}

# _Always_ make sure that this 1 is at the end of the file...
1;
