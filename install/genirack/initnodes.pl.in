#!/usr/bin/perl -w
#
# Copyright (c) 2000-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Socket;
use IO::Handle;     # thousands of lines just for autoflush :-(
use POSIX ":sys_wait_h";

#
# Setup management interfaces for nodes, given a data file we get
# from HP.
#
sub usage()
{
    print STDERR "Usage: initnodes.pl [-d] [-n] <datafile>\n";
    print STDERR "Usage: initnodes.pl [-d] [-n] -i <ip> <ilopswd>\n";
    exit(-1);
}
my $optlist	= "dni";
my $debug	= 0;
my $impotent    = 0;
my $ipmode      = 0;
my %ilomap      = ();
my %ctrlmap     = ();

#
# Configure variables
#
my $TB	      = "@prefix@";
my $TBOPS     = "@TBOPSEMAIL@";
my $LEASES    = "/var/db/dhcpd.leases";
my $SRCDIR    = "@srcdir@";
my $ADDMNG    = "$TB/sbin/management_iface";
my $DSAKEY    = "/root/.ssh/id_dsa";
my $SUDO      = "/usr/local/bin/sudo";
my $WAP       = "$TB/sbin/withadminprivs";

# Protos
sub Fatal($);

# un-taint path
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use Interface;

#
# Turn off line buffering on output
#
$| = 1;

#
# Parse command arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}

#
# Must be root if actually doing this.
#
if ($UID && !$impotent) {
    Fatal("This script must be run as root! Maybe use sudo?")
}

usage()
    if (@ARGV != 1);

#
# Read in the datafile.
#
my $datafile = $ARGV[0];
Fatal("$datafile does not exist")
    if (! -e $datafile);

open(DF, $datafile)
    or Fatal("Could not open $datafile: $!");
while (<DF>) {
    next
	if ($_ =~ /^#/ || $_ =~ /^$/);
    chomp($_);

    my ($ilomac,$passwd,$ctrlmac,$ip) = split(",", $_);
    
    
    $macmap{$ilomac}  = {"ilomac"  => lc($ilomac),
			 "passwd"  => $passwd,
			 "ctrlmac" => lc($ctrlmac),
			 "iloIP"   => $ip,
			 "tempIP"  => undef,
			 "ctrlIP"  => undef};
}
close(DF);

#
# Read the dhcp.leases files.
#
my $IP;
my $mac;
my $state = "free";

open(DF, $LEASES)
    or Fatal("Could not open $LEASES: $!");
while (<DF>) {
    next
	if ($_ =~ /^#/);

    # Looking for the start of a lease.
    if ($_ =~ /^lease\s*([\d\.]*)/) {
	$IP = $1;
    }
    elsif ($_ =~ /^\s*binding state (\w*)/) {
	$state = $1;
    }
    elsif ($_ =~ /hardware ethernet ([\w:]*)/) {
	$mac = $1;
        # Convert mac to DB representation.
	if ($mac =~ /(\w\w):(\w\w):(\w\w):(\w\w):(\w\w):(\w\w)/) {
	    $mac = "$1$2$3$4$5$6";
	}
	$mac = lc($mac);
    }
    elsif ($_ =~ /^\}$/) {
	if ($state eq "active" && exists($macmap{$mac})) {
	    print "$IP, $state, $mac\n"
		if ($debug);
	    if ($macmap{$mac}->{"ilomac"} eq $mac) {
		$macmap{$mac}->{"tempIP"} = $IP;
	    }
	    elsif ($macmap{$mac}->{"ctrlmac"} eq $mac) {
		$macmap{$mac}->{"ctrlIP"} = $IP;
	    }
	    else {
		Fatal("Inconsistent record for $mac");
	    }
	}
    }
}
close(DF);

#
# See what iLo interfaces we found. Search the DB for the
# corresponding nodes, using the control mac. We only process
# nodes that have been incorporated into the testbed.
#
foreach my $map (values(%macmap)) {
    next
	if (!defined($map->{'tempIP'}));

    my $ilomac   = $map->{'ilomac'};
    my $iloIP    = $map->{'iloIP'};
    my $tempIP   = $map->{'tempIP'};
    my $ctrlmac  = $map->{'ctrlmac'};
    my $ilopswd  = $map->{'passwd'};

    my $control_interface = Interface->LookupByMAC($ctrlmac);
    if (!defined($control_interface)) {
	print "No matching node for ilo mac: $ilomac/$ctrlmac\n";
	next;
    }
    my $node_id = $control_interface->node_id();
    my $node    = Node->Lookup($node_id);
    Fatal("Cannot lookup node: $node_id")
	if (!defined($node));

    print "ilo mac $ilomac ($tempIP) corresponds to $node\n";

    #
    # Make sure the desired IP is not in use. 
    #
    my $ilo_interface = Interface->LookupByIP($iloIP);
    if (defined($ilo_interface)) {
	Fatal("Interface with $iloIP alraedt exists: $ilo_interface");
    }

    #
    # Add the management interface. The interfaces table will now have
    # a proper DHCP entry for it. 
    #
    my $mcmd =
	"$ADDMNG -t ilo3 -a key -s - $node_id $ilomac $iloIP elabman $DSAKEY";
    print "$mcmd\n";
    if (!$impotent) {
	my $output = emutil::ExecQuiet("$SUDO -u elabman $WAP $mcmd");
	if ($?) {
	    print $output;
	    Fatal("Could not add management iface");
	}
    }

    #
    # Initialize iLo interface; when done, it is resetting and will get
    # new IP.
    #
    system("$SUDO -u elabman $WAP perl initilo.pl $tempIP $ilopswd");
    fatal("Could not initialize ilo")
	if ($?);
}

exit(0);

sub Fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
