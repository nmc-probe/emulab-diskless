#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "ports", "Installing ports", sub {
	Phase "packages", "Installing packages", sub {
	    Phase "main", "Installing main package", sub {
		if (!ExecQuiet("$PKG_INFO -e $BOSS_PORT")) {
		    PhaseSkip("Package already installed");
		}
		if (!$packagedir) {
		    PhaseSkip("No package directory provided");
		}
		ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $BOSS_PORT");
	    };
	    if ($FBSD_MAJOR > 4) {
		Phase "php", "Installing php${PHP_VERSION} package", sub {
		    if (!ExecQuiet("$PKG_INFO -e $PHP_PORT")) {
			PhaseSkip("Package already installed");
		    }
		    if (!$packagedir) {
			PhaseSkip("No package directory provided");
		    }
		    # XXX ugh, make sure an older version is not installed
		    if ($PHP_VERSION > 4) {
			ExecQuiet("$PKG_DEL -f -x php4-");
		    }
		    ExecQuietFatal("$ENV PKG_PATH=$packagedir ".
				   "     $PKG_ADD $PHP_PORT");
		};
		# XXX temporary: only needed til emulab-boss package updated
		Phase "tftpd", "Updating tftpd installation", sub {
		    my $pname = `$PKG_INFO -E 'emulab-tftp-hpa-*' 2>/dev/null`;
		    chomp($pname);
		    if ($pname eq $TFTPD_PKG) {
			PhaseSkip("tftpd already up to date");
		    }
		    if (!$packagedir) {
			PhaseSkip("No package directory provided");
		    }
		    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_DEL -f $pname")
			if ($pname);
		    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $TFTPD_PKG");
		};
		# XXX Also temporary
		Phase "pubsub", "Installing pubsub package", sub {
		    my $pspkg = $ELVIN_COMPAT ? "pubsub-elvincompat" : "pubsub";
		    if (!ExecQuiet("$PKG_INFO -x $pspkg")) {
			PhaseSkip("$pspkg already installed");
		    }
		    my $pname = GetPackage($pspkg, $packagedir);
		    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $pname");
		};
		# XXX Ditto
		if ($FBSD_MAJOR > 6 || ($FBSD_MAJOR == 6 && $FBSD_MINOR > 2)) {
		    if ($FBSD_MAJOR < 8) {
			Phase "p5-DBD-mysql50", "Installing old Perl Mysql package", sub {
			    my $pname = `$PKG_INFO -E 'p5-DBD-mysql50-*' 2>/dev/null`;
			    chomp($pname);
			    if ($pname eq $P5DBD_PKG) {
				PhaseSkip("p5-DBD-mysql50 already up to date");
			    }
			    if (!$packagedir) {
				PhaseSkip("No package directory provided");
			    }
			    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_DEL -f $pname")
				if ($pname);
			    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $P5DBD_PKG");
			};
		    }
		    if ($FBSD_MAJOR > 6) {
			Phase "py-m2crypto", "Installing python m2crypto package", sub {
			    my $pname = `$PKG_INFO -E 'py*-m2crypto-*' 2>/dev/null`;
			    chomp($pname);
			    if ($pname eq $PYM2_PKG) {
				PhaseSkip("py-m2crypto already up to date");
			    }
			    if (!$packagedir) {
				PhaseSkip("No package directory provided");
			    }
			    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_DEL -f $pname")
				if ($pname);
			    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $PYM2_PKG");
			};

			#
			# XXX Remove conflicting bind package,
			#
			Phase "bind9", "Removing conflicting bind package", sub {
			    PhaseSkip("bind9 already deleted")
				if (ExecQuiet("$PKG_INFO -x bind9") &&
				    !-e "/usr/local/sbin/rndc");

			    ExecQuietFatal("$PKG_DEL -r -f -x bind9");
			};
		    }
		    if ($NEEDMROUTED &&
			$FBSD_MAJOR > 7 || ($FBSD_MAJOR == 7 && $FBSD_MINOR > 2)) {
			Phase "mrouted", "Installing mrouted", sub {
			    if (!ExecQuiet("$PKG_INFO -x mrouted")) {
				PhaseSkip("mrouted already installed");
			    }
			    my $pname = GetPackage("mrouted", $packagedir);
			    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $pname");
			};
		    }
		}
	    }
	    else {
		# XXX Also temporary
		Phase "pubsub", "Installing pubsub package", sub {
		    my $pspkg = $ELVIN_COMPAT ? "pubsub-elvincompat" : "pubsub";
		    if (!ExecQuiet("$PKG_INFO -x $pspkg")) {
			PhaseSkip("$pspkg already installed");
		    }
		    my $pname = GetPackage($pspkg, $packagedir);
		    ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $pname");
		}
	    }
	    if ($PGENISUPPORT) {
		Phase "protogeni", "Installing protogeni packages", sub {
		    if ($FBSD_MAJOR > 6 || ($FBSD_MAJOR == 6 && $FBSD_MINOR > 2)) {
			if (!ExecQuiet("$PKG_INFO -x emulab-protogeni")) {
			    PhaseSkip("Protogeni package already installed");
			}
			my $pname = GetPackage("emulab-protogeni", $packagedir);
			ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $pname");
		    } else {
			PhaseSkip("OS install too old for Protogeni");
		    }
		};
	    }
	};
	if (ISFS($server)) {
	    Phase "fs-packages", "Installing FS packages", sub {
		if (!ExecQuiet("$PKG_INFO -e $FS_PORT")) {
		    PhaseSkip("FS ports already installed");
		}
		if (!$packagedir) {
		    PhaseSkip("No package directory provided");
		}
		ExecQuietFatal("$ENV PKG_PATH=$packagedir $PKG_ADD $FS_PORT");
	    };
	}
	PhaseSkip("Package directory provided; not installing from sources")
	    if ($packagedir);

	PhaseSkip("Not installing from sources in impotent mode")
	    if ($impotent);

	Phase "pcopy", "Copying ports into place", sub {
	    DoneIfExists("$PORTSMISCDIR/emulab-boss");
	    ExecQuietFatal("$SH $TOP_SRCDIR/ports/ports-install");
	};
	if ($FBSD_MAJOR == 4) {
	    # Ick. The php4 port is broken with SSL, so we have to patch
	    # it - hopefully it'll get fixed someday, and we remove this
	    Phase "php4patch", "Patching php4 port", sub {
		if (!ExecQuiet("$PATCH -C -f -l -R -p0 -i $PHP4_PATCH")) {
		    PhaseSkip("Patch already applied");
		}
		ExecQuietFatal("$PATCH -f -l -p0 -i $PHP4_PATCH");
	    };
	}
	if (ISFS($server)) {
	    Phase "fs-pinstall", "Installing FS ports (may take a while)", sub {
		if (!ExecQuiet("$PKG_INFO -e $FS_PORT")) {
		    PhaseSkip("Ports already installed");
		}
		chdir "$PORTSMISCDIR/emulab-fs" or
		    PhaseFail "Unable to change to $PORTSMISCDIR/emulab-fs: $!";
		ExecQuietFatal("make -DBATCH install");
	    };
	}
	PhaseFail("Please install ports manually, since some\n of them are " .
		  "interactive. Run: \n" .
		  "    cd $PORTSMISCDIR/emulab-boss && make install\n" .
		  "    cd $PORTSMISCDIR/emulab-php${PHP_VERSION} && make install\n" .
		  ($PGENISUPPORT ?
		   "    cd $PORTSMISCDIR/emulab-protogeni && make install\n" : "") .
		  "then re-run this script.");
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
