#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    my $phase_message = ($isupdate ?
			 "Updating named configuration" :
			 "Setting up initial named configuration");

    if ($isupdate) {
    	Phase "backup", "Backup up old files and templates", sub {
	    BackupDirectoryFatal($NAMED_DIR);
	};
    }
    Phase "named", "Setting up initial named configuration", sub {
	Phase "building", "Building named files and templates", sub {
	    ExecQuietFatal("cd $TOP_OBJDIR/named; $GMAKE");
	};
	Phase "installing", "Installing named files and templates", sub {
	    ExecQuietFatal("cd $TOP_OBJDIR/named; $GMAKE install-real");
	};
	Phase "generating", "Generating named zone files", sub {
	    ExecQuietFatal("$NAMED_SETUP -norestart");
	};

	if (!$isupdate) {
	    # Starting at 6.0 we use the default version of bind, not the port.
	    my $named_control = ($FBSD_MAJOR < 6 ?
				 "$RCDIR/1.named.sh" : "/etc/rc.d/named");
	    
	    Phase "stopping", "Stopping named", sub {
		if (ExecQuiet("killall -s named")) {
		    PhaseSkip("named not running");
		}
		if (ExecQuiet("$named_control stop")) {
		    # XXX we have seen cases where the pid file is gone
		    if (ExecQuiet("killall named")) {
			PhaseSkip("named not running!?");
		    }
		}
	    };
	    Phase "starting", "Starting named", sub {
		#
		# XXX starting sometime in FBSD6, the named start/stop script
		# returns non-zero status whether it works or not.  So we just
		# check for the existance of the pidfile after running the start
		# script.
		#
		if ($FBSD_MAJOR >= 6) {
		    unlink($NAMED_PIDFILE)
			if ( -e "$NAMED_PIDFILE");
		    if (ExecQuiet("$named_control start") &&
			! -e "$NAMED_PIDFILE") {
			PhaseFail("Unable to start named: ");
		    }
		} else {
		    ExecQuietFatal("$named_control start");
		}
	    };

	    # Lets make sure that old file is gone!
	    if ($FBSD_MAJOR >= 6) {
		Phase "cleanup", "Cleaning up old files", sub {
		    DoneIfDoesntExist("$RCDIR/1.named.sh");
		    
		    if (!unlink "$RCDIR/1.named.sh") {
			PhaseFail("Unable to remove $RCDIR/1.named.sh: $!");
		    }
		};
	    }
	}
	Phase "copying", "Copying resolv.conf over to ops", sub {
	    ExecQuietFatal("$SCP $TOP_OBJDIR/named/resolv.conf.ops ".
			   "     ${USERNODE}:/etc/resolv.conf");
	};
	Phase "copying2", "Copying resolv.conf over to fs", sub {
	    if ($USERNODE eq $FSNODE) {
		PhaseSkip("FS node is ops node");
	    }
	    if ($BOSSNODE eq $FSNODE) {
		PhaseSkip("FS node is boss node");
	    }
	    ExecQuietFatal("$SCP $TOP_OBJDIR/named/resolv.conf.ops ".
			   "     ${FSNODE}:/etc/resolv.conf");
	};
	Phase "copying3", "Copying mail access file over to ops", sub {
	    ExecQuietFatal("$SCP $TOP_OBJDIR/named/mail.access ".
			   "     ${USERNODE}:/etc/mail/access");
	    ExecQuietFatal("$SSH -o 'BatchMode=yes' root\@${USERNODE} ".
			   "     makemap hash /etc/mail/access \\< ".
			   "          /etc/mail/access");
	};
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
