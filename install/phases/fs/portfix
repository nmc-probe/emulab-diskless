#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    # XXX Temporary.
    Phase "portfixup", "Fixing up packages", sub {
	Phase "perllink", "Looking for working $EMULAB_PERL_PATH link", sub {
	    DoneIfExecutable($EMULAB_PERL_PATH);
	    if (! -x $PORT_PERL_PATH) {
		PhaseFail("$PORT_PERL_PATH does not exist!");
	    }
	    ExecQuietFatal("ln -sf $PORT_PERL_PATH $EMULAB_PERL_PATH");
	};
	Phase "pythonlink", "Looking for working $EMULAB_PYTHON_PATH link", sub {
	    DoneIfExecutable($EMULAB_PYTHON_PATH);
	    if (! -x $PORT_PYTHON_PATH) {
		PhaseFail("$PORT_PYTHON_PATH does not exist!");
	    }
	    ExecQuietFatal("ln -sf $PORT_PYTHON_PATH $EMULAB_PYTHON_PATH");
	};
	Phase "rsync", "Looking for rsync and installing", sub {
	    DoneIfPackageInstalled("rsync");
	    my $pname = GetPackage("rsync", $packagedir);
	    AddPackage($pname, $packagedir);
	};
	Phase "samba", "Looking for Samba and installing", sub {
	    if (!$WINSUPPORT) {
		PhaseSkip("Windows support not enabled");
	    }
	    DoneIfPackageInstalled("samba");
	    my $pname = GetPackage("samba", $packagedir);
	    AddPackage($pname, $packagedir);
	};
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
